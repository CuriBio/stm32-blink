
STM32-blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007370  08007370  00017370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08007388  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080073e8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  240000d0  08007448  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000818  08007448  00020818  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e63e  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce9  00000000  00000000  0003e73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00041428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  00042908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038541  00000000  00000000  00043cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e3e  00000000  00000000  0007c231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00169857  00000000  00000000  0009606f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ff8c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab4  00000000  00000000  001ff918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007318 	.word	0x08007318

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007318 	.word	0x08007318

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fe08 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f818 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9fe 	bl	80009e8 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ec:	f000 f894 	bl	8000718 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 f97c 	bl	80008ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 f9c6 	bl	8000984 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005f8:	f000 f8da 	bl	80007b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fc:	f000 f926 	bl	800084c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <main+0x34>)
 8000602:	f004 fde1 	bl	80051c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <main+0x38>)
 8000608:	f004 fdde 	bl	80051c8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x30>
 800060e:	bf00      	nop
 8000610:	240001d4 	.word	0x240001d4
 8000614:	24000220 	.word	0x24000220

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b09c      	sub	sp, #112	; 0x70
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000622:	224c      	movs	r2, #76	; 0x4c
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f006 fe6e 	bl	8007308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2220      	movs	r2, #32
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f006 fe68 	bl	8007308 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000638:	2002      	movs	r0, #2
 800063a:	f001 ff11 	bl	8002460 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <SystemClock_Config+0xf8>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	4a32      	ldr	r2, [pc, #200]	; (8000710 <SystemClock_Config+0xf8>)
 8000648:	f023 0301 	bic.w	r3, r3, #1
 800064c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800064e:	4b30      	ldr	r3, [pc, #192]	; (8000710 <SystemClock_Config+0xf8>)
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <SystemClock_Config+0xfc>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a2c      	ldr	r2, [pc, #176]	; (8000714 <SystemClock_Config+0xfc>)
 8000662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <SystemClock_Config+0xfc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000674:	bf00      	nop
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <SystemClock_Config+0xfc>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800067e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000682:	d1f8      	bne.n	8000676 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000684:	2303      	movs	r3, #3
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800068e:	2301      	movs	r3, #1
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2340      	movs	r3, #64	; 0x40
 8000694:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	2302      	movs	r3, #2
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006a2:	2318      	movs	r3, #24
 80006a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b2:	230c      	movs	r3, #12
 80006b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 ff16 	bl	80024f4 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006ce:	f000 fa87 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	233f      	movs	r3, #63	; 0x3f
 80006d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2101      	movs	r1, #1
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fb56 	bl	8002da8 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000702:	f000 fa6d 	bl	8000be0 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3770      	adds	r7, #112	; 0x70
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	58000400 	.word	0x58000400
 8000714:	58024800 	.word	0x58024800

08000718 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ETH_Init+0x80>)
 800071e:	4a1f      	ldr	r2, [pc, #124]	; (800079c <MX_ETH_Init+0x84>)
 8000720:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_ETH_Init+0x88>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_ETH_Init+0x88>)
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_ETH_Init+0x88>)
 8000730:	22e1      	movs	r2, #225	; 0xe1
 8000732:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_ETH_Init+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ETH_Init+0x88>)
 800073c:	2200      	movs	r2, #0
 800073e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_ETH_Init+0x88>)
 8000742:	2200      	movs	r2, #0
 8000744:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_ETH_Init+0x80>)
 8000748:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_ETH_Init+0x88>)
 800074a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_ETH_Init+0x80>)
 800074e:	2201      	movs	r2, #1
 8000750:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ETH_Init+0x80>)
 8000754:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <MX_ETH_Init+0x8c>)
 8000756:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ETH_Init+0x80>)
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <MX_ETH_Init+0x90>)
 800075c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_ETH_Init+0x80>)
 8000760:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000764:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_ETH_Init+0x80>)
 8000768:	f000 ff2a 	bl	80015c0 <HAL_ETH_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 fa35 	bl	8000be0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000776:	2238      	movs	r2, #56	; 0x38
 8000778:	2100      	movs	r1, #0
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_ETH_Init+0x94>)
 800077c:	f006 fdc4 	bl	8007308 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_ETH_Init+0x94>)
 8000782:	2221      	movs	r2, #33	; 0x21
 8000784:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_ETH_Init+0x94>)
 8000788:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800078c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_ETH_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	24000124 	.word	0x24000124
 800079c:	40028000 	.word	0x40028000
 80007a0:	2400080c 	.word	0x2400080c
 80007a4:	24000070 	.word	0x24000070
 80007a8:	24000010 	.word	0x24000010
 80007ac:	240000ec 	.word	0x240000ec

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_TIM2_Init+0x98>)
 80007d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 640-1;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_TIM2_Init+0x98>)
 80007d8:	f240 227f 	movw	r2, #639	; 0x27f
 80007dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_TIM2_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000-1;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_TIM2_Init+0x98>)
 80007e6:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80007ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_TIM2_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_TIM2_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f8:	4813      	ldr	r0, [pc, #76]	; (8000848 <MX_TIM2_Init+0x98>)
 80007fa:	f004 fc8d 	bl	8005118 <HAL_TIM_Base_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000804:	f000 f9ec 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4619      	mov	r1, r3
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <MX_TIM2_Init+0x98>)
 8000816:	f004 fe6f 	bl	80054f8 <HAL_TIM_ConfigClockSource>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000820:	f000 f9de 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_TIM2_Init+0x98>)
 8000832:	f005 f8b9 	bl	80059a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 f9d0 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	240001d4 	.word	0x240001d4

0800084c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_TIM3_Init+0x98>)
 800086c:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <MX_TIM3_Init+0x9c>)
 800086e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640-1;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_TIM3_Init+0x98>)
 8000872:	f240 227f 	movw	r2, #639	; 0x27f
 8000876:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_TIM3_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_TIM3_Init+0x98>)
 8000880:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000884:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_TIM3_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_TIM3_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_TIM3_Init+0x98>)
 8000894:	f004 fc40 	bl	8005118 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800089e:	f000 f99f 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_TIM3_Init+0x98>)
 80008b0:	f004 fe22 	bl	80054f8 <HAL_TIM_ConfigClockSource>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008ba:	f000 f991 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_TIM3_Init+0x98>)
 80008cc:	f005 f86c 	bl	80059a8 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80008d6:	f000 f983 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	24000220 	.word	0x24000220
 80008e8:	40000400 	.word	0x40000400

080008ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_USART3_UART_Init+0x90>)
 80008f2:	4a23      	ldr	r2, [pc, #140]	; (8000980 <MX_USART3_UART_Init+0x94>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_USART3_UART_Init+0x90>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_USART3_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_USART3_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_USART3_UART_Init+0x90>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_USART3_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_USART3_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_USART3_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USART3_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_USART3_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_USART3_UART_Init+0x90>)
 8000936:	f005 f8e3 	bl	8005b00 <HAL_UART_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000940:	f000 f94e 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_USART3_UART_Init+0x90>)
 8000948:	f006 f8e5 	bl	8006b16 <HAL_UARTEx_SetTxFifoThreshold>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000952:	f000 f945 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <MX_USART3_UART_Init+0x90>)
 800095a:	f006 f91a 	bl	8006b92 <HAL_UARTEx_SetRxFifoThreshold>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000964:	f000 f93c 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_USART3_UART_Init+0x90>)
 800096a:	f006 f89b 	bl	8006aa4 <HAL_UARTEx_DisableFifoMode>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000974:	f000 f934 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2400026c 	.word	0x2400026c
 8000980:	40004800 	.word	0x40004800

08000984 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098a:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800098c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000990:	2209      	movs	r2, #9
 8000992:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000996:	2202      	movs	r2, #2
 8000998:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a2:	2202      	movs	r2, #2
 80009a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009cc:	f001 fbff 	bl	80021ce <HAL_PCD_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009d6:	f000 f903 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	24000300 	.word	0x24000300
 80009e4:	40080000 	.word	0x40080000

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b62      	ldr	r3, [pc, #392]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	4a60      	ldr	r2, [pc, #384]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0e:	4b5e      	ldr	r3, [pc, #376]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1c:	4b5a      	ldr	r3, [pc, #360]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	4a59      	ldr	r2, [pc, #356]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2c:	4b56      	ldr	r3, [pc, #344]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b53      	ldr	r3, [pc, #332]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	4a51      	ldr	r2, [pc, #324]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4a:	4b4f      	ldr	r3, [pc, #316]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b4b      	ldr	r3, [pc, #300]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	4a4a      	ldr	r2, [pc, #296]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a68:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a42      	ldr	r2, [pc, #264]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a94:	4b3c      	ldr	r3, [pc, #240]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a3b      	ldr	r2, [pc, #236]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b38      	ldr	r3, [pc, #224]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab2:	4b35      	ldr	r3, [pc, #212]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <MX_GPIO_Init+0x1a0>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ad6:	482d      	ldr	r0, [pc, #180]	; (8000b8c <MX_GPIO_Init+0x1a4>)
 8000ad8:	f001 fb46 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae2:	482b      	ldr	r0, [pc, #172]	; (8000b90 <MX_GPIO_Init+0x1a8>)
 8000ae4:	f001 fb40 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4829      	ldr	r0, [pc, #164]	; (8000b94 <MX_GPIO_Init+0x1ac>)
 8000aee:	f001 fb3b 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4824      	ldr	r0, [pc, #144]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000b08:	f001 f97e 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b0c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4819      	ldr	r0, [pc, #100]	; (8000b8c <MX_GPIO_Init+0x1a4>)
 8000b26:	f001 f96f 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_GPIO_Init+0x1a8>)
 8000b44:	f001 f960 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480f      	ldr	r0, [pc, #60]	; (8000b9c <MX_GPIO_Init+0x1b4>)
 8000b5e:	f001 f953 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <MX_GPIO_Init+0x1ac>)
 8000b7a:	f001 f945 	bl	8001e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7e:	bf00      	nop
 8000b80:	3730      	adds	r7, #48	; 0x30
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	58020400 	.word	0x58020400
 8000b90:	58020c00 	.word	0x58020c00
 8000b94:	58021000 	.word	0x58021000
 8000b98:	58020800 	.word	0x58020800
 8000b9c:	58021800 	.word	0x58021800

08000ba0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if (htim == &htim2) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d104      	bne.n	8000bba <HAL_TIM_PeriodElapsedCallback+0x1a>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bb6:	f001 faf0 	bl	800219a <HAL_GPIO_TogglePin>
  }
  if (htim == &htim3) {
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d103      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x2a>
  	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bc6:	f001 fae8 	bl	800219a <HAL_GPIO_TogglePin>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	240001d4 	.word	0x240001d4
 8000bd8:	58020400 	.word	0x58020400
 8000bdc:	24000220 	.word	0x24000220

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_MspInit+0x30>)
 8000bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf8:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x30>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x30>)
 8000c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	58024400 	.word	0x58024400

08000c20 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a59      	ldr	r2, [pc, #356]	; (8000da4 <HAL_ETH_MspInit+0x184>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	f040 80ab 	bne.w	8000d9a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c44:	4b58      	ldr	r3, [pc, #352]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000c46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c4a:	4a57      	ldr	r2, [pc, #348]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c54:	4b54      	ldr	r3, [pc, #336]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c5e:	623b      	str	r3, [r7, #32]
 8000c60:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c62:	4b51      	ldr	r3, [pc, #324]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000c64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c68:	4a4f      	ldr	r2, [pc, #316]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c72:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000c74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c80:	4b49      	ldr	r3, [pc, #292]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000c82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c86:	4a48      	ldr	r2, [pc, #288]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c90:	4b45      	ldr	r3, [pc, #276]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000c92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b42      	ldr	r3, [pc, #264]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a40      	ldr	r2, [pc, #256]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b3e      	ldr	r3, [pc, #248]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	4a39      	ldr	r2, [pc, #228]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ccc:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	4a31      	ldr	r2, [pc, #196]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	4a2a      	ldr	r2, [pc, #168]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_ETH_MspInit+0x188>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d16:	2332      	movs	r3, #50	; 0x32
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d26:	230b      	movs	r3, #11
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	481e      	ldr	r0, [pc, #120]	; (8000dac <HAL_ETH_MspInit+0x18c>)
 8000d32:	f001 f869 	bl	8001e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d36:	2386      	movs	r3, #134	; 0x86
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d46:	230b      	movs	r3, #11
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4817      	ldr	r0, [pc, #92]	; (8000db0 <HAL_ETH_MspInit+0x190>)
 8000d52:	f001 f859 	bl	8001e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d68:	230b      	movs	r3, #11
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	4810      	ldr	r0, [pc, #64]	; (8000db4 <HAL_ETH_MspInit+0x194>)
 8000d74:	f001 f848 	bl	8001e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d78:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8a:	230b      	movs	r3, #11
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <HAL_ETH_MspInit+0x198>)
 8000d96:	f001 f837 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3738      	adds	r7, #56	; 0x38
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40028000 	.word	0x40028000
 8000da8:	58024400 	.word	0x58024400
 8000dac:	58020800 	.word	0x58020800
 8000db0:	58020000 	.word	0x58020000
 8000db4:	58020400 	.word	0x58020400
 8000db8:	58021800 	.word	0x58021800

08000dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d117      	bne.n	8000dfe <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_TIM_Base_MspInit+0x84>)
 8000dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dd4:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <HAL_TIM_Base_MspInit+0x84>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_TIM_Base_MspInit+0x84>)
 8000de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	201c      	movs	r0, #28
 8000df2:	f000 fbb0 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df6:	201c      	movs	r0, #28
 8000df8:	f000 fbc7 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dfc:	e01b      	b.n	8000e36 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_TIM_Base_MspInit+0x88>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d116      	bne.n	8000e36 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_TIM_Base_MspInit+0x84>)
 8000e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <HAL_TIM_Base_MspInit+0x84>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_TIM_Base_MspInit+0x84>)
 8000e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	201d      	movs	r0, #29
 8000e2c:	f000 fb93 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e30:	201d      	movs	r0, #29
 8000e32:	f000 fbaa 	bl	800158a <HAL_NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	58024400 	.word	0x58024400
 8000e44:	40000400 	.word	0x40000400

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ba      	sub	sp, #232	; 0xe8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	22c0      	movs	r2, #192	; 0xc0
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f006 fa4d 	bl	8007308 <memset>
  if(huart->Instance==USART3)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <HAL_UART_MspInit+0xc8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d146      	bne.n	8000f06 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e78:	f04f 0202 	mov.w	r2, #2
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fb16 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e9a:	f7ff fea1 	bl	8000be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_UART_MspInit+0xcc>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_UART_MspInit+0xd0>)
 8000f02:	f000 ff81 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	37e8      	adds	r7, #232	; 0xe8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40004800 	.word	0x40004800
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020c00 	.word	0x58020c00

08000f1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ba      	sub	sp, #232	; 0xe8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	22c0      	movs	r2, #192	; 0xc0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 f9e3 	bl	8007308 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a30      	ldr	r2, [pc, #192]	; (8001008 <HAL_PCD_MspInit+0xec>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d159      	bne.n	8001000 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 faab 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000f70:	f7ff fe36 	bl	8000be0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f74:	f001 faae 	bl	80024d4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <HAL_PCD_MspInit+0xf0>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_PCD_MspInit+0xf0>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_PCD_MspInit+0xf0>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f96:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4814      	ldr	r0, [pc, #80]	; (8001010 <HAL_PCD_MspInit+0xf4>)
 8000fbe:	f000 ff23 	bl	8001e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <HAL_PCD_MspInit+0xf4>)
 8000fde:	f000 ff13 	bl	8001e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_PCD_MspInit+0xf0>)
 8000fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_PCD_MspInit+0xf0>)
 8000fea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_PCD_MspInit+0xf0>)
 8000ff4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	37e8      	adds	r7, #232	; 0xe8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40080000 	.word	0x40080000
 800100c:	58024400 	.word	0x58024400
 8001010:	58020000 	.word	0x58020000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001060:	f000 f93a 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TIM2_IRQHandler+0x10>)
 800106e:	f004 f923 	bl	80052b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	240001d4 	.word	0x240001d4

0800107c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM3_IRQHandler+0x10>)
 8001082:	f004 f919 	bl	80052b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	24000220 	.word	0x24000220

08001090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001094:	4b37      	ldr	r3, [pc, #220]	; (8001174 <SystemInit+0xe4>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	4a36      	ldr	r2, [pc, #216]	; (8001174 <SystemInit+0xe4>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010a4:	4b34      	ldr	r3, [pc, #208]	; (8001178 <SystemInit+0xe8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 030f 	and.w	r3, r3, #15
 80010ac:	2b06      	cmp	r3, #6
 80010ae:	d807      	bhi.n	80010c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b0:	4b31      	ldr	r3, [pc, #196]	; (8001178 <SystemInit+0xe8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f023 030f 	bic.w	r3, r3, #15
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <SystemInit+0xe8>)
 80010ba:	f043 0307 	orr.w	r3, r3, #7
 80010be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <SystemInit+0xec>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a2d      	ldr	r2, [pc, #180]	; (800117c <SystemInit+0xec>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <SystemInit+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <SystemInit+0xec>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4929      	ldr	r1, [pc, #164]	; (800117c <SystemInit+0xec>)
 80010d8:	4b29      	ldr	r3, [pc, #164]	; (8001180 <SystemInit+0xf0>)
 80010da:	4013      	ands	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <SystemInit+0xe8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <SystemInit+0xe8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 030f 	bic.w	r3, r3, #15
 80010f2:	4a21      	ldr	r2, [pc, #132]	; (8001178 <SystemInit+0xe8>)
 80010f4:	f043 0307 	orr.w	r3, r3, #7
 80010f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <SystemInit+0xec>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <SystemInit+0xec>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <SystemInit+0xec>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <SystemInit+0xec>)
 800110e:	4a1d      	ldr	r2, [pc, #116]	; (8001184 <SystemInit+0xf4>)
 8001110:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <SystemInit+0xec>)
 8001114:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <SystemInit+0xf8>)
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <SystemInit+0xec>)
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <SystemInit+0xfc>)
 800111c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <SystemInit+0xec>)
 8001120:	2200      	movs	r2, #0
 8001122:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <SystemInit+0xec>)
 8001126:	4a19      	ldr	r2, [pc, #100]	; (800118c <SystemInit+0xfc>)
 8001128:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <SystemInit+0xec>)
 800112c:	2200      	movs	r2, #0
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <SystemInit+0xec>)
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <SystemInit+0xfc>)
 8001134:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <SystemInit+0xec>)
 8001138:	2200      	movs	r2, #0
 800113a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <SystemInit+0xec>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <SystemInit+0xec>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <SystemInit+0xec>)
 800114a:	2200      	movs	r2, #0
 800114c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <SystemInit+0x100>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <SystemInit+0x104>)
 8001154:	4013      	ands	r3, r2
 8001156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800115a:	d202      	bcs.n	8001162 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <SystemInit+0x108>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <SystemInit+0x10c>)
 8001164:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001168:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	52002000 	.word	0x52002000
 800117c:	58024400 	.word	0x58024400
 8001180:	eaf6ed7f 	.word	0xeaf6ed7f
 8001184:	02020200 	.word	0x02020200
 8001188:	01ff0000 	.word	0x01ff0000
 800118c:	01010280 	.word	0x01010280
 8001190:	5c001000 	.word	0x5c001000
 8001194:	ffff0000 	.word	0xffff0000
 8001198:	51008108 	.word	0x51008108
 800119c:	52004000 	.word	0x52004000

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011a4:	f7ff ff74 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ce:	f006 f877 	bl	80072c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff fa03 	bl	80005dc <main>
  bx  lr
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011e0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80011e4:	08007378 	.word	0x08007378
  ldr r2, =_sbss
 80011e8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80011ec:	24000818 	.word	0x24000818

080011f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC3_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 f9a0 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001200:	f001 ff88 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 8001204:	4602      	mov	r2, r0
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_Init+0x68>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	4913      	ldr	r1, [pc, #76]	; (8001260 <HAL_Init+0x6c>)
 8001212:	5ccb      	ldrb	r3, [r1, r3]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_Init+0x68>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_Init+0x6c>)
 8001228:	5cd3      	ldrb	r3, [r2, r3]
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_Init+0x70>)
 8001236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_Init+0x74>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f814 	bl	800126c <HAL_InitTick>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e002      	b.n	8001254 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800124e:	f7ff fccd 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	58024400 	.word	0x58024400
 8001260:	08007330 	.word	0x08007330
 8001264:	24000004 	.word	0x24000004
 8001268:	24000000 	.word	0x24000000

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_InitTick+0x60>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e021      	b.n	80012c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_InitTick+0x64>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_InitTick+0x60>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f985 	bl	80015a6 <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00e      	b.n	80012c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d80a      	bhi.n	80012c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b4:	f000 f94f 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_InitTick+0x68>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2400000c 	.word	0x2400000c
 80012d0:	24000000 	.word	0x24000000
 80012d4:	24000008 	.word	0x24000008

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2400000c 	.word	0x2400000c
 80012fc:	24000814 	.word	0x24000814

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	24000814 	.word	0x24000814

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff ffee 	bl	8001300 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_Delay+0x44>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133e:	bf00      	nop
 8001340:	f7ff ffde 	bl	8001300 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2400000c 	.word	0x2400000c

08001360 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetREVID+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0c1b      	lsrs	r3, r3, #16
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	5c001000 	.word	0x5c001000

08001378 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001388:	4904      	ldr	r1, [pc, #16]	; (800139c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	58000400 	.word	0x58000400

080013a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <__NVIC_SetPriorityGrouping+0x40>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x40>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	05fa0000 	.word	0x05fa0000

080013e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <__NVIC_GetPriorityGrouping+0x18>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	f003 0307 	and.w	r3, r3, #7
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800140e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001412:	2b00      	cmp	r3, #0
 8001414:	db0b      	blt.n	800142e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <__NVIC_EnableIRQ+0x38>)
 800141e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	2001      	movs	r0, #1
 8001426:	fa00 f202 	lsl.w	r2, r0, r2
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001520:	f7ff ff8e 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff29 	bl	80013a0 <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff40 	bl	80013e8 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff90 	bl	8001494 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5f 	bl	8001440 <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff33 	bl	8001404 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa4 	bl	80014fc <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0cf      	b.n	8001772 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d106      	bne.n	80015ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2223      	movs	r2, #35	; 0x23
 80015e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fb1b 	bl	8000c20 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b64      	ldr	r3, [pc, #400]	; (800177c <HAL_ETH_Init+0x1bc>)
 80015ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f0:	4a62      	ldr	r2, [pc, #392]	; (800177c <HAL_ETH_Init+0x1bc>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015fa:	4b60      	ldr	r3, [pc, #384]	; (800177c <HAL_ETH_Init+0x1bc>)
 80015fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7a1b      	ldrb	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d103      	bne.n	8001618 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff feb1 	bl	8001378 <HAL_SYSCFG_ETHInterfaceSelect>
 8001616:	e003      	b.n	8001620 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001618:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800161c:	f7ff feac 	bl	8001378 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001620:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_ETH_Init+0x1c0>)
 8001622:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800163a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800163c:	f7ff fe60 	bl	8001300 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001642:	e011      	b.n	8001668 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001644:	f7ff fe5c 	bl	8001300 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001652:	d909      	bls.n	8001668 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2204      	movs	r2, #4
 8001658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	22e0      	movs	r2, #224	; 0xe0
 8001660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e084      	b.n	8001772 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1e4      	bne.n	8001644 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f886 	bl	800178c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001680:	f001 fec2 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8001684:	4603      	mov	r3, r0
 8001686:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <HAL_ETH_Init+0x1c4>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	0c9a      	lsrs	r2, r3, #18
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3a01      	subs	r2, #1
 8001694:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fa71 	bl	8001b80 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80016aa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	22e0      	movs	r2, #224	; 0xe0
 80016d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e049      	b.n	8001772 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_ETH_Init+0x1c8>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6952      	ldr	r2, [r2, #20]
 80016f2:	0051      	lsls	r1, r2, #1
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	430b      	orrs	r3, r1
 80016fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016fe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fad9 	bl	8001cba <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fb1f 	bl	8001d4c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	3305      	adds	r3, #5
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	3304      	adds	r3, #4
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	3303      	adds	r3, #3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	061a      	lsls	r2, r3, #24
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	3302      	adds	r3, #2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	3301      	adds	r3, #1
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800174c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800175a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800175c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2210      	movs	r2, #16
 800176c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	58024400 	.word	0x58024400
 8001780:	58000400 	.word	0x58000400
 8001784:	431bde83 	.word	0x431bde83
 8001788:	ffff8001 	.word	0xffff8001

0800178c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800179c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017a6:	f001 fe2f 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 80017aa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d908      	bls.n	80017c6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d804      	bhi.n	80017c6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e027      	b.n	8001816 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4a18      	ldr	r2, [pc, #96]	; (800182c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d908      	bls.n	80017e0 <HAL_ETH_SetMDIOClockRange+0x54>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d204      	bcs.n	80017e0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e01a      	b.n	8001816 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d303      	bcc.n	80017f0 <HAL_ETH_SetMDIOClockRange+0x64>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d911      	bls.n	8001814 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d908      	bls.n	800180a <HAL_ETH_SetMDIOClockRange+0x7e>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_ETH_SetMDIOClockRange+0xac>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d804      	bhi.n	800180a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e005      	b.n	8001816 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e000      	b.n	8001816 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001814:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	01312cff 	.word	0x01312cff
 800182c:	02160ebf 	.word	0x02160ebf
 8001830:	03938700 	.word	0x03938700
 8001834:	05f5e0ff 	.word	0x05f5e0ff
 8001838:	08f0d17f 	.word	0x08f0d17f

0800183c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800184e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	791b      	ldrb	r3, [r3, #4]
 8001854:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	7b1b      	ldrb	r3, [r3, #12]
 800185c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800185e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	7b5b      	ldrb	r3, [r3, #13]
 8001864:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	7b9b      	ldrb	r3, [r3, #14]
 800186c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800186e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	7bdb      	ldrb	r3, [r3, #15]
 8001874:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001876:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	7c12      	ldrb	r2, [r2, #16]
 800187c:	2a00      	cmp	r2, #0
 800187e:	d102      	bne.n	8001886 <ETH_SetMACConfig+0x4a>
 8001880:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001884:	e000      	b.n	8001888 <ETH_SetMACConfig+0x4c>
 8001886:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001888:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	7c52      	ldrb	r2, [r2, #17]
 800188e:	2a00      	cmp	r2, #0
 8001890:	d102      	bne.n	8001898 <ETH_SetMACConfig+0x5c>
 8001892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001896:	e000      	b.n	800189a <ETH_SetMACConfig+0x5e>
 8001898:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800189a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	7c9b      	ldrb	r3, [r3, #18]
 80018a0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018a2:	431a      	orrs	r2, r3
               macconf->Speed |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018a8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7f1b      	ldrb	r3, [r3, #28]
 80018b4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7f5b      	ldrb	r3, [r3, #29]
 80018bc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	7f92      	ldrb	r2, [r2, #30]
 80018c4:	2a00      	cmp	r2, #0
 80018c6:	d102      	bne.n	80018ce <ETH_SetMACConfig+0x92>
 80018c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018cc:	e000      	b.n	80018d0 <ETH_SetMACConfig+0x94>
 80018ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	7fdb      	ldrb	r3, [r3, #31]
 80018d6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d102      	bne.n	80018ea <ETH_SetMACConfig+0xae>
 80018e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e8:	e000      	b.n	80018ec <ETH_SetMACConfig+0xb0>
 80018ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018ec:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018fa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018fc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <ETH_SetMACConfig+0x22c>)
 800190e:	4013      	ands	r3, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	68f9      	ldr	r1, [r7, #12]
 8001916:	430b      	orrs	r3, r1
 8001918:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001926:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001928:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001930:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001932:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800193a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800193c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001944:	2a00      	cmp	r2, #0
 8001946:	d102      	bne.n	800194e <ETH_SetMACConfig+0x112>
 8001948:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800194c:	e000      	b.n	8001950 <ETH_SetMACConfig+0x114>
 800194e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001950:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001956:	4313      	orrs	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <ETH_SetMACConfig+0x230>)
 8001962:	4013      	ands	r3, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	430b      	orrs	r3, r1
 800196c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001974:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <ETH_SetMACConfig+0x234>)
 8001986:	4013      	ands	r3, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	430b      	orrs	r3, r1
 8001990:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001998:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800199e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80019a6:	2a00      	cmp	r2, #0
 80019a8:	d101      	bne.n	80019ae <ETH_SetMACConfig+0x172>
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	e000      	b.n	80019b0 <ETH_SetMACConfig+0x174>
 80019ae:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019b0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019c2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80019c6:	4013      	ands	r3, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	430b      	orrs	r3, r1
 80019d0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019d8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80019e0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	f023 0103 	bic.w	r1, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001a06:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	d101      	bne.n	8001a2a <ETH_SetMACConfig+0x1ee>
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	e000      	b.n	8001a2c <ETH_SetMACConfig+0x1f0>
 8001a2a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a2c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a34:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a3e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a4c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	00048083 	.word	0x00048083
 8001a6c:	c0f88000 	.word	0xc0f88000
 8001a70:	fffffef0 	.word	0xfffffef0

08001a74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <ETH_SetDMAConfig+0xf8>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	6811      	ldr	r1, [r2, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a9a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	791b      	ldrb	r3, [r3, #4]
 8001aa0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aa6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	7b1b      	ldrb	r3, [r3, #12]
 8001aac:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <ETH_SetDMAConfig+0xfc>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	68f9      	ldr	r1, [r7, #12]
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001acc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7b5b      	ldrb	r3, [r3, #13]
 8001ad2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <ETH_SetDMAConfig+0x100>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	430b      	orrs	r3, r1
 8001af4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001af8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	7d1b      	ldrb	r3, [r3, #20]
 8001b04:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b06:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	7f5b      	ldrb	r3, [r3, #29]
 8001b0c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <ETH_SetDMAConfig+0x104>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	68f9      	ldr	r1, [r7, #12]
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b2e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	7f1b      	ldrb	r3, [r3, #28]
 8001b36:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b48:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <ETH_SetDMAConfig+0x108>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	430b      	orrs	r3, r1
 8001b58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b5c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	ffff87fd 	.word	0xffff87fd
 8001b70:	ffff2ffe 	.word	0xffff2ffe
 8001b74:	fffec000 	.word	0xfffec000
 8001b78:	ffc0efef 	.word	0xffc0efef
 8001b7c:	7fc0ffff 	.word	0x7fc0ffff

08001b80 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0a4      	sub	sp, #144	; 0x90
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001bd8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001bdc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001be4:	2300      	movs	r3, #0
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c02:	2300      	movs	r3, #0
 8001c04:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c2a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c34:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fde6 	bl	800183c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c74:	2301      	movs	r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c8e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c98:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001ca0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fee1 	bl	8001a74 <ETH_SetDMAConfig>
}
 8001cb2:	bf00      	nop
 8001cb4:	3790      	adds	r7, #144	; 0x90
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e01d      	b.n	8001d04 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68d9      	ldr	r1, [r3, #12]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	3206      	adds	r2, #6
 8001cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3301      	adds	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d9de      	bls.n	8001cc8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d3c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e023      	b.n	8001da2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6919      	ldr	r1, [r3, #16]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	3212      	adds	r2, #18
 8001d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d9d8      	bls.n	8001d5a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e16:	4b89      	ldr	r3, [pc, #548]	; (800203c <HAL_GPIO_Init+0x234>)
 8001e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e1a:	e194      	b.n	8002146 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8186 	beq.w	8002140 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d005      	beq.n	8001e4c <HAL_GPIO_Init+0x44>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d130      	bne.n	8001eae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e82:	2201      	movs	r2, #1
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 0201 	and.w	r2, r3, #1
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d017      	beq.n	8001eea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d123      	bne.n	8001f3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	69b9      	ldr	r1, [r7, #24]
 8001f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0203 	and.w	r2, r3, #3
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80e0 	beq.w	8002140 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <HAL_GPIO_Init+0x238>)
 8001f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f86:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <HAL_GPIO_Init+0x238>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f90:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_GPIO_Init+0x238>)
 8001f92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9e:	4a29      	ldr	r2, [pc, #164]	; (8002044 <HAL_GPIO_Init+0x23c>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a20      	ldr	r2, [pc, #128]	; (8002048 <HAL_GPIO_Init+0x240>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d052      	beq.n	8002070 <HAL_GPIO_Init+0x268>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	; (800204c <HAL_GPIO_Init+0x244>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d031      	beq.n	8002036 <HAL_GPIO_Init+0x22e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_GPIO_Init+0x248>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d02b      	beq.n	8002032 <HAL_GPIO_Init+0x22a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <HAL_GPIO_Init+0x24c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d025      	beq.n	800202e <HAL_GPIO_Init+0x226>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_GPIO_Init+0x250>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <HAL_GPIO_Init+0x222>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1b      	ldr	r2, [pc, #108]	; (800205c <HAL_GPIO_Init+0x254>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x21e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <HAL_GPIO_Init+0x258>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x21a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a19      	ldr	r2, [pc, #100]	; (8002064 <HAL_GPIO_Init+0x25c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x216>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_GPIO_Init+0x260>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x212>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_GPIO_Init+0x264>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x20e>
 8002012:	2309      	movs	r3, #9
 8002014:	e02d      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002016:	230a      	movs	r3, #10
 8002018:	e02b      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800201a:	2308      	movs	r3, #8
 800201c:	e029      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800201e:	2307      	movs	r3, #7
 8002020:	e027      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002022:	2306      	movs	r3, #6
 8002024:	e025      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002026:	2305      	movs	r3, #5
 8002028:	e023      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800202a:	2304      	movs	r3, #4
 800202c:	e021      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800202e:	2303      	movs	r3, #3
 8002030:	e01f      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002032:	2302      	movs	r3, #2
 8002034:	e01d      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002036:	2301      	movs	r3, #1
 8002038:	e01b      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800203a:	bf00      	nop
 800203c:	58000080 	.word	0x58000080
 8002040:	58024400 	.word	0x58024400
 8002044:	58000400 	.word	0x58000400
 8002048:	58020000 	.word	0x58020000
 800204c:	58020400 	.word	0x58020400
 8002050:	58020800 	.word	0x58020800
 8002054:	58020c00 	.word	0x58020c00
 8002058:	58021000 	.word	0x58021000
 800205c:	58021400 	.word	0x58021400
 8002060:	58021800 	.word	0x58021800
 8002064:	58021c00 	.word	0x58021c00
 8002068:	58022000 	.word	0x58022000
 800206c:	58022400 	.word	0x58022400
 8002070:	2300      	movs	r3, #0
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002082:	4938      	ldr	r1, [pc, #224]	; (8002164 <HAL_GPIO_Init+0x35c>)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3301      	adds	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f ae63 	bne.w	8001e1c <HAL_GPIO_Init+0x14>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3724      	adds	r7, #36	; 0x24
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	58000400 	.word	0x58000400

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	619a      	str	r2, [r3, #24]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	041a      	lsls	r2, r3, #16
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	400b      	ands	r3, r1
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d0:	b08f      	sub	sp, #60	; 0x3c
 80021d2:	af0a      	add	r7, sp, #40	; 0x28
 80021d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e116      	b.n	800240e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe fe8e 	bl	8000f1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fdb2 	bl	8006d88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	687e      	ldr	r6, [r7, #4]
 800222c:	466d      	mov	r5, sp
 800222e:	f106 0410 	add.w	r4, r6, #16
 8002232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800223e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002242:	1d33      	adds	r3, r6, #4
 8002244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002246:	6838      	ldr	r0, [r7, #0]
 8002248:	f004 fd30 	bl	8006cac <USB_CoreInit>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0d7      	b.n	800240e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fda0 	bl	8006daa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e04a      	b.n	8002306 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	333d      	adds	r3, #61	; 0x3d
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	333c      	adds	r3, #60	; 0x3c
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	b298      	uxth	r0, r3
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	3356      	adds	r3, #86	; 0x56
 80022ac:	4602      	mov	r2, r0
 80022ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	3340      	adds	r3, #64	; 0x40
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	3344      	adds	r3, #68	; 0x44
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3348      	adds	r3, #72	; 0x48
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	334c      	adds	r3, #76	; 0x4c
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	3301      	adds	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d3af      	bcc.n	8002270 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	e044      	b.n	80023a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	3301      	adds	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d3b5      	bcc.n	8002316 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	687e      	ldr	r6, [r7, #4]
 80023b2:	466d      	mov	r5, sp
 80023b4:	f106 0410 	add.w	r4, r6, #16
 80023b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c8:	1d33      	adds	r3, r6, #4
 80023ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023cc:	6838      	ldr	r0, [r7, #0]
 80023ce:	f004 fd39 	bl	8006e44 <USB_DevInit>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e014      	b.n	800240e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d102      	bne.n	8002402 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f80b 	bl	8002418 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f004 fef7 	bl	80071fa <USB_DevDisconnect>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002418 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_PCDEx_ActivateLPM+0x44>)
 8002448:	4313      	orrs	r3, r2
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	10000003 	.word	0x10000003

08002460 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_PWREx_ConfigSupply+0x70>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d00a      	beq.n	800248a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002474:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_PWREx_ConfigSupply+0x70>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	429a      	cmp	r2, r3
 8002480:	d001      	beq.n	8002486 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e01f      	b.n	80024c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e01d      	b.n	80024c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_PWREx_ConfigSupply+0x70>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	490f      	ldr	r1, [pc, #60]	; (80024d0 <HAL_PWREx_ConfigSupply+0x70>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4313      	orrs	r3, r2
 8002498:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800249a:	f7fe ff31 	bl	8001300 <HAL_GetTick>
 800249e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024a0:	e009      	b.n	80024b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024a2:	f7fe ff2d 	bl	8001300 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024b0:	d901      	bls.n	80024b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e007      	b.n	80024c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_PWREx_ConfigSupply+0x70>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c2:	d1ee      	bne.n	80024a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	58024800 	.word	0x58024800

080024d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	58024800 	.word	0x58024800

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08c      	sub	sp, #48	; 0x30
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f000 bc48 	b.w	8002d98 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8088 	beq.w	8002626 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002516:	4b99      	ldr	r3, [pc, #612]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002520:	4b96      	ldr	r3, [pc, #600]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	2b10      	cmp	r3, #16
 800252a:	d007      	beq.n	800253c <HAL_RCC_OscConfig+0x48>
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	2b18      	cmp	r3, #24
 8002530:	d111      	bne.n	8002556 <HAL_RCC_OscConfig+0x62>
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d10c      	bne.n	8002556 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	4b8f      	ldr	r3, [pc, #572]	; (800277c <HAL_RCC_OscConfig+0x288>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d06d      	beq.n	8002624 <HAL_RCC_OscConfig+0x130>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d169      	bne.n	8002624 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	f000 bc21 	b.w	8002d98 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x7a>
 8002560:	4b86      	ldr	r3, [pc, #536]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a85      	ldr	r2, [pc, #532]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	e02e      	b.n	80025cc <HAL_RCC_OscConfig+0xd8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x9c>
 8002576:	4b81      	ldr	r3, [pc, #516]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a80      	ldr	r2, [pc, #512]	; (800277c <HAL_RCC_OscConfig+0x288>)
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b7e      	ldr	r3, [pc, #504]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a7d      	ldr	r2, [pc, #500]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e01d      	b.n	80025cc <HAL_RCC_OscConfig+0xd8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0xc0>
 800259a:	4b78      	ldr	r3, [pc, #480]	; (800277c <HAL_RCC_OscConfig+0x288>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a77      	ldr	r2, [pc, #476]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b75      	ldr	r3, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a74      	ldr	r2, [pc, #464]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0xd8>
 80025b4:	4b71      	ldr	r3, [pc, #452]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a70      	ldr	r2, [pc, #448]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b6e      	ldr	r3, [pc, #440]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a6d      	ldr	r2, [pc, #436]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80025c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fe94 	bl	8001300 <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe fe90 	bl	8001300 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e3d4      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0xe8>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fe80 	bl	8001300 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002604:	f7fe fe7c 	bl	8001300 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e3c0      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002616:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x110>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80ca 	beq.w	80027c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002634:	4b51      	ldr	r3, [pc, #324]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800263c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800263e:	4b4f      	ldr	r3, [pc, #316]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_RCC_OscConfig+0x166>
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	2b18      	cmp	r3, #24
 800264e:	d156      	bne.n	80026fe <HAL_RCC_OscConfig+0x20a>
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d151      	bne.n	80026fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265a:	4b48      	ldr	r3, [pc, #288]	; (800277c <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x17e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e392      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002672:	4b42      	ldr	r3, [pc, #264]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0219 	bic.w	r2, r3, #25
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	493f      	ldr	r1, [pc, #252]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fe3c 	bl	8001300 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268c:	f7fe fe38 	bl	8001300 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e37c      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	f7fe fe59 	bl	8001360 <HAL_GetREVID>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d817      	bhi.n	80026e8 <HAL_RCC_OscConfig+0x1f4>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d108      	bne.n	80026d2 <HAL_RCC_OscConfig+0x1de>
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026c8:	4a2c      	ldr	r2, [pc, #176]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80026ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d0:	e07a      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	031b      	lsls	r3, r3, #12
 80026e0:	4926      	ldr	r1, [pc, #152]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e6:	e06f      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	4921      	ldr	r1, [pc, #132]	; (800277c <HAL_RCC_OscConfig+0x288>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fc:	e064      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d047      	beq.n	8002796 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002706:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 0219 	bic.w	r2, r3, #25
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	491a      	ldr	r1, [pc, #104]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fdf2 	bl	8001300 <HAL_GetTick>
 800271c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002720:	f7fe fdee 	bl	8001300 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e332      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	f7fe fe0f 	bl	8001360 <HAL_GetREVID>
 8002742:	4603      	mov	r3, r0
 8002744:	f241 0203 	movw	r2, #4099	; 0x1003
 8002748:	4293      	cmp	r3, r2
 800274a:	d819      	bhi.n	8002780 <HAL_RCC_OscConfig+0x28c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d108      	bne.n	8002766 <HAL_RCC_OscConfig+0x272>
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800275c:	4a07      	ldr	r2, [pc, #28]	; (800277c <HAL_RCC_OscConfig+0x288>)
 800275e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002762:	6053      	str	r3, [r2, #4]
 8002764:	e030      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	031b      	lsls	r3, r3, #12
 8002774:	4901      	ldr	r1, [pc, #4]	; (800277c <HAL_RCC_OscConfig+0x288>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
 800277a:	e025      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
 800277c:	58024400 	.word	0x58024400
 8002780:	4b9a      	ldr	r3, [pc, #616]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	4997      	ldr	r1, [pc, #604]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
 8002794:	e018      	b.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002796:	4b95      	ldr	r3, [pc, #596]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a94      	ldr	r2, [pc, #592]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fdad 	bl	8001300 <HAL_GetTick>
 80027a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027aa:	f7fe fda9 	bl	8001300 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e2ed      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027bc:	4b8b      	ldr	r3, [pc, #556]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f0      	bne.n	80027aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a9 	beq.w	8002928 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d6:	4b85      	ldr	r3, [pc, #532]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027e0:	4b82      	ldr	r3, [pc, #520]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d007      	beq.n	80027fc <HAL_RCC_OscConfig+0x308>
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b18      	cmp	r3, #24
 80027f0:	d13a      	bne.n	8002868 <HAL_RCC_OscConfig+0x374>
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d135      	bne.n	8002868 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027fc:	4b7b      	ldr	r3, [pc, #492]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x320>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b80      	cmp	r3, #128	; 0x80
 800280e:	d001      	beq.n	8002814 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e2c1      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002814:	f7fe fda4 	bl	8001360 <HAL_GetREVID>
 8002818:	4603      	mov	r3, r0
 800281a:	f241 0203 	movw	r2, #4099	; 0x1003
 800281e:	4293      	cmp	r3, r2
 8002820:	d817      	bhi.n	8002852 <HAL_RCC_OscConfig+0x35e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	2b20      	cmp	r3, #32
 8002828:	d108      	bne.n	800283c <HAL_RCC_OscConfig+0x348>
 800282a:	4b70      	ldr	r3, [pc, #448]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002832:	4a6e      	ldr	r2, [pc, #440]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002838:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800283a:	e075      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800283c:	4b6b      	ldr	r3, [pc, #428]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	069b      	lsls	r3, r3, #26
 800284a:	4968      	ldr	r1, [pc, #416]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002850:	e06a      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002852:	4b66      	ldr	r3, [pc, #408]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	4962      	ldr	r1, [pc, #392]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002866:	e05f      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d042      	beq.n	80028f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002870:	4b5e      	ldr	r3, [pc, #376]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a5d      	ldr	r2, [pc, #372]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fd40 	bl	8001300 <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002884:	f7fe fd3c 	bl	8001300 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e280      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002896:	4b55      	ldr	r3, [pc, #340]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028a2:	f7fe fd5d 	bl	8001360 <HAL_GetREVID>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d817      	bhi.n	80028e0 <HAL_RCC_OscConfig+0x3ec>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d108      	bne.n	80028ca <HAL_RCC_OscConfig+0x3d6>
 80028b8:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028c0:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028c6:	6053      	str	r3, [r2, #4]
 80028c8:	e02e      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
 80028ca:	4b48      	ldr	r3, [pc, #288]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	4944      	ldr	r1, [pc, #272]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
 80028de:	e023      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
 80028e0:	4b42      	ldr	r3, [pc, #264]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	493f      	ldr	r1, [pc, #252]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
 80028f4:	e018      	b.n	8002928 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a3c      	ldr	r2, [pc, #240]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fcfd 	bl	8001300 <HAL_GetTick>
 8002906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800290a:	f7fe fcf9 	bl	8001300 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e23d      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800291c:	4b33      	ldr	r3, [pc, #204]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d036      	beq.n	80029a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d019      	beq.n	8002970 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293c:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 800293e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002940:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fcda 	bl	8001300 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002950:	f7fe fcd6 	bl	8001300 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e21a      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x45c>
 800296e:	e018      	b.n	80029a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002974:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fcc0 	bl	8001300 <HAL_GetTick>
 8002980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7fe fcbc 	bl	8001300 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e200      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 8002998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d039      	beq.n	8002a22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a0c      	ldr	r2, [pc, #48]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fc9d 	bl	8001300 <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ca:	f7fe fc99 	bl	8001300 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1dd      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_RCC_OscConfig+0x4f8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x4d6>
 80029e8:	e01b      	b.n	8002a22 <HAL_RCC_OscConfig+0x52e>
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029f0:	4b9b      	ldr	r3, [pc, #620]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a9a      	ldr	r2, [pc, #616]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 80029f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029fc:	f7fe fc80 	bl	8001300 <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a04:	f7fe fc7c 	bl	8001300 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1c0      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a16:	4b92      	ldr	r3, [pc, #584]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8081 	beq.w	8002b32 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a30:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x770>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a8b      	ldr	r2, [pc, #556]	; (8002c64 <HAL_RCC_OscConfig+0x770>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fc60 	bl	8001300 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe fc5c 	bl	8001300 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1a0      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a56:	4b83      	ldr	r3, [pc, #524]	; (8002c64 <HAL_RCC_OscConfig+0x770>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d106      	bne.n	8002a78 <HAL_RCC_OscConfig+0x584>
 8002a6a:	4b7d      	ldr	r3, [pc, #500]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	4a7c      	ldr	r2, [pc, #496]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6713      	str	r3, [r2, #112]	; 0x70
 8002a76:	e02d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x5e0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10c      	bne.n	8002a9a <HAL_RCC_OscConfig+0x5a6>
 8002a80:	4b77      	ldr	r3, [pc, #476]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a76      	ldr	r2, [pc, #472]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8c:	4b74      	ldr	r3, [pc, #464]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a73      	ldr	r2, [pc, #460]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002a92:	f023 0304 	bic.w	r3, r3, #4
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
 8002a98:	e01c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x5e0>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x5c8>
 8002aa2:	4b6f      	ldr	r3, [pc, #444]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a6e      	ldr	r2, [pc, #440]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	4b6c      	ldr	r3, [pc, #432]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a6b      	ldr	r2, [pc, #428]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x5e0>
 8002abc:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4a67      	ldr	r2, [pc, #412]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac8:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a64      	ldr	r2, [pc, #400]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002ace:	f023 0304 	bic.w	r3, r3, #4
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d015      	beq.n	8002b08 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7fe fc10 	bl	8001300 <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fc0c 	bl	8001300 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e14e      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afa:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0ee      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x5f0>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fbfa 	bl	8001300 <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7fe fbf6 	bl	8001300 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e138      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b26:	4b4e      	ldr	r3, [pc, #312]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1ee      	bne.n	8002b10 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 812d 	beq.w	8002d96 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b3c:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b44:	2b18      	cmp	r3, #24
 8002b46:	f000 80bd 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	f040 809e 	bne.w	8002c90 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b54:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a41      	ldr	r2, [pc, #260]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fbce 	bl	8001300 <HAL_GetTick>
 8002b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fbca 	bl	8001300 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e10e      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7a:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b86:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_RCC_OscConfig+0x774>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	4931      	ldr	r1, [pc, #196]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	628b      	str	r3, [r1, #40]	; 0x28
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	025b      	lsls	r3, r3, #9
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	061b      	lsls	r3, r3, #24
 8002bcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bd0:	4923      	ldr	r1, [pc, #140]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	4a21      	ldr	r2, [pc, #132]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002be2:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be6:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_RCC_OscConfig+0x778>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bee:	00d2      	lsls	r2, r2, #3
 8002bf0:	491b      	ldr	r1, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	f023 020c 	bic.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4917      	ldr	r1, [pc, #92]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f023 0202 	bic.w	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	4912      	ldr	r1, [pc, #72]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fb53 	bl	8001300 <HAL_GetTick>
 8002c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c5c:	e011      	b.n	8002c82 <HAL_RCC_OscConfig+0x78e>
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400
 8002c64:	58024800 	.word	0x58024800
 8002c68:	fffffc0c 	.word	0xfffffc0c
 8002c6c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fb46 	bl	8001300 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e08a      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x77c>
 8002c8e:	e082      	b.n	8002d96 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a42      	ldr	r2, [pc, #264]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fb30 	bl	8001300 <HAL_GetTick>
 8002ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe fb2c 	bl	8001300 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e070      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb6:	4b3a      	ldr	r3, [pc, #232]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x7b0>
 8002cc2:	e068      	b.n	8002d96 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cc4:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cca:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d031      	beq.n	8002d3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f003 0203 	and.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d12a      	bne.n	8002d3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d122      	bne.n	8002d3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d11a      	bne.n	8002d3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	0a5b      	lsrs	r3, r3, #9
 8002d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d111      	bne.n	8002d3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d108      	bne.n	8002d3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	0e1b      	lsrs	r3, r3, #24
 8002d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e02b      	b.n	8002d98 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d40:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	08db      	lsrs	r3, r3, #3
 8002d46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d4a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d01f      	beq.n	8002d96 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d62:	f7fe facd 	bl	8001300 <HAL_GetTick>
 8002d66:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d68:	bf00      	nop
 8002d6a:	f7fe fac9 	bl	8001300 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d0f9      	beq.n	8002d6a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RCC_OscConfig+0x8b0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d82:	00d2      	lsls	r2, r2, #3
 8002d84:	4906      	ldr	r1, [pc, #24]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <HAL_RCC_OscConfig+0x8ac>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3730      	adds	r7, #48	; 0x30
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	58024400 	.word	0x58024400
 8002da4:	ffff0007 	.word	0xffff0007

08002da8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e19c      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b8a      	ldr	r3, [pc, #552]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d910      	bls.n	8002dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b87      	ldr	r3, [pc, #540]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 020f 	bic.w	r2, r3, #15
 8002dd2:	4985      	ldr	r1, [pc, #532]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b83      	ldr	r3, [pc, #524]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e184      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	4b7b      	ldr	r3, [pc, #492]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d908      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e08:	4b78      	ldr	r3, [pc, #480]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4975      	ldr	r1, [pc, #468]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d010      	beq.n	8002e48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	4b70      	ldr	r3, [pc, #448]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d908      	bls.n	8002e48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e36:	4b6d      	ldr	r3, [pc, #436]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	496a      	ldr	r1, [pc, #424]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	4b64      	ldr	r3, [pc, #400]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d908      	bls.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e64:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	495e      	ldr	r1, [pc, #376]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d010      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69da      	ldr	r2, [r3, #28]
 8002e86:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d908      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e92:	4b56      	ldr	r3, [pc, #344]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4953      	ldr	r1, [pc, #332]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d908      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f023 020f 	bic.w	r2, r3, #15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4947      	ldr	r1, [pc, #284]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d055      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ede:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4940      	ldr	r1, [pc, #256]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef8:	4b3c      	ldr	r3, [pc, #240]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d121      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0f6      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d115      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0ea      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f28:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0de      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0d6      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f48:	4b28      	ldr	r3, [pc, #160]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f023 0207 	bic.w	r2, r3, #7
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4925      	ldr	r1, [pc, #148]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5a:	f7fe f9d1 	bl	8001300 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f62:	f7fe f9cd 	bl	8001300 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0be      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f78:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d1eb      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d208      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f023 020f 	bic.w	r2, r3, #15
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d214      	bcs.n	8002ff0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 020f 	bic.w	r2, r3, #15
 8002fce:	4906      	ldr	r1, [pc, #24]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e086      	b.n	80030f6 <HAL_RCC_ClockConfig+0x34e>
 8002fe8:	52002000 	.word	0x52002000
 8002fec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003008:	429a      	cmp	r2, r3
 800300a:	d208      	bcs.n	800301e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800300c:	4b3c      	ldr	r3, [pc, #240]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	4939      	ldr	r1, [pc, #228]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800301a:	4313      	orrs	r3, r2
 800301c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d010      	beq.n	800304c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	4b34      	ldr	r3, [pc, #208]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003036:	429a      	cmp	r2, r3
 8003038:	d208      	bcs.n	800304c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	492e      	ldr	r1, [pc, #184]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003048:	4313      	orrs	r3, r2
 800304a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	4b28      	ldr	r3, [pc, #160]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003064:	429a      	cmp	r2, r3
 8003066:	d208      	bcs.n	800307a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	4922      	ldr	r1, [pc, #136]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003076:	4313      	orrs	r3, r2
 8003078:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003092:	429a      	cmp	r2, r3
 8003094:	d208      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4917      	ldr	r1, [pc, #92]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030a8:	f000 f834 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	4912      	ldr	r1, [pc, #72]	; (8003104 <HAL_RCC_ClockConfig+0x35c>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
 80030c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_RCC_ClockConfig+0x358>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <HAL_RCC_ClockConfig+0x35c>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
 80030dc:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x360>)
 80030de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030e0:	4a0a      	ldr	r2, [pc, #40]	; (800310c <HAL_RCC_ClockConfig+0x364>)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCC_ClockConfig+0x368>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe f8be 	bl	800126c <HAL_InitTick>
 80030f0:	4603      	mov	r3, r0
 80030f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	58024400 	.word	0x58024400
 8003104:	08007330 	.word	0x08007330
 8003108:	24000004 	.word	0x24000004
 800310c:	24000000 	.word	0x24000000
 8003110:	24000008 	.word	0x24000008

08003114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800311a:	4bb3      	ldr	r3, [pc, #716]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003122:	2b18      	cmp	r3, #24
 8003124:	f200 8155 	bhi.w	80033d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003128:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <HAL_RCC_GetSysClockFreq+0x1c>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003195 	.word	0x08003195
 8003134:	080033d3 	.word	0x080033d3
 8003138:	080033d3 	.word	0x080033d3
 800313c:	080033d3 	.word	0x080033d3
 8003140:	080033d3 	.word	0x080033d3
 8003144:	080033d3 	.word	0x080033d3
 8003148:	080033d3 	.word	0x080033d3
 800314c:	080033d3 	.word	0x080033d3
 8003150:	080031bb 	.word	0x080031bb
 8003154:	080033d3 	.word	0x080033d3
 8003158:	080033d3 	.word	0x080033d3
 800315c:	080033d3 	.word	0x080033d3
 8003160:	080033d3 	.word	0x080033d3
 8003164:	080033d3 	.word	0x080033d3
 8003168:	080033d3 	.word	0x080033d3
 800316c:	080033d3 	.word	0x080033d3
 8003170:	080031c1 	.word	0x080031c1
 8003174:	080033d3 	.word	0x080033d3
 8003178:	080033d3 	.word	0x080033d3
 800317c:	080033d3 	.word	0x080033d3
 8003180:	080033d3 	.word	0x080033d3
 8003184:	080033d3 	.word	0x080033d3
 8003188:	080033d3 	.word	0x080033d3
 800318c:	080033d3 	.word	0x080033d3
 8003190:	080031c7 	.word	0x080031c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003194:	4b94      	ldr	r3, [pc, #592]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031a0:	4b91      	ldr	r3, [pc, #580]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	4a90      	ldr	r2, [pc, #576]	; (80033ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031b2:	e111      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031b4:	4b8d      	ldr	r3, [pc, #564]	; (80033ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031b6:	61bb      	str	r3, [r7, #24]
      break;
 80031b8:	e10e      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031ba:	4b8d      	ldr	r3, [pc, #564]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031bc:	61bb      	str	r3, [r7, #24]
      break;
 80031be:	e10b      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031c0:	4b8c      	ldr	r3, [pc, #560]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031c2:	61bb      	str	r3, [r7, #24]
      break;
 80031c4:	e108      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031c6:	4b88      	ldr	r3, [pc, #544]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031d0:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031dc:	4b82      	ldr	r3, [pc, #520]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031e6:	4b80      	ldr	r3, [pc, #512]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	08db      	lsrs	r3, r3, #3
 80031ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80e1 	beq.w	80033cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b02      	cmp	r3, #2
 800320e:	f000 8083 	beq.w	8003318 <HAL_RCC_GetSysClockFreq+0x204>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b02      	cmp	r3, #2
 8003216:	f200 80a1 	bhi.w	800335c <HAL_RCC_GetSysClockFreq+0x248>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x114>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d056      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003226:	e099      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003228:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d02d      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003234:	4b6c      	ldr	r3, [pc, #432]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	4a6b      	ldr	r2, [pc, #428]	; (80033ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325e:	4b62      	ldr	r3, [pc, #392]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003272:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800328e:	e087      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800329e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a2:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032d2:	e065      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003400 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003316:	e043      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003404 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800335a:	e021      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003400 <HAL_RCC_GetSysClockFreq+0x2ec>
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003382:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800339e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	0a5b      	lsrs	r3, r3, #9
 80033a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033aa:	3301      	adds	r3, #1
 80033ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80033bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c4:	ee17 3a90 	vmov	r3, s15
 80033c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033ca:	e005      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
      break;
 80033d0:	e002      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033d4:	61bb      	str	r3, [r7, #24]
      break;
 80033d6:	bf00      	nop
  }

  return sysclockfreq;
 80033d8:	69bb      	ldr	r3, [r7, #24]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	58024400 	.word	0x58024400
 80033ec:	03d09000 	.word	0x03d09000
 80033f0:	003d0900 	.word	0x003d0900
 80033f4:	007a1200 	.word	0x007a1200
 80033f8:	46000000 	.word	0x46000000
 80033fc:	4c742400 	.word	0x4c742400
 8003400:	4a742400 	.word	0x4a742400
 8003404:	4af42400 	.word	0x4af42400

08003408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800340e:	f7ff fe81 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCC_GetHCLKFreq+0x50>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490f      	ldr	r1, [pc, #60]	; (800345c <HAL_RCC_GetHCLKFreq+0x54>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_RCC_GetHCLKFreq+0x50>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <HAL_RCC_GetHCLKFreq+0x54>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	fa22 f303 	lsr.w	r3, r2, r3
 8003442:	4a07      	ldr	r2, [pc, #28]	; (8003460 <HAL_RCC_GetHCLKFreq+0x58>)
 8003444:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003446:	4a07      	ldr	r2, [pc, #28]	; (8003464 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <HAL_RCC_GetHCLKFreq+0x58>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	58024400 	.word	0x58024400
 800345c:	08007330 	.word	0x08007330
 8003460:	24000004 	.word	0x24000004
 8003464:	24000000 	.word	0x24000000

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800346c:	f7ff ffcc 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4904      	ldr	r1, [pc, #16]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	58024400 	.word	0x58024400
 8003490:	08007330 	.word	0x08007330

08003494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003498:	f7ff ffb6 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4904      	ldr	r1, [pc, #16]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	58024400 	.word	0x58024400
 80034bc:	08007330 	.word	0x08007330

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b0ca      	sub	sp, #296	; 0x128
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80034e4:	2500      	movs	r5, #0
 80034e6:	ea54 0305 	orrs.w	r3, r4, r5
 80034ea:	d049      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034f6:	d02f      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034fc:	d828      	bhi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003502:	d01a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003508:	d822      	bhi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800350e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003512:	d007      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003514:	e01c      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003516:	4bb8      	ldr	r3, [pc, #736]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	4ab7      	ldr	r2, [pc, #732]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003522:	e01a      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003528:	3308      	adds	r3, #8
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f001 fc8f 	bl	8004e50 <RCCEx_PLL2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003538:	e00f      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800353a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353e:	3328      	adds	r3, #40	; 0x28
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fd36 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800354e:	e004      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003556:	e000      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003562:	4ba5      	ldr	r3, [pc, #660]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003566:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003570:	4aa1      	ldr	r2, [pc, #644]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003572:	430b      	orrs	r3, r1
 8003574:	6513      	str	r3, [r2, #80]	; 0x50
 8003576:	e003      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800357c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800358c:	f04f 0900 	mov.w	r9, #0
 8003590:	ea58 0309 	orrs.w	r3, r8, r9
 8003594:	d047      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	2b04      	cmp	r3, #4
 800359e:	d82a      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035bd 	.word	0x080035bd
 80035ac:	080035cb 	.word	0x080035cb
 80035b0:	080035e1 	.word	0x080035e1
 80035b4:	080035ff 	.word	0x080035ff
 80035b8:	080035ff 	.word	0x080035ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035bc:	4b8e      	ldr	r3, [pc, #568]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	4a8d      	ldr	r2, [pc, #564]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c8:	e01a      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ce:	3308      	adds	r3, #8
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 fc3c 	bl	8004e50 <RCCEx_PLL2_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035de:	e00f      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e4:	3328      	adds	r3, #40	; 0x28
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 fce3 	bl	8004fb4 <RCCEx_PLL3_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f4:	e004      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035fc:	e000      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003600:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003608:	4b7b      	ldr	r3, [pc, #492]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800360a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360c:	f023 0107 	bic.w	r1, r3, #7
 8003610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	4a78      	ldr	r2, [pc, #480]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003618:	430b      	orrs	r3, r1
 800361a:	6513      	str	r3, [r2, #80]	; 0x50
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003622:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003632:	f04f 0b00 	mov.w	fp, #0
 8003636:	ea5a 030b 	orrs.w	r3, sl, fp
 800363a:	d04c      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800363c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003646:	d030      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364c:	d829      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800364e:	2bc0      	cmp	r3, #192	; 0xc0
 8003650:	d02d      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003652:	2bc0      	cmp	r3, #192	; 0xc0
 8003654:	d825      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003656:	2b80      	cmp	r3, #128	; 0x80
 8003658:	d018      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800365a:	2b80      	cmp	r3, #128	; 0x80
 800365c:	d821      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d007      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003666:	e01c      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003668:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	4a62      	ldr	r2, [pc, #392]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003672:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003674:	e01c      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367a:	3308      	adds	r3, #8
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fbe6 	bl	8004e50 <RCCEx_PLL2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800368a:	e011      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003690:	3328      	adds	r3, #40	; 0x28
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f001 fc8d 	bl	8004fb4 <RCCEx_PLL3_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036a0:	e006      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036a8:	e002      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036b8:	4b4f      	ldr	r3, [pc, #316]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	4a4c      	ldr	r2, [pc, #304]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6513      	str	r3, [r2, #80]	; 0x50
 80036cc:	e003      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80036e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80036ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80036f0:	460b      	mov	r3, r1
 80036f2:	4313      	orrs	r3, r2
 80036f4:	d053      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003702:	d035      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003704:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003708:	d82e      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800370a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800370e:	d031      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003710:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003714:	d828      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800371a:	d01a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800371c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003720:	d822      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800372a:	d007      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800372c:	e01c      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372e:	4b32      	ldr	r3, [pc, #200]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	4a31      	ldr	r2, [pc, #196]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800373a:	e01c      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003740:	3308      	adds	r3, #8
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f001 fb83 	bl	8004e50 <RCCEx_PLL2_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003750:	e011      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003756:	3328      	adds	r3, #40	; 0x28
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f001 fc2a 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003766:	e006      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800376e:	e002      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003770:	bf00      	nop
 8003772:	e000      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800377e:	4b1e      	ldr	r3, [pc, #120]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800378e:	4a1a      	ldr	r2, [pc, #104]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003790:	430b      	orrs	r3, r1
 8003792:	6593      	str	r3, [r2, #88]	; 0x58
 8003794:	e003      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800379a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80037aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037ae:	2300      	movs	r3, #0
 80037b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80037b8:	460b      	mov	r3, r1
 80037ba:	4313      	orrs	r3, r2
 80037bc:	d056      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ca:	d038      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d0:	d831      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037d6:	d034      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037dc:	d82b      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037e2:	d01d      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80037e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037e8:	d825      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037f4:	e01f      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037f6:	bf00      	nop
 80037f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fc:	4ba2      	ldr	r3, [pc, #648]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	4aa1      	ldr	r2, [pc, #644]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003808:	e01c      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800380a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380e:	3308      	adds	r3, #8
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fb1c 	bl	8004e50 <RCCEx_PLL2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800381e:	e011      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003824:	3328      	adds	r3, #40	; 0x28
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f001 fbc3 	bl	8004fb4 <RCCEx_PLL3_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003834:	e006      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800383c:	e002      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800384c:	4b8e      	ldr	r3, [pc, #568]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003858:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800385c:	4a8a      	ldr	r2, [pc, #552]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800385e:	430b      	orrs	r3, r1
 8003860:	6593      	str	r3, [r2, #88]	; 0x58
 8003862:	e003      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003868:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003878:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003882:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003886:	460b      	mov	r3, r1
 8003888:	4313      	orrs	r3, r2
 800388a:	d03a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	2b30      	cmp	r3, #48	; 0x30
 8003894:	d01f      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003896:	2b30      	cmp	r3, #48	; 0x30
 8003898:	d819      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800389a:	2b20      	cmp	r3, #32
 800389c:	d00c      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d815      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d019      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d111      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038aa:	4b77      	ldr	r3, [pc, #476]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	4a76      	ldr	r2, [pc, #472]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038b6:	e011      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038bc:	3308      	adds	r3, #8
 80038be:	2102      	movs	r1, #2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fac5 	bl	8004e50 <RCCEx_PLL2_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038cc:	e006      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038d4:	e002      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038d6:	bf00      	nop
 80038d8:	e000      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038e4:	4b68      	ldr	r3, [pc, #416]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	4a65      	ldr	r2, [pc, #404]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f4:	430b      	orrs	r3, r1
 80038f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f8:	e003      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800390e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003912:	2300      	movs	r3, #0
 8003914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003918:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800391c:	460b      	mov	r3, r1
 800391e:	4313      	orrs	r3, r2
 8003920:	d051      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800392c:	d035      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800392e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003932:	d82e      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003934:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003938:	d031      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800393a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800393e:	d828      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003944:	d01a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394a:	d822      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003954:	d007      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003956:	e01c      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003958:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	4a4a      	ldr	r2, [pc, #296]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003964:	e01c      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396a:	3308      	adds	r3, #8
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f001 fa6e 	bl	8004e50 <RCCEx_PLL2_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800397a:	e011      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003980:	3328      	adds	r3, #40	; 0x28
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f001 fb15 	bl	8004fb4 <RCCEx_PLL3_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003990:	e006      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003998:	e002      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800399e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039a8:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	4a34      	ldr	r2, [pc, #208]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6513      	str	r3, [r2, #80]	; 0x50
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80039d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80039dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80039e0:	460b      	mov	r3, r1
 80039e2:	4313      	orrs	r3, r2
 80039e4:	d056      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f0:	d033      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f6:	d82c      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039fc:	d02f      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80039fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a02:	d826      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a08:	d02b      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a0e:	d820      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a14:	d012      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a1a:	d81a      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d022      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a24:	d115      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fa0e 	bl	8004e50 <RCCEx_PLL2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e015      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a40:	3328      	adds	r3, #40	; 0x28
 8003a42:	2101      	movs	r1, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fab5 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a50:	e00a      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a58:	e006      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e004      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10d      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a74:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7e:	4a02      	ldr	r2, [pc, #8]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6513      	str	r3, [r2, #80]	; 0x50
 8003a84:	e006      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a86:	bf00      	nop
 8003a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003aaa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	d055      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac0:	d033      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac6:	d82c      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003acc:	d02f      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad2:	d826      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ad8:	d02b      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ada:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ade:	d820      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae4:	d012      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aea:	d81a      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d022      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003af0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af4:	d115      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afa:	3308      	adds	r3, #8
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 f9a6 	bl	8004e50 <RCCEx_PLL2_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b0a:	e015      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b10:	3328      	adds	r3, #40	; 0x28
 8003b12:	2101      	movs	r1, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fa4d 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b20:	e00a      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e004      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10b      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b40:	4ba3      	ldr	r3, [pc, #652]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b50:	4a9f      	ldr	r2, [pc, #636]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b52:	430b      	orrs	r3, r1
 8003b54:	6593      	str	r3, [r2, #88]	; 0x58
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003b76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	d037      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b8a:	d00e      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b90:	d816      	bhi.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d018      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b9a:	d111      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9c:	4b8c      	ldr	r3, [pc, #560]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	4a8b      	ldr	r2, [pc, #556]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ba8:	e00f      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bae:	3308      	adds	r3, #8
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 f94c 	bl	8004e50 <RCCEx_PLL2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bbe:	e004      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bd2:	4b7f      	ldr	r3, [pc, #508]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a7b      	ldr	r2, [pc, #492]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be2:	430b      	orrs	r3, r1
 8003be4:	6513      	str	r3, [r2, #80]	; 0x50
 8003be6:	e003      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	d039      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d81c      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c5d 	.word	0x08003c5d
 8003c24:	08003c31 	.word	0x08003c31
 8003c28:	08003c3f 	.word	0x08003c3f
 8003c2c:	08003c5d 	.word	0x08003c5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c30:	4b67      	ldr	r3, [pc, #412]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	4a66      	ldr	r2, [pc, #408]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c3c:	e00f      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c42:	3308      	adds	r3, #8
 8003c44:	2102      	movs	r1, #2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 f902 	bl	8004e50 <RCCEx_PLL2_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c52:	e004      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c66:	4b5a      	ldr	r3, [pc, #360]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	f023 0103 	bic.w	r1, r3, #3
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c74:	4a56      	ldr	r2, [pc, #344]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c76:	430b      	orrs	r3, r1
 8003c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c7a:	e003      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f000 809f 	beq.w	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a4a      	ldr	r2, [pc, #296]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb2:	f7fd fb25 	bl	8001300 <HAL_GetTick>
 8003cb6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbc:	f7fd fb20 	bl	8001300 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b64      	cmp	r3, #100	; 0x64
 8003cca:	d903      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd4:	4b3f      	ldr	r3, [pc, #252]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ed      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d179      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cf4:	4053      	eors	r3, r2
 8003cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d015      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cfe:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d0a:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a30      	ldr	r2, [pc, #192]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d16:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d22:	4a2b      	ldr	r2, [pc, #172]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d36:	d118      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fd fae2 	bl	8001300 <HAL_GetTick>
 8003d3c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d40:	e00d      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd fadd 	bl	8001300 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d4c:	1ad2      	subs	r2, r2, r3
 8003d4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d903      	bls.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003d5c:	e005      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0eb      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d129      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d82:	d10e      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d94:	091a      	lsrs	r2, r3, #4
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6113      	str	r3, [r2, #16]
 8003da0:	e005      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dac:	6113      	str	r3, [r2, #16]
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbe:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc4:	e00e      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003dce:	e009      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	58024800 	.word	0x58024800
 8003dd8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dec:	f002 0301 	and.w	r3, r2, #1
 8003df0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dfa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f000 8089 	beq.w	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e0c:	2b28      	cmp	r3, #40	; 0x28
 8003e0e:	d86b      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003ef1 	.word	0x08003ef1
 8003e1c:	08003ee9 	.word	0x08003ee9
 8003e20:	08003ee9 	.word	0x08003ee9
 8003e24:	08003ee9 	.word	0x08003ee9
 8003e28:	08003ee9 	.word	0x08003ee9
 8003e2c:	08003ee9 	.word	0x08003ee9
 8003e30:	08003ee9 	.word	0x08003ee9
 8003e34:	08003ee9 	.word	0x08003ee9
 8003e38:	08003ebd 	.word	0x08003ebd
 8003e3c:	08003ee9 	.word	0x08003ee9
 8003e40:	08003ee9 	.word	0x08003ee9
 8003e44:	08003ee9 	.word	0x08003ee9
 8003e48:	08003ee9 	.word	0x08003ee9
 8003e4c:	08003ee9 	.word	0x08003ee9
 8003e50:	08003ee9 	.word	0x08003ee9
 8003e54:	08003ee9 	.word	0x08003ee9
 8003e58:	08003ed3 	.word	0x08003ed3
 8003e5c:	08003ee9 	.word	0x08003ee9
 8003e60:	08003ee9 	.word	0x08003ee9
 8003e64:	08003ee9 	.word	0x08003ee9
 8003e68:	08003ee9 	.word	0x08003ee9
 8003e6c:	08003ee9 	.word	0x08003ee9
 8003e70:	08003ee9 	.word	0x08003ee9
 8003e74:	08003ee9 	.word	0x08003ee9
 8003e78:	08003ef1 	.word	0x08003ef1
 8003e7c:	08003ee9 	.word	0x08003ee9
 8003e80:	08003ee9 	.word	0x08003ee9
 8003e84:	08003ee9 	.word	0x08003ee9
 8003e88:	08003ee9 	.word	0x08003ee9
 8003e8c:	08003ee9 	.word	0x08003ee9
 8003e90:	08003ee9 	.word	0x08003ee9
 8003e94:	08003ee9 	.word	0x08003ee9
 8003e98:	08003ef1 	.word	0x08003ef1
 8003e9c:	08003ee9 	.word	0x08003ee9
 8003ea0:	08003ee9 	.word	0x08003ee9
 8003ea4:	08003ee9 	.word	0x08003ee9
 8003ea8:	08003ee9 	.word	0x08003ee9
 8003eac:	08003ee9 	.word	0x08003ee9
 8003eb0:	08003ee9 	.word	0x08003ee9
 8003eb4:	08003ee9 	.word	0x08003ee9
 8003eb8:	08003ef1 	.word	0x08003ef1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 ffc3 	bl	8004e50 <RCCEx_PLL2_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ed0:	e00f      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed6:	3328      	adds	r3, #40	; 0x28
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 f86a 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ee6:	e004      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003eee:	e000      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003efa:	4bbf      	ldr	r3, [pc, #764]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f08:	4abb      	ldr	r2, [pc, #748]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	6553      	str	r3, [r2, #84]	; 0x54
 8003f0e:	e003      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f002 0302 	and.w	r3, r2, #2
 8003f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f32:	460b      	mov	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	d041      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d824      	bhi.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f95 	.word	0x08003f95
 8003f4c:	08003f61 	.word	0x08003f61
 8003f50:	08003f77 	.word	0x08003f77
 8003f54:	08003f95 	.word	0x08003f95
 8003f58:	08003f95 	.word	0x08003f95
 8003f5c:	08003f95 	.word	0x08003f95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f64:	3308      	adds	r3, #8
 8003f66:	2101      	movs	r1, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 ff71 	bl	8004e50 <RCCEx_PLL2_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f74:	e00f      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7a:	3328      	adds	r3, #40	; 0x28
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 f818 	bl	8004fb4 <RCCEx_PLL3_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f8a:	e004      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f92:	e000      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f9e:	4b96      	ldr	r3, [pc, #600]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f023 0107 	bic.w	r1, r3, #7
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fac:	4a92      	ldr	r2, [pc, #584]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	6553      	str	r3, [r2, #84]	; 0x54
 8003fb2:	e003      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f002 0304 	and.w	r3, r2, #4
 8003fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fd2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	d044      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d825      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	0800403d 	.word	0x0800403d
 8003ff4:	08004009 	.word	0x08004009
 8003ff8:	0800401f 	.word	0x0800401f
 8003ffc:	0800403d 	.word	0x0800403d
 8004000:	0800403d 	.word	0x0800403d
 8004004:	0800403d 	.word	0x0800403d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400c:	3308      	adds	r3, #8
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f000 ff1d 	bl	8004e50 <RCCEx_PLL2_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800401c:	e00f      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004022:	3328      	adds	r3, #40	; 0x28
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f000 ffc4 	bl	8004fb4 <RCCEx_PLL3_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004032:	e004      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800403c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004046:	4b6c      	ldr	r3, [pc, #432]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	f023 0107 	bic.w	r1, r3, #7
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004056:	4a68      	ldr	r2, [pc, #416]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004058:	430b      	orrs	r3, r1
 800405a:	6593      	str	r3, [r2, #88]	; 0x58
 800405c:	e003      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004062:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	f002 0320 	and.w	r3, r2, #32
 8004072:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800407c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004080:	460b      	mov	r3, r1
 8004082:	4313      	orrs	r3, r2
 8004084:	d055      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004092:	d033      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004098:	d82c      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d02f      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a4:	d826      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040aa:	d02b      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040b0:	d820      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b6:	d012      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040bc:	d81a      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d022      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040c6:	d115      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040cc:	3308      	adds	r3, #8
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 febd 	bl	8004e50 <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040dc:	e015      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e2:	3328      	adds	r3, #40	; 0x28
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ff64 	bl	8004fb4 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040f2:	e00a      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040fa:	e006      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040fc:	bf00      	nop
 80040fe:	e004      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004100:	bf00      	nop
 8004102:	e002      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004112:	4b39      	ldr	r3, [pc, #228]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	4a35      	ldr	r2, [pc, #212]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004124:	430b      	orrs	r3, r1
 8004126:	6553      	str	r3, [r2, #84]	; 0x54
 8004128:	e003      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800412e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800413e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004148:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800414c:	460b      	mov	r3, r1
 800414e:	4313      	orrs	r3, r2
 8004150:	d058      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800415a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800415e:	d033      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004160:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004164:	d82c      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	d02f      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800416c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004170:	d826      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004176:	d02b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800417c:	d820      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800417e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004182:	d012      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004188:	d81a      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d022      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	d115      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004198:	3308      	adds	r3, #8
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fe57 	bl	8004e50 <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041a8:	e015      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ae:	3328      	adds	r3, #40	; 0x28
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fefe 	bl	8004fb4 <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041be:	e00a      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041c6:	e006      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041c8:	bf00      	nop
 80041ca:	e004      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041cc:	bf00      	nop
 80041ce:	e002      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d0:	bf00      	nop
 80041d2:	e000      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10e      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ee:	4a02      	ldr	r2, [pc, #8]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6593      	str	r3, [r2, #88]	; 0x58
 80041f4:	e006      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80041f6:	bf00      	nop
 80041f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004200:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800421a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	d055      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004228:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800422c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004230:	d033      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004232:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004236:	d82c      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423c:	d02f      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800423e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004242:	d826      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004244:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004248:	d02b      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800424a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800424e:	d820      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004254:	d012      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425a:	d81a      	bhi.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d022      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004264:	d115      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426a:	3308      	adds	r3, #8
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fdee 	bl	8004e50 <RCCEx_PLL2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800427a:	e015      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800427c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004280:	3328      	adds	r3, #40	; 0x28
 8004282:	2102      	movs	r1, #2
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fe95 	bl	8004fb4 <RCCEx_PLL3_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004290:	e00a      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004298:	e006      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800429a:	bf00      	nop
 800429c:	e004      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042b0:	4ba1      	ldr	r3, [pc, #644]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042c0:	4a9d      	ldr	r2, [pc, #628]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c2:	430b      	orrs	r3, r1
 80042c4:	6593      	str	r3, [r2, #88]	; 0x58
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f002 0308 	and.w	r3, r2, #8
 80042dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80042ea:	460b      	mov	r3, r1
 80042ec:	4313      	orrs	r3, r2
 80042ee:	d01e      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fc:	d10c      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004302:	3328      	adds	r3, #40	; 0x28
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fe54 	bl	8004fb4 <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004318:	4b87      	ldr	r3, [pc, #540]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004328:	4a83      	ldr	r2, [pc, #524]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432a:	430b      	orrs	r3, r1
 800432c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f002 0310 	and.w	r3, r2, #16
 800433a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004344:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d01e      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435a:	d10c      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	3328      	adds	r3, #40	; 0x28
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fe25 	bl	8004fb4 <RCCEx_PLL3_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004376:	4b70      	ldr	r3, [pc, #448]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004386:	4a6c      	ldr	r2, [pc, #432]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004388:	430b      	orrs	r3, r1
 800438a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80043a6:	460b      	mov	r3, r1
 80043a8:	4313      	orrs	r3, r2
 80043aa:	d03e      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b8:	d022      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043be:	d81b      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80043ca:	e015      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d0:	3308      	adds	r3, #8
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fd3b 	bl	8004e50 <RCCEx_PLL2_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043e0:	e00f      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e6:	3328      	adds	r3, #40	; 0x28
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fde2 	bl	8004fb4 <RCCEx_PLL3_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043f6:	e004      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10b      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800440a:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800441a:	4a47      	ldr	r2, [pc, #284]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6593      	str	r3, [r2, #88]	; 0x58
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004436:	67bb      	str	r3, [r7, #120]	; 0x78
 8004438:	2300      	movs	r3, #0
 800443a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800443c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d03b      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004452:	d01f      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004454:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004458:	d818      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800445a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445e:	d003      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004464:	d007      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004466:	e011      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004468:	4b33      	ldr	r3, [pc, #204]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	4a32      	ldr	r2, [pc, #200]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004474:	e00f      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447a:	3328      	adds	r3, #40	; 0x28
 800447c:	2101      	movs	r1, #1
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fd98 	bl	8004fb4 <RCCEx_PLL3_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800448a:	e004      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10b      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800449e:	4b26      	ldr	r3, [pc, #152]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	4a22      	ldr	r2, [pc, #136]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6553      	str	r3, [r2, #84]	; 0x54
 80044b4:	e003      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80044ca:	673b      	str	r3, [r7, #112]	; 0x70
 80044cc:	2300      	movs	r3, #0
 80044ce:	677b      	str	r3, [r7, #116]	; 0x74
 80044d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80044d4:	460b      	mov	r3, r1
 80044d6:	4313      	orrs	r3, r2
 80044d8:	d034      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d007      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80044ea:	e011      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ec:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4a11      	ldr	r2, [pc, #68]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044f8:	e00e      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fe:	3308      	adds	r3, #8
 8004500:	2102      	movs	r1, #2
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fca4 	bl	8004e50 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800450e:	e003      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004518:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10d      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452e:	4a02      	ldr	r2, [pc, #8]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004530:	430b      	orrs	r3, r1
 8004532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004540:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004550:	66bb      	str	r3, [r7, #104]	; 0x68
 8004552:	2300      	movs	r3, #0
 8004554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004556:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800455a:	460b      	mov	r3, r1
 800455c:	4313      	orrs	r3, r2
 800455e:	d00c      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004564:	3328      	adds	r3, #40	; 0x28
 8004566:	2102      	movs	r1, #2
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fd23 	bl	8004fb4 <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004586:	663b      	str	r3, [r7, #96]	; 0x60
 8004588:	2300      	movs	r3, #0
 800458a:	667b      	str	r3, [r7, #100]	; 0x64
 800458c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d038      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a2:	d018      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a8:	d811      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ae:	d014      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b4:	d80b      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d011      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045be:	d106      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c0:	4bc3      	ldr	r3, [pc, #780]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4ac2      	ldr	r2, [pc, #776]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045cc:	e008      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045d4:	e004      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045d6:	bf00      	nop
 80045d8:	e002      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10b      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045e8:	4bb9      	ldr	r3, [pc, #740]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f8:	4ab5      	ldr	r2, [pc, #724]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fa:	430b      	orrs	r3, r1
 80045fc:	6553      	str	r3, [r2, #84]	; 0x54
 80045fe:	e003      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004604:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004614:	65bb      	str	r3, [r7, #88]	; 0x58
 8004616:	2300      	movs	r3, #0
 8004618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800461a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800461e:	460b      	mov	r3, r1
 8004620:	4313      	orrs	r3, r2
 8004622:	d009      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004624:	4baa      	ldr	r3, [pc, #680]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004628:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004632:	4aa7      	ldr	r2, [pc, #668]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004634:	430b      	orrs	r3, r1
 8004636:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004644:	653b      	str	r3, [r7, #80]	; 0x50
 8004646:	2300      	movs	r3, #0
 8004648:	657b      	str	r3, [r7, #84]	; 0x54
 800464a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800464e:	460b      	mov	r3, r1
 8004650:	4313      	orrs	r3, r2
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004654:	4b9e      	ldr	r3, [pc, #632]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004660:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004664:	4a9a      	ldr	r2, [pc, #616]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004666:	430b      	orrs	r3, r1
 8004668:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004676:	64bb      	str	r3, [r7, #72]	; 0x48
 8004678:	2300      	movs	r3, #0
 800467a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800467c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004686:	4b92      	ldr	r3, [pc, #584]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004694:	4a8e      	ldr	r2, [pc, #568]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004696:	430b      	orrs	r3, r1
 8004698:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80046a6:	643b      	str	r3, [r7, #64]	; 0x40
 80046a8:	2300      	movs	r3, #0
 80046aa:	647b      	str	r3, [r7, #68]	; 0x44
 80046ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80046b0:	460b      	mov	r3, r1
 80046b2:	4313      	orrs	r3, r2
 80046b4:	d00e      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046b6:	4b86      	ldr	r3, [pc, #536]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	4a85      	ldr	r2, [pc, #532]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046c0:	6113      	str	r3, [r2, #16]
 80046c2:	4b83      	ldr	r3, [pc, #524]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c4:	6919      	ldr	r1, [r3, #16]
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046ce:	4a80      	ldr	r2, [pc, #512]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046e2:	2300      	movs	r3, #0
 80046e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80046ea:	460b      	mov	r3, r1
 80046ec:	4313      	orrs	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046f0:	4b77      	ldr	r3, [pc, #476]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	4a74      	ldr	r2, [pc, #464]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004700:	430b      	orrs	r3, r1
 8004702:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
 8004712:	2300      	movs	r3, #0
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
 8004716:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800471a:	460b      	mov	r3, r1
 800471c:	4313      	orrs	r3, r2
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004720:	4b6b      	ldr	r3, [pc, #428]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004730:	4a67      	ldr	r2, [pc, #412]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004732:	430b      	orrs	r3, r1
 8004734:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	2100      	movs	r1, #0
 8004740:	62b9      	str	r1, [r7, #40]	; 0x28
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004748:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800474c:	460b      	mov	r3, r1
 800474e:	4313      	orrs	r3, r2
 8004750:	d011      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004756:	3308      	adds	r3, #8
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fb78 	bl	8004e50 <RCCEx_PLL2_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004772:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	2100      	movs	r1, #0
 8004780:	6239      	str	r1, [r7, #32]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800478c:	460b      	mov	r3, r1
 800478e:	4313      	orrs	r3, r2
 8004790:	d011      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004796:	3308      	adds	r3, #8
 8004798:	2101      	movs	r1, #1
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fb58 	bl	8004e50 <RCCEx_PLL2_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	2100      	movs	r1, #0
 80047c0:	61b9      	str	r1, [r7, #24]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d011      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d6:	3308      	adds	r3, #8
 80047d8:	2102      	movs	r1, #2
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fb38 	bl	8004e50 <RCCEx_PLL2_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	2100      	movs	r1, #0
 8004800:	6139      	str	r1, [r7, #16]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	3328      	adds	r3, #40	; 0x28
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fbca 	bl	8004fb4 <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	2100      	movs	r1, #0
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800484c:	460b      	mov	r3, r1
 800484e:	4313      	orrs	r3, r2
 8004850:	d011      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004856:	3328      	adds	r3, #40	; 0x28
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fbaa 	bl	8004fb4 <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004872:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	2100      	movs	r1, #0
 8004880:	6039      	str	r1, [r7, #0]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	e9d7 1200 	ldrd	r1, r2, [r7]
 800488c:	460b      	mov	r3, r1
 800488e:	4313      	orrs	r3, r2
 8004890:	d011      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004896:	3328      	adds	r3, #40	; 0x28
 8004898:	2102      	movs	r1, #2
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fb8a 	bl	8004fb4 <RCCEx_PLL3_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80048b6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80048ca:	46bd      	mov	sp, r7
 80048cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d0:	58024400 	.word	0x58024400

080048d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048d8:	f7fe fd96 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4904      	ldr	r1, [pc, #16]	; (80048fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048ea:	5ccb      	ldrb	r3, [r1, r3]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	58024400 	.word	0x58024400
 80048fc:	08007330 	.word	0x08007330

08004900 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004908:	4ba1      	ldr	r3, [pc, #644]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004912:	4b9f      	ldr	r3, [pc, #636]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	0b1b      	lsrs	r3, r3, #12
 8004918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800491e:	4b9c      	ldr	r3, [pc, #624]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800492a:	4b99      	ldr	r3, [pc, #612]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492e:	08db      	lsrs	r3, r3, #3
 8004930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8111 	beq.w	8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b02      	cmp	r3, #2
 8004952:	f000 8083 	beq.w	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b02      	cmp	r3, #2
 800495a:	f200 80a1 	bhi.w	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d056      	beq.n	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800496a:	e099      	b.n	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800496c:	4b88      	ldr	r3, [pc, #544]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02d      	beq.n	80049d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004978:	4b85      	ldr	r3, [pc, #532]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	08db      	lsrs	r3, r3, #3
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	4a84      	ldr	r2, [pc, #528]	; (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
 8004988:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a2:	4b7b      	ldr	r3, [pc, #492]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049d2:	e087      	b.n	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e6:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a16:	e065      	b.n	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2a:	4b59      	ldr	r3, [pc, #356]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a5a:	e043      	b.n	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6e:	4b48      	ldr	r3, [pc, #288]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9e:	e021      	b.n	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ae4:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	0a5b      	lsrs	r3, r3, #9
 8004aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0a:	ee17 2a90 	vmov	r2, s15
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b12:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b38:	ee17 2a90 	vmov	r2, s15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	0e1b      	lsrs	r3, r3, #24
 8004b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b66:	ee17 2a90 	vmov	r2, s15
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b6e:	e008      	b.n	8004b82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	609a      	str	r2, [r3, #8]
}
 8004b82:	bf00      	nop
 8004b84:	3724      	adds	r7, #36	; 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
 8004b94:	03d09000 	.word	0x03d09000
 8004b98:	46000000 	.word	0x46000000
 8004b9c:	4c742400 	.word	0x4c742400
 8004ba0:	4a742400 	.word	0x4a742400
 8004ba4:	4af42400 	.word	0x4af42400

08004ba8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b089      	sub	sp, #36	; 0x24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bb0:	4ba1      	ldr	r3, [pc, #644]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bba:	4b9f      	ldr	r3, [pc, #636]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	0d1b      	lsrs	r3, r3, #20
 8004bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bc6:	4b9c      	ldr	r3, [pc, #624]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bd2:	4b99      	ldr	r3, [pc, #612]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	08db      	lsrs	r3, r3, #3
 8004bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8111 	beq.w	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	f000 8083 	beq.w	8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	f200 80a1 	bhi.w	8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d056      	beq.n	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c12:	e099      	b.n	8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c14:	4b88      	ldr	r3, [pc, #544]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02d      	beq.n	8004c7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c20:	4b85      	ldr	r3, [pc, #532]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	08db      	lsrs	r3, r3, #3
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	4a84      	ldr	r2, [pc, #528]	; (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	ee07 3a90 	vmov	s15, r3
 8004c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b7b      	ldr	r3, [pc, #492]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c7a:	e087      	b.n	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b6a      	ldr	r3, [pc, #424]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cbe:	e065      	b.n	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b59      	ldr	r3, [pc, #356]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d02:	e043      	b.n	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b48      	ldr	r3, [pc, #288]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d46:	e021      	b.n	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5a:	4b37      	ldr	r3, [pc, #220]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	0a5b      	lsrs	r3, r3, #9
 8004d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db2:	ee17 2a90 	vmov	r2, s15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dba:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de0:	ee17 2a90 	vmov	r2, s15
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	0e1b      	lsrs	r3, r3, #24
 8004dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0e:	ee17 2a90 	vmov	r2, s15
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e16:	e008      	b.n	8004e2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
}
 8004e2a:	bf00      	nop
 8004e2c:	3724      	adds	r7, #36	; 0x24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	03d09000 	.word	0x03d09000
 8004e40:	46000000 	.word	0x46000000
 8004e44:	4c742400 	.word	0x4c742400
 8004e48:	4a742400 	.word	0x4a742400
 8004e4c:	4af42400 	.word	0x4af42400

08004e50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e5e:	4b53      	ldr	r3, [pc, #332]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d101      	bne.n	8004e6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e099      	b.n	8004fa2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e6e:	4b4f      	ldr	r3, [pc, #316]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a4e      	ldr	r2, [pc, #312]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004e74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7a:	f7fc fa41 	bl	8001300 <HAL_GetTick>
 8004e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e80:	e008      	b.n	8004e94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e82:	f7fc fa3d 	bl	8001300 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e086      	b.n	8004fa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e94:	4b45      	ldr	r3, [pc, #276]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ea0:	4b42      	ldr	r3, [pc, #264]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	493f      	ldr	r1, [pc, #252]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	628b      	str	r3, [r1, #40]	; 0x28
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	025b      	lsls	r3, r3, #9
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	061b      	lsls	r3, r3, #24
 8004ee0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ee4:	4931      	ldr	r1, [pc, #196]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004eea:	4b30      	ldr	r3, [pc, #192]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	492d      	ldr	r1, [pc, #180]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004efc:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	f023 0220 	bic.w	r2, r3, #32
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	4928      	ldr	r1, [pc, #160]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f0e:	4b27      	ldr	r3, [pc, #156]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	4a26      	ldr	r2, [pc, #152]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f14:	f023 0310 	bic.w	r3, r3, #16
 8004f18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f1e:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <RCCEx_PLL2_Config+0x160>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	69d2      	ldr	r2, [r2, #28]
 8004f26:	00d2      	lsls	r2, r2, #3
 8004f28:	4920      	ldr	r1, [pc, #128]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f34:	f043 0310 	orr.w	r3, r3, #16
 8004f38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f40:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	4a19      	ldr	r2, [pc, #100]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f4c:	e00f      	b.n	8004f6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f54:	4b15      	ldr	r3, [pc, #84]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	4a14      	ldr	r2, [pc, #80]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f60:	e005      	b.n	8004f6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f62:	4b12      	ldr	r3, [pc, #72]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	4a11      	ldr	r2, [pc, #68]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a0e      	ldr	r2, [pc, #56]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7a:	f7fc f9c1 	bl	8001300 <HAL_GetTick>
 8004f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f80:	e008      	b.n	8004f94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f82:	f7fc f9bd 	bl	8001300 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e006      	b.n	8004fa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <RCCEx_PLL2_Config+0x15c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	ffff0007 	.word	0xffff0007

08004fb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fc2:	4b53      	ldr	r3, [pc, #332]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d101      	bne.n	8004fd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e099      	b.n	8005106 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fd2:	4b4f      	ldr	r3, [pc, #316]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a4e      	ldr	r2, [pc, #312]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fde:	f7fc f98f 	bl	8001300 <HAL_GetTick>
 8004fe2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fe4:	e008      	b.n	8004ff8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fe6:	f7fc f98b 	bl	8001300 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e086      	b.n	8005106 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ff8:	4b45      	ldr	r3, [pc, #276]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f0      	bne.n	8004fe6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005004:	4b42      	ldr	r3, [pc, #264]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	051b      	lsls	r3, r3, #20
 8005012:	493f      	ldr	r1, [pc, #252]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005014:	4313      	orrs	r3, r2
 8005016:	628b      	str	r3, [r1, #40]	; 0x28
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	3b01      	subs	r3, #1
 800501e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	3b01      	subs	r3, #1
 8005028:	025b      	lsls	r3, r3, #9
 800502a:	b29b      	uxth	r3, r3
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	3b01      	subs	r3, #1
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	3b01      	subs	r3, #1
 8005042:	061b      	lsls	r3, r3, #24
 8005044:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005048:	4931      	ldr	r1, [pc, #196]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800504e:	4b30      	ldr	r3, [pc, #192]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	492d      	ldr	r1, [pc, #180]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 800505c:	4313      	orrs	r3, r2
 800505e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005060:	4b2b      	ldr	r3, [pc, #172]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	4928      	ldr	r1, [pc, #160]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 800506e:	4313      	orrs	r3, r2
 8005070:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005072:	4b27      	ldr	r3, [pc, #156]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	4a26      	ldr	r2, [pc, #152]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800507c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800507e:	4b24      	ldr	r3, [pc, #144]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005082:	4b24      	ldr	r3, [pc, #144]	; (8005114 <RCCEx_PLL3_Config+0x160>)
 8005084:	4013      	ands	r3, r2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	69d2      	ldr	r2, [r2, #28]
 800508a:	00d2      	lsls	r2, r2, #3
 800508c:	4920      	ldr	r1, [pc, #128]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005092:	4b1f      	ldr	r3, [pc, #124]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050a4:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	4a19      	ldr	r2, [pc, #100]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050b0:	e00f      	b.n	80050d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d106      	bne.n	80050c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050b8:	4b15      	ldr	r3, [pc, #84]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	4a14      	ldr	r2, [pc, #80]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050c4:	e005      	b.n	80050d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050c6:	4b12      	ldr	r3, [pc, #72]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	4a11      	ldr	r2, [pc, #68]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050d2:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a0e      	ldr	r2, [pc, #56]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050de:	f7fc f90f 	bl	8001300 <HAL_GetTick>
 80050e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050e4:	e008      	b.n	80050f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050e6:	f7fc f90b 	bl	8001300 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e006      	b.n	8005106 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <RCCEx_PLL3_Config+0x15c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
 8005114:	ffff0007 	.word	0xffff0007

08005118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e049      	b.n	80051be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb fe3c 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f000 faee 	bl	8005738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d001      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e054      	b.n	800528a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a26      	ldr	r2, [pc, #152]	; (8005298 <HAL_TIM_Base_Start_IT+0xd0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d01d      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a22      	ldr	r2, [pc, #136]	; (800529c <HAL_TIM_Base_Start_IT+0xd4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a21      	ldr	r2, [pc, #132]	; (80052a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <HAL_TIM_Base_Start_IT+0xe4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1b      	ldr	r2, [pc, #108]	; (80052b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d115      	bne.n	8005274 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <HAL_TIM_Base_Start_IT+0xec>)
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b06      	cmp	r3, #6
 8005258:	d015      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0xbe>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005260:	d011      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005272:	e008      	b.n	8005286 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e000      	b.n	8005288 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005286:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40010400 	.word	0x40010400
 80052ac:	40001800 	.word	0x40001800
 80052b0:	40014000 	.word	0x40014000
 80052b4:	00010007 	.word	0x00010007

080052b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d122      	bne.n	8005314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0202 	mvn.w	r2, #2
 80052e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f9fe 	bl	80056fc <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f9f0 	bl	80056e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fa01 	bl	8005710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b04      	cmp	r3, #4
 8005320:	d122      	bne.n	8005368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b04      	cmp	r3, #4
 800532e:	d11b      	bne.n	8005368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0204 	mvn.w	r2, #4
 8005338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f9d4 	bl	80056fc <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f9c6 	bl	80056e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f9d7 	bl	8005710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b08      	cmp	r3, #8
 8005374:	d122      	bne.n	80053bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b08      	cmp	r3, #8
 8005382:	d11b      	bne.n	80053bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0208 	mvn.w	r2, #8
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2204      	movs	r2, #4
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f9aa 	bl	80056fc <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f99c 	bl	80056e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f9ad 	bl	8005710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b10      	cmp	r3, #16
 80053c8:	d122      	bne.n	8005410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d11b      	bne.n	8005410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0210 	mvn.w	r2, #16
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2208      	movs	r2, #8
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f980 	bl	80056fc <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f972 	bl	80056e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f983 	bl	8005710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b01      	cmp	r3, #1
 800541c:	d10e      	bne.n	800543c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b01      	cmp	r3, #1
 800542a:	d107      	bne.n	800543c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0201 	mvn.w	r2, #1
 8005434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fb fbb2 	bl	8000ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b80      	cmp	r3, #128	; 0x80
 8005448:	d10e      	bne.n	8005468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005454:	2b80      	cmp	r3, #128	; 0x80
 8005456:	d107      	bne.n	8005468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fb38 	bl	8005ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005476:	d10e      	bne.n	8005496 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d107      	bne.n	8005496 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800548e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fb2b 	bl	8005aec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d10e      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ae:	2b40      	cmp	r3, #64	; 0x40
 80054b0:	d107      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f931 	bl	8005724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d10e      	bne.n	80054ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d107      	bne.n	80054ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f06f 0220 	mvn.w	r2, #32
 80054e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 faeb 	bl	8005ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_TIM_ConfigClockSource+0x1c>
 8005510:	2302      	movs	r3, #2
 8005512:	e0dc      	b.n	80056ce <HAL_TIM_ConfigClockSource+0x1d6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	4b6a      	ldr	r3, [pc, #424]	; (80056d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005530:	4013      	ands	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800553a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a64      	ldr	r2, [pc, #400]	; (80056dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	f000 80a9 	beq.w	80056a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005550:	4a62      	ldr	r2, [pc, #392]	; (80056dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	f200 80ae 	bhi.w	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005558:	4a61      	ldr	r2, [pc, #388]	; (80056e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	f000 80a1 	beq.w	80056a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005560:	4a5f      	ldr	r2, [pc, #380]	; (80056e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	f200 80a6 	bhi.w	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005568:	4a5e      	ldr	r2, [pc, #376]	; (80056e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800556a:	4293      	cmp	r3, r2
 800556c:	f000 8099 	beq.w	80056a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005570:	4a5c      	ldr	r2, [pc, #368]	; (80056e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005572:	4293      	cmp	r3, r2
 8005574:	f200 809e 	bhi.w	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005578:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800557c:	f000 8091 	beq.w	80056a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005580:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005584:	f200 8096 	bhi.w	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558c:	f000 8089 	beq.w	80056a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005594:	f200 808e 	bhi.w	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800559c:	d03e      	beq.n	800561c <HAL_TIM_ConfigClockSource+0x124>
 800559e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a2:	f200 8087 	bhi.w	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80055a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055aa:	f000 8086 	beq.w	80056ba <HAL_TIM_ConfigClockSource+0x1c2>
 80055ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b2:	d87f      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80055b4:	2b70      	cmp	r3, #112	; 0x70
 80055b6:	d01a      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0xf6>
 80055b8:	2b70      	cmp	r3, #112	; 0x70
 80055ba:	d87b      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80055bc:	2b60      	cmp	r3, #96	; 0x60
 80055be:	d050      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x16a>
 80055c0:	2b60      	cmp	r3, #96	; 0x60
 80055c2:	d877      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80055c4:	2b50      	cmp	r3, #80	; 0x50
 80055c6:	d03c      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x14a>
 80055c8:	2b50      	cmp	r3, #80	; 0x50
 80055ca:	d873      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	d058      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x18a>
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d86f      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80055d4:	2b30      	cmp	r3, #48	; 0x30
 80055d6:	d064      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80055d8:	2b30      	cmp	r3, #48	; 0x30
 80055da:	d86b      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d060      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d867      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d05c      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d05a      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x1aa>
 80055ec:	e062      	b.n	80056b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6899      	ldr	r1, [r3, #8]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f000 f9b3 	bl	8005968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005610:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	609a      	str	r2, [r3, #8]
      break;
 800561a:	e04f      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6899      	ldr	r1, [r3, #8]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f000 f99c 	bl	8005968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800563e:	609a      	str	r2, [r3, #8]
      break;
 8005640:	e03c      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	461a      	mov	r2, r3
 8005650:	f000 f90c 	bl	800586c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2150      	movs	r1, #80	; 0x50
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f966 	bl	800592c <TIM_ITRx_SetConfig>
      break;
 8005660:	e02c      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6859      	ldr	r1, [r3, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	461a      	mov	r2, r3
 8005670:	f000 f92b 	bl	80058ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2160      	movs	r1, #96	; 0x60
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f956 	bl	800592c <TIM_ITRx_SetConfig>
      break;
 8005680:	e01c      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6859      	ldr	r1, [r3, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	461a      	mov	r2, r3
 8005690:	f000 f8ec 	bl	800586c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2140      	movs	r1, #64	; 0x40
 800569a:	4618      	mov	r0, r3
 800569c:	f000 f946 	bl	800592c <TIM_ITRx_SetConfig>
      break;
 80056a0:	e00c      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f000 f93d 	bl	800592c <TIM_ITRx_SetConfig>
      break;
 80056b2:	e003      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      break;
 80056b8:	e000      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80056ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	ffceff88 	.word	0xffceff88
 80056dc:	00100040 	.word	0x00100040
 80056e0:	00100030 	.word	0x00100030
 80056e4:	00100020 	.word	0x00100020

080056e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a40      	ldr	r2, [pc, #256]	; (800584c <TIM_Base_SetConfig+0x114>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d00f      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a3d      	ldr	r2, [pc, #244]	; (8005850 <TIM_Base_SetConfig+0x118>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a3c      	ldr	r2, [pc, #240]	; (8005854 <TIM_Base_SetConfig+0x11c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a3b      	ldr	r2, [pc, #236]	; (8005858 <TIM_Base_SetConfig+0x120>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a3a      	ldr	r2, [pc, #232]	; (800585c <TIM_Base_SetConfig+0x124>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a2f      	ldr	r2, [pc, #188]	; (800584c <TIM_Base_SetConfig+0x114>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01f      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d01b      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a2c      	ldr	r2, [pc, #176]	; (8005850 <TIM_Base_SetConfig+0x118>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d017      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2b      	ldr	r2, [pc, #172]	; (8005854 <TIM_Base_SetConfig+0x11c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a2a      	ldr	r2, [pc, #168]	; (8005858 <TIM_Base_SetConfig+0x120>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00f      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a29      	ldr	r2, [pc, #164]	; (800585c <TIM_Base_SetConfig+0x124>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a28      	ldr	r2, [pc, #160]	; (8005860 <TIM_Base_SetConfig+0x128>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a27      	ldr	r2, [pc, #156]	; (8005864 <TIM_Base_SetConfig+0x12c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a26      	ldr	r2, [pc, #152]	; (8005868 <TIM_Base_SetConfig+0x130>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a10      	ldr	r2, [pc, #64]	; (800584c <TIM_Base_SetConfig+0x114>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00f      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a12      	ldr	r2, [pc, #72]	; (800585c <TIM_Base_SetConfig+0x124>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00b      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a11      	ldr	r2, [pc, #68]	; (8005860 <TIM_Base_SetConfig+0x128>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a10      	ldr	r2, [pc, #64]	; (8005864 <TIM_Base_SetConfig+0x12c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a0f      	ldr	r2, [pc, #60]	; (8005868 <TIM_Base_SetConfig+0x130>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d103      	bne.n	8005838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	615a      	str	r2, [r3, #20]
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40010000 	.word	0x40010000
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40010400 	.word	0x40010400
 8005860:	40014000 	.word	0x40014000
 8005864:	40014400 	.word	0x40014400
 8005868:	40014800 	.word	0x40014800

0800586c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f023 030a 	bic.w	r3, r3, #10
 80058a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f023 0210 	bic.w	r2, r3, #16
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	031b      	lsls	r3, r3, #12
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005906:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <TIM_ITRx_SetConfig+0x38>)
 8005940:	4013      	ands	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	f043 0307 	orr.w	r3, r3, #7
 800594e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	609a      	str	r2, [r3, #8]
}
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	ffcfff8f 	.word	0xffcfff8f

08005968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	021a      	lsls	r2, r3, #8
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	431a      	orrs	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4313      	orrs	r3, r2
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	bf00      	nop
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059bc:	2302      	movs	r3, #2
 80059be:	e06d      	b.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a30      	ldr	r2, [pc, #192]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2f      	ldr	r2, [pc, #188]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d108      	bne.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a20      	ldr	r2, [pc, #128]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d022      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d01d      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d018      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1c      	ldr	r2, [pc, #112]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d013      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1a      	ldr	r2, [pc, #104]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00e      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a15      	ldr	r2, [pc, #84]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d009      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a16      	ldr	r2, [pc, #88]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d004      	beq.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a15      	ldr	r2, [pc, #84]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10c      	bne.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40010400 	.word	0x40010400
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40000c00 	.word	0x40000c00
 8005abc:	40001800 	.word	0x40001800
 8005ac0:	40014000 	.word	0x40014000

08005ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e042      	b.n	8005b98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fb f98f 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2224      	movs	r2, #36	; 0x24
 8005b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0201 	bic.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f82c 	bl	8005ba0 <UART_SetConfig>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e022      	b.n	8005b98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fd88 	bl	8006670 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fe0f 	bl	80067b4 <UART_CheckIdleState>
 8005b96:	4603      	mov	r3, r0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba4:	b092      	sub	sp, #72	; 0x48
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4bbe      	ldr	r3, [pc, #760]	; (8005ec8 <UART_SetConfig+0x328>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4ab3      	ldr	r2, [pc, #716]	; (8005ecc <UART_SetConfig+0x32c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	4baf      	ldr	r3, [pc, #700]	; (8005ed0 <UART_SetConfig+0x330>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	f023 010f 	bic.w	r1, r3, #15
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4aa6      	ldr	r2, [pc, #664]	; (8005ed4 <UART_SetConfig+0x334>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d177      	bne.n	8005d30 <UART_SetConfig+0x190>
 8005c40:	4ba5      	ldr	r3, [pc, #660]	; (8005ed8 <UART_SetConfig+0x338>)
 8005c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c48:	2b28      	cmp	r3, #40	; 0x28
 8005c4a:	d86d      	bhi.n	8005d28 <UART_SetConfig+0x188>
 8005c4c:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0xb4>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005cf9 	.word	0x08005cf9
 8005c58:	08005d29 	.word	0x08005d29
 8005c5c:	08005d29 	.word	0x08005d29
 8005c60:	08005d29 	.word	0x08005d29
 8005c64:	08005d29 	.word	0x08005d29
 8005c68:	08005d29 	.word	0x08005d29
 8005c6c:	08005d29 	.word	0x08005d29
 8005c70:	08005d29 	.word	0x08005d29
 8005c74:	08005d01 	.word	0x08005d01
 8005c78:	08005d29 	.word	0x08005d29
 8005c7c:	08005d29 	.word	0x08005d29
 8005c80:	08005d29 	.word	0x08005d29
 8005c84:	08005d29 	.word	0x08005d29
 8005c88:	08005d29 	.word	0x08005d29
 8005c8c:	08005d29 	.word	0x08005d29
 8005c90:	08005d29 	.word	0x08005d29
 8005c94:	08005d09 	.word	0x08005d09
 8005c98:	08005d29 	.word	0x08005d29
 8005c9c:	08005d29 	.word	0x08005d29
 8005ca0:	08005d29 	.word	0x08005d29
 8005ca4:	08005d29 	.word	0x08005d29
 8005ca8:	08005d29 	.word	0x08005d29
 8005cac:	08005d29 	.word	0x08005d29
 8005cb0:	08005d29 	.word	0x08005d29
 8005cb4:	08005d11 	.word	0x08005d11
 8005cb8:	08005d29 	.word	0x08005d29
 8005cbc:	08005d29 	.word	0x08005d29
 8005cc0:	08005d29 	.word	0x08005d29
 8005cc4:	08005d29 	.word	0x08005d29
 8005cc8:	08005d29 	.word	0x08005d29
 8005ccc:	08005d29 	.word	0x08005d29
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005d19 	.word	0x08005d19
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	08005d29 	.word	0x08005d29
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d29 	.word	0x08005d29
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d29 	.word	0x08005d29
 8005cf0:	08005d29 	.word	0x08005d29
 8005cf4:	08005d21 	.word	0x08005d21
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfe:	e222      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d00:	2304      	movs	r3, #4
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d06:	e21e      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0e:	e21a      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d10:	2310      	movs	r3, #16
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d16:	e216      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d18:	2320      	movs	r3, #32
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1e:	e212      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e20e      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e20a      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a69      	ldr	r2, [pc, #420]	; (8005edc <UART_SetConfig+0x33c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d130      	bne.n	8005d9c <UART_SetConfig+0x1fc>
 8005d3a:	4b67      	ldr	r3, [pc, #412]	; (8005ed8 <UART_SetConfig+0x338>)
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d826      	bhi.n	8005d94 <UART_SetConfig+0x1f4>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0x1ac>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d65 	.word	0x08005d65
 8005d50:	08005d6d 	.word	0x08005d6d
 8005d54:	08005d75 	.word	0x08005d75
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08005d8d 	.word	0x08005d8d
 8005d64:	2300      	movs	r3, #0
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6a:	e1ec      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d72:	e1e8      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d74:	2308      	movs	r3, #8
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7a:	e1e4      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d82:	e1e0      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d84:	2320      	movs	r3, #32
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8a:	e1dc      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d92:	e1d8      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e1d4      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a4f      	ldr	r2, [pc, #316]	; (8005ee0 <UART_SetConfig+0x340>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d130      	bne.n	8005e08 <UART_SetConfig+0x268>
 8005da6:	4b4c      	ldr	r3, [pc, #304]	; (8005ed8 <UART_SetConfig+0x338>)
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	d826      	bhi.n	8005e00 <UART_SetConfig+0x260>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0x218>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005dd1 	.word	0x08005dd1
 8005dbc:	08005dd9 	.word	0x08005dd9
 8005dc0:	08005de1 	.word	0x08005de1
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005df1 	.word	0x08005df1
 8005dcc:	08005df9 	.word	0x08005df9
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd6:	e1b6      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dde:	e1b2      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005de0:	2308      	movs	r3, #8
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de6:	e1ae      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005de8:	2310      	movs	r3, #16
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dee:	e1aa      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005df0:	2320      	movs	r3, #32
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df6:	e1a6      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005df8:	2340      	movs	r3, #64	; 0x40
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfe:	e1a2      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005e00:	2380      	movs	r3, #128	; 0x80
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e19e      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a35      	ldr	r2, [pc, #212]	; (8005ee4 <UART_SetConfig+0x344>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d130      	bne.n	8005e74 <UART_SetConfig+0x2d4>
 8005e12:	4b31      	ldr	r3, [pc, #196]	; (8005ed8 <UART_SetConfig+0x338>)
 8005e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d826      	bhi.n	8005e6c <UART_SetConfig+0x2cc>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <UART_SetConfig+0x284>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005e3d 	.word	0x08005e3d
 8005e28:	08005e45 	.word	0x08005e45
 8005e2c:	08005e4d 	.word	0x08005e4d
 8005e30:	08005e55 	.word	0x08005e55
 8005e34:	08005e5d 	.word	0x08005e5d
 8005e38:	08005e65 	.word	0x08005e65
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e42:	e180      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005e44:	2304      	movs	r3, #4
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4a:	e17c      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e52:	e178      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005e54:	2310      	movs	r3, #16
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5a:	e174      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e62:	e170      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005e64:	2340      	movs	r3, #64	; 0x40
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6a:	e16c      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005e6c:	2380      	movs	r3, #128	; 0x80
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e72:	e168      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <UART_SetConfig+0x348>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d142      	bne.n	8005f04 <UART_SetConfig+0x364>
 8005e7e:	4b16      	ldr	r3, [pc, #88]	; (8005ed8 <UART_SetConfig+0x338>)
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2b05      	cmp	r3, #5
 8005e88:	d838      	bhi.n	8005efc <UART_SetConfig+0x35c>
 8005e8a:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <UART_SetConfig+0x2f0>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005ea9 	.word	0x08005ea9
 8005e94:	08005eb1 	.word	0x08005eb1
 8005e98:	08005eb9 	.word	0x08005eb9
 8005e9c:	08005ec1 	.word	0x08005ec1
 8005ea0:	08005eed 	.word	0x08005eed
 8005ea4:	08005ef5 	.word	0x08005ef5
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eae:	e14a      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb6:	e146      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005eb8:	2308      	movs	r3, #8
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ebe:	e142      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec6:	e13e      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005ec8:	cfff69f3 	.word	0xcfff69f3
 8005ecc:	58000c00 	.word	0x58000c00
 8005ed0:	11fff4ff 	.word	0x11fff4ff
 8005ed4:	40011000 	.word	0x40011000
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	40004400 	.word	0x40004400
 8005ee0:	40004800 	.word	0x40004800
 8005ee4:	40004c00 	.word	0x40004c00
 8005ee8:	40005000 	.word	0x40005000
 8005eec:	2320      	movs	r3, #32
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef2:	e128      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005ef4:	2340      	movs	r3, #64	; 0x40
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efa:	e124      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e120      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4acb      	ldr	r2, [pc, #812]	; (8006238 <UART_SetConfig+0x698>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d176      	bne.n	8005ffc <UART_SetConfig+0x45c>
 8005f0e:	4bcb      	ldr	r3, [pc, #812]	; (800623c <UART_SetConfig+0x69c>)
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f16:	2b28      	cmp	r3, #40	; 0x28
 8005f18:	d86c      	bhi.n	8005ff4 <UART_SetConfig+0x454>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <UART_SetConfig+0x380>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005fc5 	.word	0x08005fc5
 8005f24:	08005ff5 	.word	0x08005ff5
 8005f28:	08005ff5 	.word	0x08005ff5
 8005f2c:	08005ff5 	.word	0x08005ff5
 8005f30:	08005ff5 	.word	0x08005ff5
 8005f34:	08005ff5 	.word	0x08005ff5
 8005f38:	08005ff5 	.word	0x08005ff5
 8005f3c:	08005ff5 	.word	0x08005ff5
 8005f40:	08005fcd 	.word	0x08005fcd
 8005f44:	08005ff5 	.word	0x08005ff5
 8005f48:	08005ff5 	.word	0x08005ff5
 8005f4c:	08005ff5 	.word	0x08005ff5
 8005f50:	08005ff5 	.word	0x08005ff5
 8005f54:	08005ff5 	.word	0x08005ff5
 8005f58:	08005ff5 	.word	0x08005ff5
 8005f5c:	08005ff5 	.word	0x08005ff5
 8005f60:	08005fd5 	.word	0x08005fd5
 8005f64:	08005ff5 	.word	0x08005ff5
 8005f68:	08005ff5 	.word	0x08005ff5
 8005f6c:	08005ff5 	.word	0x08005ff5
 8005f70:	08005ff5 	.word	0x08005ff5
 8005f74:	08005ff5 	.word	0x08005ff5
 8005f78:	08005ff5 	.word	0x08005ff5
 8005f7c:	08005ff5 	.word	0x08005ff5
 8005f80:	08005fdd 	.word	0x08005fdd
 8005f84:	08005ff5 	.word	0x08005ff5
 8005f88:	08005ff5 	.word	0x08005ff5
 8005f8c:	08005ff5 	.word	0x08005ff5
 8005f90:	08005ff5 	.word	0x08005ff5
 8005f94:	08005ff5 	.word	0x08005ff5
 8005f98:	08005ff5 	.word	0x08005ff5
 8005f9c:	08005ff5 	.word	0x08005ff5
 8005fa0:	08005fe5 	.word	0x08005fe5
 8005fa4:	08005ff5 	.word	0x08005ff5
 8005fa8:	08005ff5 	.word	0x08005ff5
 8005fac:	08005ff5 	.word	0x08005ff5
 8005fb0:	08005ff5 	.word	0x08005ff5
 8005fb4:	08005ff5 	.word	0x08005ff5
 8005fb8:	08005ff5 	.word	0x08005ff5
 8005fbc:	08005ff5 	.word	0x08005ff5
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fca:	e0bc      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd2:	e0b8      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fda:	e0b4      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e0b0      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e0ac      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005fec:	2340      	movs	r3, #64	; 0x40
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e0a8      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005ff4:	2380      	movs	r3, #128	; 0x80
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e0a4      	b.n	8006146 <UART_SetConfig+0x5a6>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a8f      	ldr	r2, [pc, #572]	; (8006240 <UART_SetConfig+0x6a0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d130      	bne.n	8006068 <UART_SetConfig+0x4c8>
 8006006:	4b8d      	ldr	r3, [pc, #564]	; (800623c <UART_SetConfig+0x69c>)
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	2b05      	cmp	r3, #5
 8006010:	d826      	bhi.n	8006060 <UART_SetConfig+0x4c0>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x478>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006031 	.word	0x08006031
 800601c:	08006039 	.word	0x08006039
 8006020:	08006041 	.word	0x08006041
 8006024:	08006049 	.word	0x08006049
 8006028:	08006051 	.word	0x08006051
 800602c:	08006059 	.word	0x08006059
 8006030:	2300      	movs	r3, #0
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e086      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006038:	2304      	movs	r3, #4
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603e:	e082      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006040:	2308      	movs	r3, #8
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e07e      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006048:	2310      	movs	r3, #16
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e07a      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006050:	2320      	movs	r3, #32
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e076      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e072      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006060:	2380      	movs	r3, #128	; 0x80
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e06e      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a75      	ldr	r2, [pc, #468]	; (8006244 <UART_SetConfig+0x6a4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d130      	bne.n	80060d4 <UART_SetConfig+0x534>
 8006072:	4b72      	ldr	r3, [pc, #456]	; (800623c <UART_SetConfig+0x69c>)
 8006074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	2b05      	cmp	r3, #5
 800607c:	d826      	bhi.n	80060cc <UART_SetConfig+0x52c>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <UART_SetConfig+0x4e4>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	0800609d 	.word	0x0800609d
 8006088:	080060a5 	.word	0x080060a5
 800608c:	080060ad 	.word	0x080060ad
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060c5 	.word	0x080060c5
 800609c:	2300      	movs	r3, #0
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e050      	b.n	8006146 <UART_SetConfig+0x5a6>
 80060a4:	2304      	movs	r3, #4
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060aa:	e04c      	b.n	8006146 <UART_SetConfig+0x5a6>
 80060ac:	2308      	movs	r3, #8
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e048      	b.n	8006146 <UART_SetConfig+0x5a6>
 80060b4:	2310      	movs	r3, #16
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e044      	b.n	8006146 <UART_SetConfig+0x5a6>
 80060bc:	2320      	movs	r3, #32
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e040      	b.n	8006146 <UART_SetConfig+0x5a6>
 80060c4:	2340      	movs	r3, #64	; 0x40
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ca:	e03c      	b.n	8006146 <UART_SetConfig+0x5a6>
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d2:	e038      	b.n	8006146 <UART_SetConfig+0x5a6>
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a5b      	ldr	r2, [pc, #364]	; (8006248 <UART_SetConfig+0x6a8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d130      	bne.n	8006140 <UART_SetConfig+0x5a0>
 80060de:	4b57      	ldr	r3, [pc, #348]	; (800623c <UART_SetConfig+0x69c>)
 80060e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d826      	bhi.n	8006138 <UART_SetConfig+0x598>
 80060ea:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <UART_SetConfig+0x550>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	08006109 	.word	0x08006109
 80060f4:	08006111 	.word	0x08006111
 80060f8:	08006119 	.word	0x08006119
 80060fc:	08006121 	.word	0x08006121
 8006100:	08006129 	.word	0x08006129
 8006104:	08006131 	.word	0x08006131
 8006108:	2302      	movs	r3, #2
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610e:	e01a      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006110:	2304      	movs	r3, #4
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006116:	e016      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006118:	2308      	movs	r3, #8
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611e:	e012      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006120:	2310      	movs	r3, #16
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006126:	e00e      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006128:	2320      	movs	r3, #32
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612e:	e00a      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006130:	2340      	movs	r3, #64	; 0x40
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006136:	e006      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006138:	2380      	movs	r3, #128	; 0x80
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613e:	e002      	b.n	8006146 <UART_SetConfig+0x5a6>
 8006140:	2380      	movs	r3, #128	; 0x80
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a3f      	ldr	r2, [pc, #252]	; (8006248 <UART_SetConfig+0x6a8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	f040 80f8 	bne.w	8006342 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006152:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006156:	2b20      	cmp	r3, #32
 8006158:	dc46      	bgt.n	80061e8 <UART_SetConfig+0x648>
 800615a:	2b02      	cmp	r3, #2
 800615c:	f2c0 8082 	blt.w	8006264 <UART_SetConfig+0x6c4>
 8006160:	3b02      	subs	r3, #2
 8006162:	2b1e      	cmp	r3, #30
 8006164:	d87e      	bhi.n	8006264 <UART_SetConfig+0x6c4>
 8006166:	a201      	add	r2, pc, #4	; (adr r2, 800616c <UART_SetConfig+0x5cc>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	080061ef 	.word	0x080061ef
 8006170:	08006265 	.word	0x08006265
 8006174:	080061f7 	.word	0x080061f7
 8006178:	08006265 	.word	0x08006265
 800617c:	08006265 	.word	0x08006265
 8006180:	08006265 	.word	0x08006265
 8006184:	08006207 	.word	0x08006207
 8006188:	08006265 	.word	0x08006265
 800618c:	08006265 	.word	0x08006265
 8006190:	08006265 	.word	0x08006265
 8006194:	08006265 	.word	0x08006265
 8006198:	08006265 	.word	0x08006265
 800619c:	08006265 	.word	0x08006265
 80061a0:	08006265 	.word	0x08006265
 80061a4:	08006217 	.word	0x08006217
 80061a8:	08006265 	.word	0x08006265
 80061ac:	08006265 	.word	0x08006265
 80061b0:	08006265 	.word	0x08006265
 80061b4:	08006265 	.word	0x08006265
 80061b8:	08006265 	.word	0x08006265
 80061bc:	08006265 	.word	0x08006265
 80061c0:	08006265 	.word	0x08006265
 80061c4:	08006265 	.word	0x08006265
 80061c8:	08006265 	.word	0x08006265
 80061cc:	08006265 	.word	0x08006265
 80061d0:	08006265 	.word	0x08006265
 80061d4:	08006265 	.word	0x08006265
 80061d8:	08006265 	.word	0x08006265
 80061dc:	08006265 	.word	0x08006265
 80061e0:	08006265 	.word	0x08006265
 80061e4:	08006257 	.word	0x08006257
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d037      	beq.n	800625c <UART_SetConfig+0x6bc>
 80061ec:	e03a      	b.n	8006264 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80061ee:	f7fe fb71 	bl	80048d4 <HAL_RCCEx_GetD3PCLK1Freq>
 80061f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061f4:	e03c      	b.n	8006270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe fb80 	bl	8004900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006204:	e034      	b.n	8006270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006206:	f107 0318 	add.w	r3, r7, #24
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe fccc 	bl	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006214:	e02c      	b.n	8006270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006216:	4b09      	ldr	r3, [pc, #36]	; (800623c <UART_SetConfig+0x69c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d016      	beq.n	8006250 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006222:	4b06      	ldr	r3, [pc, #24]	; (800623c <UART_SetConfig+0x69c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	08db      	lsrs	r3, r3, #3
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	4a07      	ldr	r2, [pc, #28]	; (800624c <UART_SetConfig+0x6ac>)
 800622e:	fa22 f303 	lsr.w	r3, r2, r3
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006234:	e01c      	b.n	8006270 <UART_SetConfig+0x6d0>
 8006236:	bf00      	nop
 8006238:	40011400 	.word	0x40011400
 800623c:	58024400 	.word	0x58024400
 8006240:	40007800 	.word	0x40007800
 8006244:	40007c00 	.word	0x40007c00
 8006248:	58000c00 	.word	0x58000c00
 800624c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006250:	4b9d      	ldr	r3, [pc, #628]	; (80064c8 <UART_SetConfig+0x928>)
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006254:	e00c      	b.n	8006270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006256:	4b9d      	ldr	r3, [pc, #628]	; (80064cc <UART_SetConfig+0x92c>)
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800625a:	e009      	b.n	8006270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800625c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006262:	e005      	b.n	8006270 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800626e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 81de 	beq.w	8006634 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	4a94      	ldr	r2, [pc, #592]	; (80064d0 <UART_SetConfig+0x930>)
 800627e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006282:	461a      	mov	r2, r3
 8006284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006286:	fbb3 f3f2 	udiv	r3, r3, r2
 800628a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	4613      	mov	r3, r2
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	4413      	add	r3, r2
 8006296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006298:	429a      	cmp	r2, r3
 800629a:	d305      	bcc.n	80062a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d903      	bls.n	80062b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062ae:	e1c1      	b.n	8006634 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b2:	2200      	movs	r2, #0
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	60fa      	str	r2, [r7, #12]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	4a84      	ldr	r2, [pc, #528]	; (80064d0 <UART_SetConfig+0x930>)
 80062be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2200      	movs	r2, #0
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	607a      	str	r2, [r7, #4]
 80062ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062d2:	f7fa f801 	bl	80002d8 <__aeabi_uldivmod>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4610      	mov	r0, r2
 80062dc:	4619      	mov	r1, r3
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	020b      	lsls	r3, r1, #8
 80062e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062ec:	0202      	lsls	r2, r0, #8
 80062ee:	6979      	ldr	r1, [r7, #20]
 80062f0:	6849      	ldr	r1, [r1, #4]
 80062f2:	0849      	lsrs	r1, r1, #1
 80062f4:	2000      	movs	r0, #0
 80062f6:	460c      	mov	r4, r1
 80062f8:	4605      	mov	r5, r0
 80062fa:	eb12 0804 	adds.w	r8, r2, r4
 80062fe:	eb43 0905 	adc.w	r9, r3, r5
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	469a      	mov	sl, r3
 800630a:	4693      	mov	fp, r2
 800630c:	4652      	mov	r2, sl
 800630e:	465b      	mov	r3, fp
 8006310:	4640      	mov	r0, r8
 8006312:	4649      	mov	r1, r9
 8006314:	f7f9 ffe0 	bl	80002d8 <__aeabi_uldivmod>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4613      	mov	r3, r2
 800631e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006326:	d308      	bcc.n	800633a <UART_SetConfig+0x79a>
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800632e:	d204      	bcs.n	800633a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006336:	60da      	str	r2, [r3, #12]
 8006338:	e17c      	b.n	8006634 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006340:	e178      	b.n	8006634 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634a:	f040 80c5 	bne.w	80064d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800634e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006352:	2b20      	cmp	r3, #32
 8006354:	dc48      	bgt.n	80063e8 <UART_SetConfig+0x848>
 8006356:	2b00      	cmp	r3, #0
 8006358:	db7b      	blt.n	8006452 <UART_SetConfig+0x8b2>
 800635a:	2b20      	cmp	r3, #32
 800635c:	d879      	bhi.n	8006452 <UART_SetConfig+0x8b2>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0x7c4>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	080063ef 	.word	0x080063ef
 8006368:	080063f7 	.word	0x080063f7
 800636c:	08006453 	.word	0x08006453
 8006370:	08006453 	.word	0x08006453
 8006374:	080063ff 	.word	0x080063ff
 8006378:	08006453 	.word	0x08006453
 800637c:	08006453 	.word	0x08006453
 8006380:	08006453 	.word	0x08006453
 8006384:	0800640f 	.word	0x0800640f
 8006388:	08006453 	.word	0x08006453
 800638c:	08006453 	.word	0x08006453
 8006390:	08006453 	.word	0x08006453
 8006394:	08006453 	.word	0x08006453
 8006398:	08006453 	.word	0x08006453
 800639c:	08006453 	.word	0x08006453
 80063a0:	08006453 	.word	0x08006453
 80063a4:	0800641f 	.word	0x0800641f
 80063a8:	08006453 	.word	0x08006453
 80063ac:	08006453 	.word	0x08006453
 80063b0:	08006453 	.word	0x08006453
 80063b4:	08006453 	.word	0x08006453
 80063b8:	08006453 	.word	0x08006453
 80063bc:	08006453 	.word	0x08006453
 80063c0:	08006453 	.word	0x08006453
 80063c4:	08006453 	.word	0x08006453
 80063c8:	08006453 	.word	0x08006453
 80063cc:	08006453 	.word	0x08006453
 80063d0:	08006453 	.word	0x08006453
 80063d4:	08006453 	.word	0x08006453
 80063d8:	08006453 	.word	0x08006453
 80063dc:	08006453 	.word	0x08006453
 80063e0:	08006453 	.word	0x08006453
 80063e4:	08006445 	.word	0x08006445
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	d02e      	beq.n	800644a <UART_SetConfig+0x8aa>
 80063ec:	e031      	b.n	8006452 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ee:	f7fd f83b 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 80063f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063f4:	e033      	b.n	800645e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f6:	f7fd f84d 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 80063fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063fc:	e02f      	b.n	800645e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fa7c 	bl	8004900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800640c:	e027      	b.n	800645e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800640e:	f107 0318 	add.w	r3, r7, #24
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fbc8 	bl	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800641c:	e01f      	b.n	800645e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800641e:	4b2d      	ldr	r3, [pc, #180]	; (80064d4 <UART_SetConfig+0x934>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800642a:	4b2a      	ldr	r3, [pc, #168]	; (80064d4 <UART_SetConfig+0x934>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	08db      	lsrs	r3, r3, #3
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	4a24      	ldr	r2, [pc, #144]	; (80064c8 <UART_SetConfig+0x928>)
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800643c:	e00f      	b.n	800645e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800643e:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <UART_SetConfig+0x928>)
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006442:	e00c      	b.n	800645e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006444:	4b21      	ldr	r3, [pc, #132]	; (80064cc <UART_SetConfig+0x92c>)
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006448:	e009      	b.n	800645e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006450:	e005      	b.n	800645e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800645c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800645e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 80e7 	beq.w	8006634 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <UART_SetConfig+0x930>)
 800646c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006470:	461a      	mov	r2, r3
 8006472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006474:	fbb3 f3f2 	udiv	r3, r3, r2
 8006478:	005a      	lsls	r2, r3, #1
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	441a      	add	r2, r3
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	fbb2 f3f3 	udiv	r3, r2, r3
 800648a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	2b0f      	cmp	r3, #15
 8006490:	d916      	bls.n	80064c0 <UART_SetConfig+0x920>
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006498:	d212      	bcs.n	80064c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	b29b      	uxth	r3, r3
 800649e:	f023 030f 	bic.w	r3, r3, #15
 80064a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064b2:	4313      	orrs	r3, r2
 80064b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80064bc:	60da      	str	r2, [r3, #12]
 80064be:	e0b9      	b.n	8006634 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064c6:	e0b5      	b.n	8006634 <UART_SetConfig+0xa94>
 80064c8:	03d09000 	.word	0x03d09000
 80064cc:	003d0900 	.word	0x003d0900
 80064d0:	08007340 	.word	0x08007340
 80064d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80064d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80064dc:	2b20      	cmp	r3, #32
 80064de:	dc49      	bgt.n	8006574 <UART_SetConfig+0x9d4>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	db7c      	blt.n	80065de <UART_SetConfig+0xa3e>
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	d87a      	bhi.n	80065de <UART_SetConfig+0xa3e>
 80064e8:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <UART_SetConfig+0x950>)
 80064ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ee:	bf00      	nop
 80064f0:	0800657b 	.word	0x0800657b
 80064f4:	08006583 	.word	0x08006583
 80064f8:	080065df 	.word	0x080065df
 80064fc:	080065df 	.word	0x080065df
 8006500:	0800658b 	.word	0x0800658b
 8006504:	080065df 	.word	0x080065df
 8006508:	080065df 	.word	0x080065df
 800650c:	080065df 	.word	0x080065df
 8006510:	0800659b 	.word	0x0800659b
 8006514:	080065df 	.word	0x080065df
 8006518:	080065df 	.word	0x080065df
 800651c:	080065df 	.word	0x080065df
 8006520:	080065df 	.word	0x080065df
 8006524:	080065df 	.word	0x080065df
 8006528:	080065df 	.word	0x080065df
 800652c:	080065df 	.word	0x080065df
 8006530:	080065ab 	.word	0x080065ab
 8006534:	080065df 	.word	0x080065df
 8006538:	080065df 	.word	0x080065df
 800653c:	080065df 	.word	0x080065df
 8006540:	080065df 	.word	0x080065df
 8006544:	080065df 	.word	0x080065df
 8006548:	080065df 	.word	0x080065df
 800654c:	080065df 	.word	0x080065df
 8006550:	080065df 	.word	0x080065df
 8006554:	080065df 	.word	0x080065df
 8006558:	080065df 	.word	0x080065df
 800655c:	080065df 	.word	0x080065df
 8006560:	080065df 	.word	0x080065df
 8006564:	080065df 	.word	0x080065df
 8006568:	080065df 	.word	0x080065df
 800656c:	080065df 	.word	0x080065df
 8006570:	080065d1 	.word	0x080065d1
 8006574:	2b40      	cmp	r3, #64	; 0x40
 8006576:	d02e      	beq.n	80065d6 <UART_SetConfig+0xa36>
 8006578:	e031      	b.n	80065de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800657a:	f7fc ff75 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 800657e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006580:	e033      	b.n	80065ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006582:	f7fc ff87 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 8006586:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006588:	e02f      	b.n	80065ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800658a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe f9b6 	bl	8004900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006598:	e027      	b.n	80065ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800659a:	f107 0318 	add.w	r3, r7, #24
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fb02 	bl	8004ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065a8:	e01f      	b.n	80065ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065aa:	4b2d      	ldr	r3, [pc, #180]	; (8006660 <UART_SetConfig+0xac0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065b6:	4b2a      	ldr	r3, [pc, #168]	; (8006660 <UART_SetConfig+0xac0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	08db      	lsrs	r3, r3, #3
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	4a28      	ldr	r2, [pc, #160]	; (8006664 <UART_SetConfig+0xac4>)
 80065c2:	fa22 f303 	lsr.w	r3, r2, r3
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065c8:	e00f      	b.n	80065ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80065ca:	4b26      	ldr	r3, [pc, #152]	; (8006664 <UART_SetConfig+0xac4>)
 80065cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ce:	e00c      	b.n	80065ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065d0:	4b25      	ldr	r3, [pc, #148]	; (8006668 <UART_SetConfig+0xac8>)
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d4:	e009      	b.n	80065ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065dc:	e005      	b.n	80065ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80065e8:	bf00      	nop
    }

    if (pclk != 0U)
 80065ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d021      	beq.n	8006634 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	4a1d      	ldr	r2, [pc, #116]	; (800666c <UART_SetConfig+0xacc>)
 80065f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065fa:	461a      	mov	r2, r3
 80065fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	441a      	add	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006612:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	2b0f      	cmp	r3, #15
 8006618:	d909      	bls.n	800662e <UART_SetConfig+0xa8e>
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006620:	d205      	bcs.n	800662e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	b29a      	uxth	r2, r3
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
 800662c:	e002      	b.n	8006634 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2201      	movs	r2, #1
 8006638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2201      	movs	r2, #1
 8006640:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2200      	movs	r2, #0
 8006648:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2200      	movs	r2, #0
 800664e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006650:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006654:	4618      	mov	r0, r3
 8006656:	3748      	adds	r7, #72	; 0x48
 8006658:	46bd      	mov	sp, r7
 800665a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800665e:	bf00      	nop
 8006660:	58024400 	.word	0x58024400
 8006664:	03d09000 	.word	0x03d09000
 8006668:	003d0900 	.word	0x003d0900
 800666c:	08007340 	.word	0x08007340

08006670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01a      	beq.n	8006786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676e:	d10a      	bne.n	8006786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  }
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b098      	sub	sp, #96	; 0x60
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067c4:	f7fa fd9c 	bl	8001300 <HAL_GetTick>
 80067c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d12f      	bne.n	8006838 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e0:	2200      	movs	r2, #0
 80067e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f88e 	bl	8006908 <UART_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d022      	beq.n	8006838 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006806:	653b      	str	r3, [r7, #80]	; 0x50
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006810:	647b      	str	r3, [r7, #68]	; 0x44
 8006812:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800681e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e6      	bne.n	80067f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e063      	b.n	8006900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b04      	cmp	r3, #4
 8006844:	d149      	bne.n	80068da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006846:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800684e:	2200      	movs	r2, #0
 8006850:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f857 	bl	8006908 <UART_WaitOnFlagUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d03c      	beq.n	80068da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	623b      	str	r3, [r7, #32]
   return(result);
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006874:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687e:	633b      	str	r3, [r7, #48]	; 0x30
 8006880:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e6      	bne.n	8006860 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3308      	adds	r3, #8
 8006898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068b2:	61fa      	str	r2, [r7, #28]
 80068b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	69b9      	ldr	r1, [r7, #24]
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	617b      	str	r3, [r7, #20]
   return(result);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e5      	bne.n	8006892 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e012      	b.n	8006900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3758      	adds	r7, #88	; 0x58
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006918:	e049      	b.n	80069ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006920:	d045      	beq.n	80069ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006922:	f7fa fced 	bl	8001300 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	429a      	cmp	r2, r3
 8006930:	d302      	bcc.n	8006938 <UART_WaitOnFlagUntilTimeout+0x30>
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e048      	b.n	80069ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	d031      	beq.n	80069ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	f003 0308 	and.w	r3, r3, #8
 8006954:	2b08      	cmp	r3, #8
 8006956:	d110      	bne.n	800697a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2208      	movs	r2, #8
 800695e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f839 	bl	80069d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2208      	movs	r2, #8
 800696a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e029      	b.n	80069ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006988:	d111      	bne.n	80069ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f81f 	bl	80069d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e00f      	b.n	80069ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	4013      	ands	r3, r2
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	bf0c      	ite	eq
 80069be:	2301      	moveq	r3, #1
 80069c0:	2300      	movne	r3, #0
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d0a6      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b095      	sub	sp, #84	; 0x54
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006a00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e6      	bne.n	80069e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	4b1e      	ldr	r3, [pc, #120]	; (8006aa0 <UART_EndRxTransfer+0xc8>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e5      	bne.n	8006a12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d118      	bne.n	8006a80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f023 0310 	bic.w	r3, r3, #16
 8006a62:	647b      	str	r3, [r7, #68]	; 0x44
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6979      	ldr	r1, [r7, #20]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e6      	bne.n	8006a4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a94:	bf00      	nop
 8006a96:	3754      	adds	r7, #84	; 0x54
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	effffffe 	.word	0xeffffffe

08006aa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_UARTEx_DisableFifoMode+0x16>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e027      	b.n	8006b0a <HAL_UARTEx_DisableFifoMode+0x66>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2224      	movs	r2, #36	; 0x24
 8006ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0201 	bic.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ae8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e02d      	b.n	8006b8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2224      	movs	r2, #36	; 0x24
 8006b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0201 	bic.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f850 	bl	8006c10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d101      	bne.n	8006baa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e02d      	b.n	8006c06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2224      	movs	r2, #36	; 0x24
 8006bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0201 	bic.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f812 	bl	8006c10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d108      	bne.n	8006c32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c30:	e031      	b.n	8006c96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c32:	2310      	movs	r3, #16
 8006c34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c36:	2310      	movs	r3, #16
 8006c38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	0e5b      	lsrs	r3, r3, #25
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	0f5b      	lsrs	r3, r3, #29
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	7b3a      	ldrb	r2, [r7, #12]
 8006c5e:	4911      	ldr	r1, [pc, #68]	; (8006ca4 <UARTEx_SetNbDataToProcess+0x94>)
 8006c60:	5c8a      	ldrb	r2, [r1, r2]
 8006c62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c66:	7b3a      	ldrb	r2, [r7, #12]
 8006c68:	490f      	ldr	r1, [pc, #60]	; (8006ca8 <UARTEx_SetNbDataToProcess+0x98>)
 8006c6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	7b7a      	ldrb	r2, [r7, #13]
 8006c7c:	4909      	ldr	r1, [pc, #36]	; (8006ca4 <UARTEx_SetNbDataToProcess+0x94>)
 8006c7e:	5c8a      	ldrb	r2, [r1, r2]
 8006c80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c84:	7b7a      	ldrb	r2, [r7, #13]
 8006c86:	4908      	ldr	r1, [pc, #32]	; (8006ca8 <UARTEx_SetNbDataToProcess+0x98>)
 8006c88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	08007358 	.word	0x08007358
 8006ca8:	08007360 	.word	0x08007360

08006cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cac:	b084      	sub	sp, #16
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	f107 001c 	add.w	r0, r7, #28
 8006cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d120      	bne.n	8006d06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	4b2a      	ldr	r3, [pc, #168]	; (8006d80 <USB_CoreInit+0xd4>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d105      	bne.n	8006cfa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 faac 	bl	8007258 <USB_CoreReset>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
 8006d04:	e01a      	b.n	8006d3c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 faa0 	bl	8007258 <USB_CoreReset>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d106      	bne.n	8006d30 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8006d2e:	e005      	b.n	8006d3c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d116      	bne.n	8006d70 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d50:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <USB_CoreInit+0xd8>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f043 0206 	orr.w	r2, r3, #6
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f043 0220 	orr.w	r2, r3, #32
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d7c:	b004      	add	sp, #16
 8006d7e:	4770      	bx	lr
 8006d80:	ffbdffbf 	.word	0xffbdffbf
 8006d84:	03ee0000 	.word	0x03ee0000

08006d88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f023 0201 	bic.w	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d115      	bne.n	8006df8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dd8:	2001      	movs	r0, #1
 8006dda:	f7fa fa9d 	bl	8001318 <HAL_Delay>
      ms++;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3301      	adds	r3, #1
 8006de2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fa29 	bl	800723c <USB_GetMode>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d01e      	beq.n	8006e2e <USB_SetCurrentMode+0x84>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b31      	cmp	r3, #49	; 0x31
 8006df4:	d9f0      	bls.n	8006dd8 <USB_SetCurrentMode+0x2e>
 8006df6:	e01a      	b.n	8006e2e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d115      	bne.n	8006e2a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	f7fa fa84 	bl	8001318 <HAL_Delay>
      ms++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fa10 	bl	800723c <USB_GetMode>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <USB_SetCurrentMode+0x84>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b31      	cmp	r3, #49	; 0x31
 8006e26:	d9f0      	bls.n	8006e0a <USB_SetCurrentMode+0x60>
 8006e28:	e001      	b.n	8006e2e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e005      	b.n	8006e3a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b32      	cmp	r3, #50	; 0x32
 8006e32:	d101      	bne.n	8006e38 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e44:	b084      	sub	sp, #16
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b086      	sub	sp, #24
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e5e:	2300      	movs	r3, #0
 8006e60:	613b      	str	r3, [r7, #16]
 8006e62:	e009      	b.n	8006e78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3340      	adds	r3, #64	; 0x40
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	2200      	movs	r2, #0
 8006e70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	3301      	adds	r3, #1
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b0e      	cmp	r3, #14
 8006e7c:	d9f2      	bls.n	8006e64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d11c      	bne.n	8006ebe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e92:	f043 0302 	orr.w	r3, r3, #2
 8006e96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	e005      	b.n	8006eca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006edc:	4619      	mov	r1, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	680b      	ldr	r3, [r1, #0]
 8006ee8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d10c      	bne.n	8006f0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d104      	bne.n	8006f00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f965 	bl	80071c8 <USB_SetDevSpeed>
 8006efe:	e008      	b.n	8006f12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f00:	2101      	movs	r1, #1
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f960 	bl	80071c8 <USB_SetDevSpeed>
 8006f08:	e003      	b.n	8006f12 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f0a:	2103      	movs	r1, #3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f95b 	bl	80071c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f12:	2110      	movs	r1, #16
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f8f3 	bl	8007100 <USB_FlushTxFifo>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f91f 	bl	8007168 <USB_FlushRxFifo>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f46:	461a      	mov	r2, r3
 8006f48:	2300      	movs	r3, #0
 8006f4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f52:	461a      	mov	r2, r3
 8006f54:	2300      	movs	r3, #0
 8006f56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	e043      	b.n	8006fe6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f74:	d118      	bne.n	8006fa8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	e013      	b.n	8006fba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	e008      	b.n	8006fba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	2300      	movs	r3, #0
 8006fca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d3b7      	bcc.n	8006f5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fee:	2300      	movs	r3, #0
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	e043      	b.n	800707c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800700a:	d118      	bne.n	800703e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701e:	461a      	mov	r2, r3
 8007020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	e013      	b.n	8007050 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007034:	461a      	mov	r2, r3
 8007036:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	e008      	b.n	8007050 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704a:	461a      	mov	r2, r3
 800704c:	2300      	movs	r3, #0
 800704e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	461a      	mov	r2, r3
 800705e:	2300      	movs	r3, #0
 8007060:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706e:	461a      	mov	r2, r3
 8007070:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007074:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	3301      	adds	r3, #1
 800707a:	613b      	str	r3, [r7, #16]
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	429a      	cmp	r2, r3
 8007082:	d3b7      	bcc.n	8006ff4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007096:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d105      	bne.n	80070b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	f043 0210 	orr.w	r2, r3, #16
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699a      	ldr	r2, [r3, #24]
 80070bc:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <USB_DevInit+0x2b4>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f043 0208 	orr.w	r2, r3, #8
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d105      	bne.n	80070e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699a      	ldr	r2, [r3, #24]
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <USB_DevInit+0x2b8>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f4:	b004      	add	sp, #16
 80070f6:	4770      	bx	lr
 80070f8:	803c3800 	.word	0x803c3800
 80070fc:	40000004 	.word	0x40000004

08007100 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4a13      	ldr	r2, [pc, #76]	; (8007164 <USB_FlushTxFifo+0x64>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d901      	bls.n	8007120 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e01b      	b.n	8007158 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	daf2      	bge.n	800710e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	019b      	lsls	r3, r3, #6
 8007130:	f043 0220 	orr.w	r2, r3, #32
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4a08      	ldr	r2, [pc, #32]	; (8007164 <USB_FlushTxFifo+0x64>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d901      	bls.n	800714a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e006      	b.n	8007158 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b20      	cmp	r3, #32
 8007154:	d0f0      	beq.n	8007138 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	00030d40 	.word	0x00030d40

08007168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4a11      	ldr	r2, [pc, #68]	; (80071c4 <USB_FlushRxFifo+0x5c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d901      	bls.n	8007186 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e018      	b.n	80071b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	daf2      	bge.n	8007174 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2210      	movs	r2, #16
 8007196:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4a08      	ldr	r2, [pc, #32]	; (80071c4 <USB_FlushRxFifo+0x5c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d901      	bls.n	80071aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e006      	b.n	80071b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b10      	cmp	r3, #16
 80071b4:	d0f0      	beq.n	8007198 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	00030d40 	.word	0x00030d40

080071c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	68f9      	ldr	r1, [r7, #12]
 80071e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e8:	4313      	orrs	r3, r2
 80071ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007214:	f023 0303 	bic.w	r3, r3, #3
 8007218:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007228:	f043 0302 	orr.w	r3, r3, #2
 800722c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	f003 0301 	and.w	r3, r3, #1
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a13      	ldr	r2, [pc, #76]	; (80072bc <USB_CoreReset+0x64>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e01b      	b.n	80072ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	daf2      	bge.n	8007264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f043 0201 	orr.w	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a09      	ldr	r2, [pc, #36]	; (80072bc <USB_CoreReset+0x64>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d901      	bls.n	80072a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e006      	b.n	80072ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d0f0      	beq.n	800728e <USB_CoreReset+0x36>

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	00030d40 	.word	0x00030d40

080072c0 <__libc_init_array>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	4d0d      	ldr	r5, [pc, #52]	; (80072f8 <__libc_init_array+0x38>)
 80072c4:	4c0d      	ldr	r4, [pc, #52]	; (80072fc <__libc_init_array+0x3c>)
 80072c6:	1b64      	subs	r4, r4, r5
 80072c8:	10a4      	asrs	r4, r4, #2
 80072ca:	2600      	movs	r6, #0
 80072cc:	42a6      	cmp	r6, r4
 80072ce:	d109      	bne.n	80072e4 <__libc_init_array+0x24>
 80072d0:	4d0b      	ldr	r5, [pc, #44]	; (8007300 <__libc_init_array+0x40>)
 80072d2:	4c0c      	ldr	r4, [pc, #48]	; (8007304 <__libc_init_array+0x44>)
 80072d4:	f000 f820 	bl	8007318 <_init>
 80072d8:	1b64      	subs	r4, r4, r5
 80072da:	10a4      	asrs	r4, r4, #2
 80072dc:	2600      	movs	r6, #0
 80072de:	42a6      	cmp	r6, r4
 80072e0:	d105      	bne.n	80072ee <__libc_init_array+0x2e>
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e8:	4798      	blx	r3
 80072ea:	3601      	adds	r6, #1
 80072ec:	e7ee      	b.n	80072cc <__libc_init_array+0xc>
 80072ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f2:	4798      	blx	r3
 80072f4:	3601      	adds	r6, #1
 80072f6:	e7f2      	b.n	80072de <__libc_init_array+0x1e>
 80072f8:	08007370 	.word	0x08007370
 80072fc:	08007370 	.word	0x08007370
 8007300:	08007370 	.word	0x08007370
 8007304:	08007374 	.word	0x08007374

08007308 <memset>:
 8007308:	4402      	add	r2, r0
 800730a:	4603      	mov	r3, r0
 800730c:	4293      	cmp	r3, r2
 800730e:	d100      	bne.n	8007312 <memset+0xa>
 8007310:	4770      	bx	lr
 8007312:	f803 1b01 	strb.w	r1, [r3], #1
 8007316:	e7f9      	b.n	800730c <memset+0x4>

08007318 <_init>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	bf00      	nop
 800731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731e:	bc08      	pop	{r3}
 8007320:	469e      	mov	lr, r3
 8007322:	4770      	bx	lr

08007324 <_fini>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	bf00      	nop
 8007328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732a:	bc08      	pop	{r3}
 800732c:	469e      	mov	lr, r3
 800732e:	4770      	bx	lr
