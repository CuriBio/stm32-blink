
STM32-blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081cc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800849c  0800849c  0001849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080084a4  080084a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080084a8  080084a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  080084ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000180  24000074  08008520  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001f4  08008520  000201f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019392  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d9a  00000000  00000000  00039434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001130  00000000  00000000  0003c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ff8  00000000  00000000  0003d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037e74  00000000  00000000  0003e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019a1a  00000000  00000000  0007616c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162073  00000000  00000000  0008fb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f1bf9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004924  00000000  00000000  001f1c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800844c 	.word	0x0800844c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	0800844c 	.word	0x0800844c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ring_buffer_init>:
 */

#include "communicator.h"
//#include "stdlib.h"

RingBuffer_t * ring_buffer_init(uint32_t size_buffer /*, Thread_Code_t this_thread_code*/) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	RingBuffer_t * buffer_s = (RingBuffer_t*)malloc(sizeof(RingBuffer_t));
 80005e4:	201c      	movs	r0, #28
 80005e6:	f007 fe6f 	bl	80082c8 <malloc>
 80005ea:	4603      	mov	r3, r0
 80005ec:	60fb      	str	r3, [r7, #12]
//	if (this_RawRingBuffer == NULL)
//	{
//		main_code_check(MAIN_STATUS_MEMORY_FAILURE, this_thread_code);
//	}

	buffer_s->data = (uint8_t*)malloc(sizeof(uint8_t*)*size_buffer);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 fe68 	bl	80082c8 <malloc>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	609a      	str	r2, [r3, #8]
//	if (this_RawRingBuffer->data == NULL)
//	{
//		main_code_check (MAIN_STATUS_MEMORY_FAILURE, this_thread_code);
//	}
	buffer_s->head = 0; // write into position
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2200      	movs	r2, #0
 8000604:	801a      	strh	r2, [r3, #0]
	buffer_s->tail = 0; // read from position
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2200      	movs	r2, #0
 800060a:	805a      	strh	r2, [r3, #2]
	buffer_s->full = 0; // whether full or not
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2200      	movs	r2, #0
 8000610:	719a      	strb	r2, [r3, #6]
	buffer_s->max = size_buffer; // size of buffer
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	b29a      	uxth	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	809a      	strh	r2, [r3, #4]
	buffer_s->pop = pop_ring_buffer; // pop method
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <ring_buffer_init+0x60>)
 800061e:	611a      	str	r2, [r3, #16]
	buffer_s->push = push_ring_buffer; // push method
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <ring_buffer_init+0x64>)
 8000624:	60da      	str	r2, [r3, #12]
	buffer_s->get_total_elements = total_elements_ring_buffer;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <ring_buffer_init+0x68>)
 800062a:	615a      	str	r2, [r3, #20]
	buffer_s->is_empty = is_empty_ring_buffer;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a06      	ldr	r2, [pc, #24]	; (8000648 <ring_buffer_init+0x6c>)
 8000630:	619a      	str	r2, [r3, #24]

	return buffer_s;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	080006b9 	.word	0x080006b9
 8000640:	0800064d 	.word	0x0800064d
 8000644:	0800070d 	.word	0x0800070d
 8000648:	08000753 	.word	0x08000753

0800064c <push_ring_buffer>:
 * push data to buffer, store at head
 * status code return 1 if buffer is full, no push
 * status code return 0 for store
 *
 */
uint8_t push_ring_buffer(RingBuffer_t * buffer_s, Command_t newData) {
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]

	if (buffer_s->full) { // if buffer is full, do not add to buffer
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	799b      	ldrb	r3, [r3, #6]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <push_ring_buffer+0x18>
		return (uint8_t) 1; // return status flag
 8000660:	2301      	movs	r3, #1
 8000662:	e023      	b.n	80006ac <push_ring_buffer+0x60>
	}
	buffer_s->data[buffer_s->head] = newData; // add data at head
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	8812      	ldrh	r2, [r2, #0]
 800066c:	4413      	add	r3, r2
 800066e:	78fa      	ldrb	r2, [r7, #3]
 8000670:	701a      	strb	r2, [r3, #0]
	buffer_s->head = (buffer_s->head == buffer_s->max-1 ? 0 : buffer_s->head+1); // increment or reset head
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	889b      	ldrh	r3, [r3, #4]
 800067c:	3b01      	subs	r3, #1
 800067e:	429a      	cmp	r2, r3
 8000680:	d004      	beq.n	800068c <push_ring_buffer+0x40>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	b29a      	uxth	r2, r3
 800068a:	e000      	b.n	800068e <push_ring_buffer+0x42>
 800068c:	2200      	movs	r2, #0
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	801a      	strh	r2, [r3, #0]
	buffer_s->full = (buffer_s->head==buffer_s->tail); // check if buffer is full
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	881a      	ldrh	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	885b      	ldrh	r3, [r3, #2]
 800069a:	429a      	cmp	r2, r3
 800069c:	bf0c      	ite	eq
 800069e:	2301      	moveq	r3, #1
 80006a0:	2300      	movne	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	719a      	strb	r2, [r3, #6]
	return (uint8_t) 0; // return status flag
 80006aa:	2300      	movs	r3, #0
	{
	thisRingBuffer->tail = (thisRingBuffer->tail + 1) % thisRingBuffer->max;
	}
	*/

}
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <pop_ring_buffer>:
/*			pop_ring_buffer
 * read data from buffer (first in), read from tail
 * status code return 1 for empty buffer, no read
 * status code return 0 for read
 */
uint8_t pop_ring_buffer(RingBuffer_t * buffer_s, uint8_t * dataPointer) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	// if head is at tail, and not full, treat it as an empty buffer and do nothing
	if (is_empty_ring_buffer(buffer_s)) {
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f845 	bl	8000752 <is_empty_ring_buffer>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <pop_ring_buffer+0x1a>
		return (uint8_t) 1; // retrun status flag
 80006ce:	2301      	movs	r3, #1
 80006d0:	e018      	b.n	8000704 <pop_ring_buffer+0x4c>
	}
	*dataPointer = buffer_s->data[buffer_s->tail]; // retrieve data at tail, store at pointer location (data variable)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	8852      	ldrh	r2, [r2, #2]
 80006da:	4413      	add	r3, r2
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	701a      	strb	r2, [r3, #0]
	buffer_s->full = 0; // automatically not full
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2200      	movs	r2, #0
 80006e6:	719a      	strb	r2, [r3, #6]
	buffer_s->tail = (buffer_s->tail+1) % buffer_s->max; // increment, or reset if at max (i.e. remainder of max with max is 0)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	885b      	ldrh	r3, [r3, #2]
 80006ec:	3301      	adds	r3, #1
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	8892      	ldrh	r2, [r2, #4]
 80006f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80006f6:	fb01 f202 	mul.w	r2, r1, r2
 80006fa:	1a9b      	subs	r3, r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	805a      	strh	r2, [r3, #2]
	return (uint8_t) 0;
 8000702:	2300      	movs	r3, #0
		buffer_s->tail = (buffer_s->tail + 1) % buffer_s->max;
		empty_return = 0;
	}
	return empty_return;
*/
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <total_elements_ring_buffer>:
 * find number of stored, unused elements in ring buffer
 * return is number of elements (head - tail)
 * maximum is size of buffer (buffer is full)
 * minimum is 0 (buffer is empty)
 */
uint16_t total_elements_ring_buffer(RingBuffer_t * buffer_s) {
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if (buffer_s->full) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	799b      	ldrb	r3, [r3, #6]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <total_elements_ring_buffer+0x16>
		return (uint16_t) buffer_s->max;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	e011      	b.n	8000746 <total_elements_ring_buffer+0x3a>
	}

	int16_t size = buffer_s->head - buffer_s->tail;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	881a      	ldrh	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	885b      	ldrh	r3, [r3, #2]
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	b29b      	uxth	r3, r3
 800072e:	81fb      	strh	r3, [r7, #14]
	if (size >= 0) {
 8000730:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db01      	blt.n	800073c <total_elements_ring_buffer+0x30>
		return size;
 8000738:	89fb      	ldrh	r3, [r7, #14]
 800073a:	e004      	b.n	8000746 <total_elements_ring_buffer+0x3a>
	}
	else {
		return (uint16_t) buffer_s->max + size;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	889a      	ldrh	r2, [r3, #4]
 8000740:	89fb      	ldrh	r3, [r7, #14]
 8000742:	4413      	add	r3, r2
 8000744:	b29b      	uxth	r3, r3
			size = (thisRingBuffer->max + thisRingBuffer->head - thisRingBuffer->tail);
		}
	}
	return size;
*/
}
 8000746:	4618      	mov	r0, r3
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <is_empty_ring_buffer>:
/*			is_empty_ring_buffer
 * checks if ring buffer is empty
 * returns 1 if buffer is both not full and head and tail at same position (i.e.
 * returns 0 otherwise (i.e. full)
 */
uint8_t is_empty_ring_buffer(RingBuffer_t * buffer_s) {
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
    return (uint8_t)(!buffer_s->full && (buffer_s->head == buffer_s->tail));
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	799b      	ldrb	r3, [r3, #6]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d107      	bne.n	8000772 <is_empty_ring_buffer+0x20>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881a      	ldrh	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	885b      	ldrh	r3, [r3, #2]
 800076a:	429a      	cmp	r2, r3
 800076c:	d101      	bne.n	8000772 <is_empty_ring_buffer+0x20>
 800076e:	2301      	movs	r3, #1
 8000770:	e000      	b.n	8000774 <is_empty_ring_buffer+0x22>
 8000772:	2300      	movs	r3, #0
 8000774:	b2db      	uxtb	r3, r3
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b8b      	ldr	r3, [pc, #556]	; (80009c8 <MX_GPIO_Init+0x244>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	4a89      	ldr	r2, [pc, #548]	; (80009c8 <MX_GPIO_Init+0x244>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007aa:	4b87      	ldr	r3, [pc, #540]	; (80009c8 <MX_GPIO_Init+0x244>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b8:	4b83      	ldr	r3, [pc, #524]	; (80009c8 <MX_GPIO_Init+0x244>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	4a82      	ldr	r2, [pc, #520]	; (80009c8 <MX_GPIO_Init+0x244>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c8:	4b7f      	ldr	r3, [pc, #508]	; (80009c8 <MX_GPIO_Init+0x244>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b7c      	ldr	r3, [pc, #496]	; (80009c8 <MX_GPIO_Init+0x244>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	4a7a      	ldr	r2, [pc, #488]	; (80009c8 <MX_GPIO_Init+0x244>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e6:	4b78      	ldr	r3, [pc, #480]	; (80009c8 <MX_GPIO_Init+0x244>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b74      	ldr	r3, [pc, #464]	; (80009c8 <MX_GPIO_Init+0x244>)
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fa:	4a73      	ldr	r2, [pc, #460]	; (80009c8 <MX_GPIO_Init+0x244>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000804:	4b70      	ldr	r3, [pc, #448]	; (80009c8 <MX_GPIO_Init+0x244>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	4b6d      	ldr	r3, [pc, #436]	; (80009c8 <MX_GPIO_Init+0x244>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000818:	4a6b      	ldr	r2, [pc, #428]	; (80009c8 <MX_GPIO_Init+0x244>)
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000822:	4b69      	ldr	r3, [pc, #420]	; (80009c8 <MX_GPIO_Init+0x244>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	f003 0308 	and.w	r3, r3, #8
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000830:	4b65      	ldr	r3, [pc, #404]	; (80009c8 <MX_GPIO_Init+0x244>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000836:	4a64      	ldr	r2, [pc, #400]	; (80009c8 <MX_GPIO_Init+0x244>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000840:	4b61      	ldr	r3, [pc, #388]	; (80009c8 <MX_GPIO_Init+0x244>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084e:	4b5e      	ldr	r3, [pc, #376]	; (80009c8 <MX_GPIO_Init+0x244>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a5c      	ldr	r2, [pc, #368]	; (80009c8 <MX_GPIO_Init+0x244>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b5a      	ldr	r3, [pc, #360]	; (80009c8 <MX_GPIO_Init+0x244>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0310 	and.w	r3, r3, #16
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000872:	4856      	ldr	r0, [pc, #344]	; (80009cc <MX_GPIO_Init+0x248>)
 8000874:	f001 fde6 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800087e:	4854      	ldr	r0, [pc, #336]	; (80009d0 <MX_GPIO_Init+0x24c>)
 8000880:	f001 fde0 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	4852      	ldr	r0, [pc, #328]	; (80009d4 <MX_GPIO_Init+0x250>)
 800088a:	f001 fddb 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484d      	ldr	r0, [pc, #308]	; (80009d8 <MX_GPIO_Init+0x254>)
 80008a4:	f001 fc1e 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008a8:	2332      	movs	r3, #50	; 0x32
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b8:	230b      	movs	r3, #11
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4845      	ldr	r0, [pc, #276]	; (80009d8 <MX_GPIO_Init+0x254>)
 80008c4:	f001 fc0e 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80008c8:	2386      	movs	r3, #134	; 0x86
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d8:	230b      	movs	r3, #11
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	483e      	ldr	r0, [pc, #248]	; (80009dc <MX_GPIO_Init+0x258>)
 80008e4:	f001 fbfe 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008e8:	f244 0301 	movw	r3, #16385	; 0x4001
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4832      	ldr	r0, [pc, #200]	; (80009cc <MX_GPIO_Init+0x248>)
 8000902:	f001 fbef 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000918:	230b      	movs	r3, #11
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	482a      	ldr	r0, [pc, #168]	; (80009cc <MX_GPIO_Init+0x248>)
 8000924:	f001 fbde 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4823      	ldr	r0, [pc, #140]	; (80009d0 <MX_GPIO_Init+0x24c>)
 8000942:	f001 fbcf 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4821      	ldr	r0, [pc, #132]	; (80009e0 <MX_GPIO_Init+0x25c>)
 800095c:	f001 fbc2 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000960:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000972:	230a      	movs	r3, #10
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4817      	ldr	r0, [pc, #92]	; (80009dc <MX_GPIO_Init+0x258>)
 800097e:	f001 fbb1 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000982:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000994:	230b      	movs	r3, #11
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4810      	ldr	r0, [pc, #64]	; (80009e0 <MX_GPIO_Init+0x25c>)
 80009a0:	f001 fba0 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_GPIO_Init+0x250>)
 80009bc:	f001 fb92 	bl	80020e4 <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3730      	adds	r7, #48	; 0x30
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	58024400 	.word	0x58024400
 80009cc:	58020400 	.word	0x58020400
 80009d0:	58020c00 	.word	0x58020c00
 80009d4:	58021000 	.word	0x58021000
 80009d8:	58020800 	.word	0x58020800
 80009dc:	58020000 	.word	0x58020000
 80009e0:	58021800 	.word	0x58021800

080009e4 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "system.h"

extern System my_sys;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	if (htim == (&my_sys)->LED1_timer) {
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d102      	bne.n	80009fc <HAL_TIM_PeriodElapsedCallback+0x18>
		(&my_sys)->LEDToggle1 = 1; // flip flag
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	741a      	strb	r2, [r3, #16]
	}
	if (htim == (&my_sys)->LED2_timer) {
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d102      	bne.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x28>
		(&my_sys)->LEDToggle2 = 1; // flip flag
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	745a      	strb	r2, [r3, #17]
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	24000090 	.word	0x24000090

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f000 fc4d 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f821 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f7ff feab 	bl	8000784 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a2e:	f000 fb5f 	bl	80010f0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000a32:	f000 fa79 	bl	8000f28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a36:	f000 fac5 	bl	8000fc4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // initialize system variable
  init_system(&my_sys,
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <main+0x40>)
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <main+0x44>)
 8000a4c:	4905      	ldr	r1, [pc, #20]	; (8000a64 <main+0x48>)
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <main+0x4c>)
 8000a50:	f000 f914 	bl	8000c7c <init_system>
  /* Infinite loop */

  while (1)
  {
	  /* USER CODE BEGIN WHILE */
	system_main(&my_sys);
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <main+0x4c>)
 8000a56:	f000 f949 	bl	8000cec <system_main>
 8000a5a:	e7fb      	b.n	8000a54 <main+0x38>
 8000a5c:	58020400 	.word	0x58020400
 8000a60:	24000100 	.word	0x24000100
 8000a64:	240000b4 	.word	0x240000b4
 8000a68:	24000090 	.word	0x24000090

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09c      	sub	sp, #112	; 0x70
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	224c      	movs	r2, #76	; 0x4c
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 fc2c 	bl	80082d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2220      	movs	r2, #32
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f007 fc26 	bl	80082d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f001 fd0d 	bl	80024ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <SystemClock_Config+0xcc>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <SystemClock_Config+0xcc>)
 8000a9c:	f023 0301 	bic.w	r3, r3, #1
 8000aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <SystemClock_Config+0xcc>)
 8000aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <SystemClock_Config+0xd0>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab4:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <SystemClock_Config+0xd0>)
 8000ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <SystemClock_Config+0xd0>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ac8:	bf00      	nop
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <SystemClock_Config+0xd0>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad6:	d1f8      	bne.n	8000aca <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae0:	2340      	movs	r3, #64	; 0x40
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 fd17 	bl	8002520 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000af8:	f000 f822 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	233f      	movs	r3, #63	; 0x3f
 8000afe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 f957 	bl	8002dd4 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b2c:	f000 f808 	bl	8000b40 <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3770      	adds	r7, #112	; 0x70
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58000400 	.word	0x58000400
 8000b3c:	58024800 	.word	0x58024800

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_MspInit+0x30>)
 8000b54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b58:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x30>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x30>)
 8000b64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	58024400 	.word	0x58024400

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 fbea 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM2_IRQHandler+0x10>)
 8000bda:	f004 fb83 	bl	80052e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	240000b4 	.word	0x240000b4

08000be8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM3_IRQHandler+0x10>)
 8000bee:	f004 fb79 	bl	80052e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	24000100 	.word	0x24000100

08000bfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USART3_IRQHandler+0x10>)
 8000c02:	f005 f82f 	bl	8005c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2400014c 	.word	0x2400014c

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f007 fb18 	bl	8008274 <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	24080000 	.word	0x24080000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	240000b0 	.word	0x240000b0
 8000c78:	240001f8 	.word	0x240001f8

08000c7c <init_system>:
extern System my_sys;
void init_system(System *sys,
		TIM_HandleTypeDef *h_timer1, TIM_HandleTypeDef *h_timer2,
		GPIO_TypeDef *h_GPIO,
		uint16_t LEDPin1, uint16_t LEDPin2 ,
		uint16_t size_of_recieve_buffer) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	603b      	str	r3, [r7, #0]

	// fill my_sys with pointers and variables
	sys->h_timer1 = h_timer1;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	601a      	str	r2, [r3, #0]
	sys->h_timer2 = h_timer2;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	605a      	str	r2, [r3, #4]
	sys->h_GPIO_LED = h_GPIO;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	609a      	str	r2, [r3, #8]
	sys->LEDPin1 = LEDPin1;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	8b3a      	ldrh	r2, [r7, #24]
 8000ca0:	819a      	strh	r2, [r3, #12]
	sys->LEDPin2 = LEDPin2;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	8bba      	ldrh	r2, [r7, #28]
 8000ca6:	81da      	strh	r2, [r3, #14]

	// initialize toggle variables
	sys->LEDToggle1 = 0;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	741a      	strb	r2, [r3, #16]
	sys->LEDToggle2 = 0;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	745a      	strb	r2, [r3, #17]

	sys->LED1_timer = h_timer1;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	615a      	str	r2, [r3, #20]
	sys->LED2_timer = h_timer2;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	619a      	str	r2, [r3, #24]

	// begin timers in interrupt mode
	HAL_TIM_Base_Start_IT(sys->LED1_timer);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 fa95 	bl	80051f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(sys->LED2_timer);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 fa90 	bl	80051f4 <HAL_TIM_Base_Start_IT>

	sys->recieve_ring_buffer = ring_buffer_init(size_of_recieve_buffer /*, Thread_Code_t this_thread_code*/);
 8000cd4:	8c3b      	ldrh	r3, [r7, #32]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fc80 	bl	80005dc <ring_buffer_init>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	61da      	str	r2, [r3, #28]

}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <system_main>:




void system_main(System *sys) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
		 * or
		 *
		 * if (flag is raised)
		 * 		perform action, which also lowers flag
		 * */
		if (sys->LEDToggle1 == 1) { // check if flag is raised
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7c1b      	ldrb	r3, [r3, #16]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d10a      	bne.n	8000d12 <system_main+0x26>
			sys->LEDToggle1 = 0; // lower flag
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	741a      	strb	r2, [r3, #16]
			HAL_GPIO_TogglePin(sys->h_GPIO_LED, sys->LEDPin1); // toggle pin
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	899b      	ldrh	r3, [r3, #12]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	f001 fbb2 	bl	8002476 <HAL_GPIO_TogglePin>
		}
		if (sys->LEDToggle2 == 1) { // check if flag is raised
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7c5b      	ldrb	r3, [r3, #17]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d10a      	bne.n	8000d30 <system_main+0x44>
			sys->LEDToggle2 = 0; // lower flag
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	745a      	strb	r2, [r3, #17]
			HAL_GPIO_TogglePin(sys->h_GPIO_LED, sys->LEDPin2); // toggle pin
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	89db      	ldrh	r3, [r3, #14]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	f001 fba3 	bl	8002476 <HAL_GPIO_TogglePin>
		}

		uint8_t incomingByte;
		HAL_StatusTypeDef status = HAL_UART_Receive_IT(&huart3, &incomingByte, SIZE_INCOMING_DATA);
 8000d30:	f107 030e 	add.w	r3, r7, #14
 8000d34:	2201      	movs	r2, #1
 8000d36:	4619      	mov	r1, r3
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <system_main+0x74>)
 8000d3a:	f004 ff47 	bl	8005bcc <HAL_UART_Receive_IT>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	73fb      	strb	r3, [r7, #15]
		if (!status) {
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d107      	bne.n	8000d58 <system_main+0x6c>
			sys->recieve_ring_buffer->push(sys->recieve_ring_buffer, incomingByte);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	69d2      	ldr	r2, [r2, #28]
 8000d52:	7bb9      	ldrb	r1, [r7, #14]
 8000d54:	4610      	mov	r0, r2
 8000d56:	4798      	blx	r3
		}

		commandHandler(&my_sys);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <system_main+0x78>)
 8000d5a:	f000 f805 	bl	8000d68 <commandHandler>
	while (1) {
 8000d5e:	e7c9      	b.n	8000cf4 <system_main+0x8>
 8000d60:	2400014c 	.word	0x2400014c
 8000d64:	24000090 	.word	0x24000090

08000d68 <commandHandler>:

	}
}


void commandHandler(System *sys) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	uint8_t command;
	uint8_t status_error = pop_ring_buffer(sys->recieve_ring_buffer, &command);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	f107 020e 	add.w	r2, r7, #14
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fc9c 	bl	80006b8 <pop_ring_buffer>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]
	if (!status_error) {
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d140      	bne.n	8000e0c <commandHandler+0xa4>
		switch (command) {
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	3b61      	subs	r3, #97	; 0x61
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d83d      	bhi.n	8000e0e <commandHandler+0xa6>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <commandHandler+0x30>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000de5 	.word	0x08000de5
 8000d9c:	08000e0f 	.word	0x08000e0f
 8000da0:	08000e0f 	.word	0x08000e0f
 8000da4:	08000df9 	.word	0x08000df9
 8000da8:	08000e0f 	.word	0x08000e0f
 8000dac:	08000e03 	.word	0x08000e03
 8000db0:	08000e0f 	.word	0x08000e0f
 8000db4:	08000e0f 	.word	0x08000e0f
 8000db8:	08000e0f 	.word	0x08000e0f
 8000dbc:	08000e0f 	.word	0x08000e0f
 8000dc0:	08000e0f 	.word	0x08000e0f
 8000dc4:	08000e0f 	.word	0x08000e0f
 8000dc8:	08000e0f 	.word	0x08000e0f
 8000dcc:	08000e0f 	.word	0x08000e0f
 8000dd0:	08000e0f 	.word	0x08000e0f
 8000dd4:	08000e0f 	.word	0x08000e0f
 8000dd8:	08000e0f 	.word	0x08000e0f
 8000ddc:	08000e0f 	.word	0x08000e0f
 8000de0:	08000def 	.word	0x08000def
		case LED1_5Hz:
			sys->LED1_timer = sys->h_timer1;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	615a      	str	r2, [r3, #20]
			break;
 8000dec:	e00f      	b.n	8000e0e <commandHandler+0xa6>
		case LED1_1Hz:
			sys->LED1_timer = sys->h_timer2;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	615a      	str	r2, [r3, #20]
			break;
 8000df6:	e00a      	b.n	8000e0e <commandHandler+0xa6>
		case LED2_5Hz:
			sys->LED2_timer = sys->h_timer1;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	619a      	str	r2, [r3, #24]
			break;
 8000e00:	e005      	b.n	8000e0e <commandHandler+0xa6>
		case LED2_1Hz:
			sys->LED2_timer = sys->h_timer2;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	619a      	str	r2, [r3, #24]
			break;
 8000e0a:	e000      	b.n	8000e0e <commandHandler+0xa6>
		}
	}
 8000e0c:	bf00      	nop

}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b37      	ldr	r3, [pc, #220]	; (8000efc <SystemInit+0xe4>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a36      	ldr	r2, [pc, #216]	; (8000efc <SystemInit+0xe4>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <SystemInit+0xe8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 030f 	and.w	r3, r3, #15
 8000e34:	2b06      	cmp	r3, #6
 8000e36:	d807      	bhi.n	8000e48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e38:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <SystemInit+0xe8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 030f 	bic.w	r3, r3, #15
 8000e40:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <SystemInit+0xe8>)
 8000e42:	f043 0307 	orr.w	r3, r3, #7
 8000e46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <SystemInit+0xec>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <SystemInit+0xec>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <SystemInit+0xec>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <SystemInit+0xec>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4929      	ldr	r1, [pc, #164]	; (8000f04 <SystemInit+0xec>)
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <SystemInit+0xf0>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <SystemInit+0xe8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <SystemInit+0xe8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f023 030f 	bic.w	r3, r3, #15
 8000e7a:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <SystemInit+0xe8>)
 8000e7c:	f043 0307 	orr.w	r3, r3, #7
 8000e80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <SystemInit+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <SystemInit+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <SystemInit+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <SystemInit+0xec>)
 8000e96:	4a1d      	ldr	r2, [pc, #116]	; (8000f0c <SystemInit+0xf4>)
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <SystemInit+0xec>)
 8000e9c:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <SystemInit+0xf8>)
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <SystemInit+0xec>)
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <SystemInit+0xfc>)
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <SystemInit+0xec>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <SystemInit+0xec>)
 8000eae:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <SystemInit+0xfc>)
 8000eb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <SystemInit+0xec>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <SystemInit+0xec>)
 8000eba:	4a16      	ldr	r2, [pc, #88]	; (8000f14 <SystemInit+0xfc>)
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <SystemInit+0xec>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <SystemInit+0xec>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <SystemInit+0xec>)
 8000eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ece:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <SystemInit+0xec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <SystemInit+0x100>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <SystemInit+0x104>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ee2:	d202      	bcs.n	8000eea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <SystemInit+0x108>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <SystemInit+0x10c>)
 8000eec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ef0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00
 8000f00:	52002000 	.word	0x52002000
 8000f04:	58024400 	.word	0x58024400
 8000f08:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f0c:	02020200 	.word	0x02020200
 8000f10:	01ff0000 	.word	0x01ff0000
 8000f14:	01010280 	.word	0x01010280
 8000f18:	5c001000 	.word	0x5c001000
 8000f1c:	ffff0000 	.word	0xffff0000
 8000f20:	51008108 	.word	0x51008108
 8000f24:	52004000 	.word	0x52004000

08000f28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 640-1;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f50:	f240 227f 	movw	r2, #639	; 0x27f
 8000f54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f72:	f004 f8e7 	bl	8005144 <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000f7c:	f7ff fde0 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f8e:	f004 fac9 	bl	8005524 <HAL_TIM_ConfigClockSource>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f98:	f7ff fdd2 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000faa:	f004 fd13 	bl	80059d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000fb4:	f7ff fdc4 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	240000b4 	.word	0x240000b4

08000fc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MX_TIM3_Init+0x98>)
 8000fe4:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <MX_TIM3_Init+0x9c>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640-1;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_TIM3_Init+0x98>)
 8000fea:	f240 227f 	movw	r2, #639	; 0x27f
 8000fee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_TIM3_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_TIM3_Init+0x98>)
 8000ff8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000ffc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_TIM3_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_TIM3_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <MX_TIM3_Init+0x98>)
 800100c:	f004 f89a 	bl	8005144 <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001016:	f7ff fd93 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_TIM3_Init+0x98>)
 8001028:	f004 fa7c 	bl	8005524 <HAL_TIM_ConfigClockSource>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001032:	f7ff fd85 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <MX_TIM3_Init+0x98>)
 8001044:	f004 fcc6 	bl	80059d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800104e:	f7ff fd77 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	24000100 	.word	0x24000100
 8001060:	40000400 	.word	0x40000400

08001064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001074:	d117      	bne.n	80010a6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HAL_TIM_Base_MspInit+0x84>)
 8001078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800107c:	4a1a      	ldr	r2, [pc, #104]	; (80010e8 <HAL_TIM_Base_MspInit+0x84>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_TIM_Base_MspInit+0x84>)
 8001088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	201c      	movs	r0, #28
 800109a:	f000 fa8a 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800109e:	201c      	movs	r0, #28
 80010a0:	f000 faa1 	bl	80015e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80010a4:	e01b      	b.n	80010de <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM3)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_TIM_Base_MspInit+0x88>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d116      	bne.n	80010de <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_TIM_Base_MspInit+0x84>)
 80010b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <HAL_TIM_Base_MspInit+0x84>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_TIM_Base_MspInit+0x84>)
 80010c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	201d      	movs	r0, #29
 80010d4:	f000 fa6d 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010d8:	201d      	movs	r0, #29
 80010da:	f000 fa84 	bl	80015e6 <HAL_NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	58024400 	.word	0x58024400
 80010ec:	40000400 	.word	0x40000400

080010f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <MX_USART3_UART_Init+0x90>)
 80010f6:	4a23      	ldr	r2, [pc, #140]	; (8001184 <MX_USART3_UART_Init+0x94>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_USART3_UART_Init+0x90>)
 80010fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001100:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_USART3_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <MX_USART3_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_USART3_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_USART3_UART_Init+0x90>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_USART3_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_USART3_UART_Init+0x90>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_USART3_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_USART3_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_USART3_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001138:	4811      	ldr	r0, [pc, #68]	; (8001180 <MX_USART3_UART_Init+0x90>)
 800113a:	f004 fcf7 	bl	8005b2c <HAL_UART_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001144:	f7ff fcfc 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_USART3_UART_Init+0x90>)
 800114c:	f006 ffc7 	bl	80080de <HAL_UARTEx_SetTxFifoThreshold>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001156:	f7ff fcf3 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115a:	2100      	movs	r1, #0
 800115c:	4808      	ldr	r0, [pc, #32]	; (8001180 <MX_USART3_UART_Init+0x90>)
 800115e:	f006 fffc 	bl	800815a <HAL_UARTEx_SetRxFifoThreshold>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001168:	f7ff fcea 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_USART3_UART_Init+0x90>)
 800116e:	f006 ff7d 	bl	800806c <HAL_UARTEx_DisableFifoMode>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001178:	f7ff fce2 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2400014c 	.word	0x2400014c
 8001184:	40004800 	.word	0x40004800

08001188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0ba      	sub	sp, #232	; 0xe8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	22c0      	movs	r2, #192	; 0xc0
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f007 f895 	bl	80082d8 <memset>
  if(uartHandle->Instance==USART3)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a2b      	ldr	r2, [pc, #172]	; (8001260 <HAL_UART_MspInit+0xd8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d14e      	bne.n	8001256 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b8:	f04f 0202 	mov.w	r2, #2
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 f98c 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011da:	f7ff fcb1 	bl	8000b40 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <HAL_UART_MspInit+0xdc>)
 80011e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e4:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <HAL_UART_MspInit+0xdc>)
 80011e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_UART_MspInit+0xdc>)
 80011f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_UART_MspInit+0xdc>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001202:	4a18      	ldr	r2, [pc, #96]	; (8001264 <HAL_UART_MspInit+0xdc>)
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_UART_MspInit+0xdc>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800121a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001234:	2307      	movs	r3, #7
 8001236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <HAL_UART_MspInit+0xe0>)
 8001242:	f000 ff4f 	bl	80020e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2027      	movs	r0, #39	; 0x27
 800124c:	f000 f9b1 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001250:	2027      	movs	r0, #39	; 0x27
 8001252:	f000 f9c8 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001256:	bf00      	nop
 8001258:	37e8      	adds	r7, #232	; 0xe8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40004800 	.word	0x40004800
 8001264:	58024400 	.word	0x58024400
 8001268:	58020c00 	.word	0x58020c00

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001270:	f7ff fdd2 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	; (80012b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f006 fff1 	bl	8008280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff fbbd 	bl	8000a1c <main>
  bx  lr
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012ac:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80012b0:	080084ac 	.word	0x080084ac
  ldr r2, =_sbss
 80012b4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80012b8:	240001f4 	.word	0x240001f4

080012bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC3_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c6:	2003      	movs	r0, #3
 80012c8:	f000 f968 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012cc:	f001 ff38 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_Init+0x68>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	4913      	ldr	r1, [pc, #76]	; (800132c <HAL_Init+0x6c>)
 80012de:	5ccb      	ldrb	r3, [r1, r3]
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_Init+0x68>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_Init+0x6c>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_Init+0x70>)
 8001302:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_Init+0x74>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f814 	bl	8001338 <HAL_InitTick>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e002      	b.n	8001320 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800131a:	f7ff fc17 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	58024400 	.word	0x58024400
 800132c:	08008464 	.word	0x08008464
 8001330:	24000004 	.word	0x24000004
 8001334:	24000000 	.word	0x24000000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_InitTick+0x60>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e021      	b.n	8001390 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_InitTick+0x64>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_InitTick+0x60>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f94d 	bl	8001602 <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f917 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x68>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2400000c 	.word	0x2400000c
 800139c:	24000000 	.word	0x24000000
 80013a0:	24000008 	.word	0x24000008

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	2400000c 	.word	0x2400000c
 80013c8:	240001e0 	.word	0x240001e0

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	240001e0 	.word	0x240001e0

080013e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_GetREVID+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	0c1b      	lsrs	r3, r3, #16
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	5c001000 	.word	0x5c001000

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <__NVIC_SetPriorityGrouping+0x40>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	4313      	orrs	r3, r2
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x40>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00
 8001440:	05fa0000 	.word	0x05fa0000

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <__NVIC_EnableIRQ+0x38>)
 800147a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff8e 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff29 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff40 	bl	8001444 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff90 	bl	80014f0 <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5f 	bl	800149c <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff33 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa4 	bl	8001558 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff fed2 	bl	80013cc <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e2dc      	b.n	8001bee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d008      	beq.n	8001652 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e2cd      	b.n	8001bee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a76      	ldr	r2, [pc, #472]	; (8001830 <HAL_DMA_Abort+0x214>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d04a      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a74      	ldr	r2, [pc, #464]	; (8001834 <HAL_DMA_Abort+0x218>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d045      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a73      	ldr	r2, [pc, #460]	; (8001838 <HAL_DMA_Abort+0x21c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d040      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a71      	ldr	r2, [pc, #452]	; (800183c <HAL_DMA_Abort+0x220>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d03b      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a70      	ldr	r2, [pc, #448]	; (8001840 <HAL_DMA_Abort+0x224>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d036      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a6e      	ldr	r2, [pc, #440]	; (8001844 <HAL_DMA_Abort+0x228>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d031      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6d      	ldr	r2, [pc, #436]	; (8001848 <HAL_DMA_Abort+0x22c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d02c      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a6b      	ldr	r2, [pc, #428]	; (800184c <HAL_DMA_Abort+0x230>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d027      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a6a      	ldr	r2, [pc, #424]	; (8001850 <HAL_DMA_Abort+0x234>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d022      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a68      	ldr	r2, [pc, #416]	; (8001854 <HAL_DMA_Abort+0x238>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01d      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a67      	ldr	r2, [pc, #412]	; (8001858 <HAL_DMA_Abort+0x23c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d018      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a65      	ldr	r2, [pc, #404]	; (800185c <HAL_DMA_Abort+0x240>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a64      	ldr	r2, [pc, #400]	; (8001860 <HAL_DMA_Abort+0x244>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00e      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a62      	ldr	r2, [pc, #392]	; (8001864 <HAL_DMA_Abort+0x248>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d009      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a61      	ldr	r2, [pc, #388]	; (8001868 <HAL_DMA_Abort+0x24c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d004      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a5f      	ldr	r2, [pc, #380]	; (800186c <HAL_DMA_Abort+0x250>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_DMA_Abort+0xda>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_DMA_Abort+0xdc>
 80016f6:	2300      	movs	r3, #0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 021e 	bic.w	r2, r2, #30
 800170a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800171a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e00a      	b.n	800173a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 020e 	bic.w	r2, r2, #14
 8001732:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a3c      	ldr	r2, [pc, #240]	; (8001830 <HAL_DMA_Abort+0x214>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d072      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a3a      	ldr	r2, [pc, #232]	; (8001834 <HAL_DMA_Abort+0x218>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d06d      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a39      	ldr	r2, [pc, #228]	; (8001838 <HAL_DMA_Abort+0x21c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d068      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a37      	ldr	r2, [pc, #220]	; (800183c <HAL_DMA_Abort+0x220>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d063      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a36      	ldr	r2, [pc, #216]	; (8001840 <HAL_DMA_Abort+0x224>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d05e      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a34      	ldr	r2, [pc, #208]	; (8001844 <HAL_DMA_Abort+0x228>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d059      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a33      	ldr	r2, [pc, #204]	; (8001848 <HAL_DMA_Abort+0x22c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d054      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a31      	ldr	r2, [pc, #196]	; (800184c <HAL_DMA_Abort+0x230>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d04f      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a30      	ldr	r2, [pc, #192]	; (8001850 <HAL_DMA_Abort+0x234>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d04a      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2e      	ldr	r2, [pc, #184]	; (8001854 <HAL_DMA_Abort+0x238>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d045      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <HAL_DMA_Abort+0x23c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d040      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2b      	ldr	r2, [pc, #172]	; (800185c <HAL_DMA_Abort+0x240>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d03b      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <HAL_DMA_Abort+0x244>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d036      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a28      	ldr	r2, [pc, #160]	; (8001864 <HAL_DMA_Abort+0x248>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d031      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a27      	ldr	r2, [pc, #156]	; (8001868 <HAL_DMA_Abort+0x24c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d02c      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a25      	ldr	r2, [pc, #148]	; (800186c <HAL_DMA_Abort+0x250>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d027      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a24      	ldr	r2, [pc, #144]	; (8001870 <HAL_DMA_Abort+0x254>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d022      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a22      	ldr	r2, [pc, #136]	; (8001874 <HAL_DMA_Abort+0x258>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01d      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a21      	ldr	r2, [pc, #132]	; (8001878 <HAL_DMA_Abort+0x25c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d018      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1f      	ldr	r2, [pc, #124]	; (800187c <HAL_DMA_Abort+0x260>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <HAL_DMA_Abort+0x264>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00e      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <HAL_DMA_Abort+0x268>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d009      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_DMA_Abort+0x26c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d004      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_DMA_Abort+0x270>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d132      	bne.n	8001890 <HAL_DMA_Abort+0x274>
 800182a:	2301      	movs	r3, #1
 800182c:	e031      	b.n	8001892 <HAL_DMA_Abort+0x276>
 800182e:	bf00      	nop
 8001830:	40020010 	.word	0x40020010
 8001834:	40020028 	.word	0x40020028
 8001838:	40020040 	.word	0x40020040
 800183c:	40020058 	.word	0x40020058
 8001840:	40020070 	.word	0x40020070
 8001844:	40020088 	.word	0x40020088
 8001848:	400200a0 	.word	0x400200a0
 800184c:	400200b8 	.word	0x400200b8
 8001850:	40020410 	.word	0x40020410
 8001854:	40020428 	.word	0x40020428
 8001858:	40020440 	.word	0x40020440
 800185c:	40020458 	.word	0x40020458
 8001860:	40020470 	.word	0x40020470
 8001864:	40020488 	.word	0x40020488
 8001868:	400204a0 	.word	0x400204a0
 800186c:	400204b8 	.word	0x400204b8
 8001870:	58025408 	.word	0x58025408
 8001874:	5802541c 	.word	0x5802541c
 8001878:	58025430 	.word	0x58025430
 800187c:	58025444 	.word	0x58025444
 8001880:	58025458 	.word	0x58025458
 8001884:	5802546c 	.word	0x5802546c
 8001888:	58025480 	.word	0x58025480
 800188c:	58025494 	.word	0x58025494
 8001890:	2300      	movs	r3, #0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6d      	ldr	r2, [pc, #436]	; (8001a60 <HAL_DMA_Abort+0x444>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d04a      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6b      	ldr	r2, [pc, #428]	; (8001a64 <HAL_DMA_Abort+0x448>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d045      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6a      	ldr	r2, [pc, #424]	; (8001a68 <HAL_DMA_Abort+0x44c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d040      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a68      	ldr	r2, [pc, #416]	; (8001a6c <HAL_DMA_Abort+0x450>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d03b      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a67      	ldr	r2, [pc, #412]	; (8001a70 <HAL_DMA_Abort+0x454>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d036      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a65      	ldr	r2, [pc, #404]	; (8001a74 <HAL_DMA_Abort+0x458>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d031      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a64      	ldr	r2, [pc, #400]	; (8001a78 <HAL_DMA_Abort+0x45c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d02c      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a62      	ldr	r2, [pc, #392]	; (8001a7c <HAL_DMA_Abort+0x460>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d027      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a61      	ldr	r2, [pc, #388]	; (8001a80 <HAL_DMA_Abort+0x464>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d022      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a5f      	ldr	r2, [pc, #380]	; (8001a84 <HAL_DMA_Abort+0x468>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01d      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5e      	ldr	r2, [pc, #376]	; (8001a88 <HAL_DMA_Abort+0x46c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d018      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a5c      	ldr	r2, [pc, #368]	; (8001a8c <HAL_DMA_Abort+0x470>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a5b      	ldr	r2, [pc, #364]	; (8001a90 <HAL_DMA_Abort+0x474>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00e      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a59      	ldr	r2, [pc, #356]	; (8001a94 <HAL_DMA_Abort+0x478>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d009      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a58      	ldr	r2, [pc, #352]	; (8001a98 <HAL_DMA_Abort+0x47c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d004      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a56      	ldr	r2, [pc, #344]	; (8001a9c <HAL_DMA_Abort+0x480>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d108      	bne.n	8001958 <HAL_DMA_Abort+0x33c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e007      	b.n	8001968 <HAL_DMA_Abort+0x34c>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001968:	e013      	b.n	8001992 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800196a:	f7ff fd2f 	bl	80013cc <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b05      	cmp	r3, #5
 8001976:	d90c      	bls.n	8001992 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2220      	movs	r2, #32
 800197c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e12d      	b.n	8001bee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1e5      	bne.n	800196a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <HAL_DMA_Abort+0x444>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d04a      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <HAL_DMA_Abort+0x448>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d045      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a2c      	ldr	r2, [pc, #176]	; (8001a68 <HAL_DMA_Abort+0x44c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d040      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <HAL_DMA_Abort+0x450>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d03b      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_DMA_Abort+0x454>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d036      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_DMA_Abort+0x458>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d031      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a26      	ldr	r2, [pc, #152]	; (8001a78 <HAL_DMA_Abort+0x45c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d02c      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <HAL_DMA_Abort+0x460>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d027      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <HAL_DMA_Abort+0x464>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <HAL_DMA_Abort+0x468>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01d      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a20      	ldr	r2, [pc, #128]	; (8001a88 <HAL_DMA_Abort+0x46c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d018      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_DMA_Abort+0x470>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <HAL_DMA_Abort+0x474>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00e      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <HAL_DMA_Abort+0x478>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d009      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1a      	ldr	r2, [pc, #104]	; (8001a98 <HAL_DMA_Abort+0x47c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d004      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <HAL_DMA_Abort+0x480>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_DMA_Abort+0x426>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_DMA_Abort+0x428>
 8001a42:	2300      	movs	r3, #0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d02b      	beq.n	8001aa0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	223f      	movs	r2, #63	; 0x3f
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	e02a      	b.n	8001ab6 <HAL_DMA_Abort+0x49a>
 8001a60:	40020010 	.word	0x40020010
 8001a64:	40020028 	.word	0x40020028
 8001a68:	40020040 	.word	0x40020040
 8001a6c:	40020058 	.word	0x40020058
 8001a70:	40020070 	.word	0x40020070
 8001a74:	40020088 	.word	0x40020088
 8001a78:	400200a0 	.word	0x400200a0
 8001a7c:	400200b8 	.word	0x400200b8
 8001a80:	40020410 	.word	0x40020410
 8001a84:	40020428 	.word	0x40020428
 8001a88:	40020440 	.word	0x40020440
 8001a8c:	40020458 	.word	0x40020458
 8001a90:	40020470 	.word	0x40020470
 8001a94:	40020488 	.word	0x40020488
 8001a98:	400204a0 	.word	0x400204a0
 8001a9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2201      	movs	r2, #1
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a4f      	ldr	r2, [pc, #316]	; (8001bf8 <HAL_DMA_Abort+0x5dc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d072      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a4d      	ldr	r2, [pc, #308]	; (8001bfc <HAL_DMA_Abort+0x5e0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d06d      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a4c      	ldr	r2, [pc, #304]	; (8001c00 <HAL_DMA_Abort+0x5e4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d068      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a4a      	ldr	r2, [pc, #296]	; (8001c04 <HAL_DMA_Abort+0x5e8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d063      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a49      	ldr	r2, [pc, #292]	; (8001c08 <HAL_DMA_Abort+0x5ec>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d05e      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a47      	ldr	r2, [pc, #284]	; (8001c0c <HAL_DMA_Abort+0x5f0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d059      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a46      	ldr	r2, [pc, #280]	; (8001c10 <HAL_DMA_Abort+0x5f4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d054      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a44      	ldr	r2, [pc, #272]	; (8001c14 <HAL_DMA_Abort+0x5f8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d04f      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a43      	ldr	r2, [pc, #268]	; (8001c18 <HAL_DMA_Abort+0x5fc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d04a      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a41      	ldr	r2, [pc, #260]	; (8001c1c <HAL_DMA_Abort+0x600>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d045      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a40      	ldr	r2, [pc, #256]	; (8001c20 <HAL_DMA_Abort+0x604>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d040      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a3e      	ldr	r2, [pc, #248]	; (8001c24 <HAL_DMA_Abort+0x608>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d03b      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a3d      	ldr	r2, [pc, #244]	; (8001c28 <HAL_DMA_Abort+0x60c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d036      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	; (8001c2c <HAL_DMA_Abort+0x610>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d031      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a3a      	ldr	r2, [pc, #232]	; (8001c30 <HAL_DMA_Abort+0x614>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d02c      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a38      	ldr	r2, [pc, #224]	; (8001c34 <HAL_DMA_Abort+0x618>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d027      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a37      	ldr	r2, [pc, #220]	; (8001c38 <HAL_DMA_Abort+0x61c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d022      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a35      	ldr	r2, [pc, #212]	; (8001c3c <HAL_DMA_Abort+0x620>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01d      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a34      	ldr	r2, [pc, #208]	; (8001c40 <HAL_DMA_Abort+0x624>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d018      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a32      	ldr	r2, [pc, #200]	; (8001c44 <HAL_DMA_Abort+0x628>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a31      	ldr	r2, [pc, #196]	; (8001c48 <HAL_DMA_Abort+0x62c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00e      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2f      	ldr	r2, [pc, #188]	; (8001c4c <HAL_DMA_Abort+0x630>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d009      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2e      	ldr	r2, [pc, #184]	; (8001c50 <HAL_DMA_Abort+0x634>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d004      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2c      	ldr	r2, [pc, #176]	; (8001c54 <HAL_DMA_Abort+0x638>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_DMA_Abort+0x58e>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_DMA_Abort+0x590>
 8001baa:	2300      	movs	r3, #0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d015      	beq.n	8001bdc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bb8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00c      	beq.n	8001bdc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bda:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40020010 	.word	0x40020010
 8001bfc:	40020028 	.word	0x40020028
 8001c00:	40020040 	.word	0x40020040
 8001c04:	40020058 	.word	0x40020058
 8001c08:	40020070 	.word	0x40020070
 8001c0c:	40020088 	.word	0x40020088
 8001c10:	400200a0 	.word	0x400200a0
 8001c14:	400200b8 	.word	0x400200b8
 8001c18:	40020410 	.word	0x40020410
 8001c1c:	40020428 	.word	0x40020428
 8001c20:	40020440 	.word	0x40020440
 8001c24:	40020458 	.word	0x40020458
 8001c28:	40020470 	.word	0x40020470
 8001c2c:	40020488 	.word	0x40020488
 8001c30:	400204a0 	.word	0x400204a0
 8001c34:	400204b8 	.word	0x400204b8
 8001c38:	58025408 	.word	0x58025408
 8001c3c:	5802541c 	.word	0x5802541c
 8001c40:	58025430 	.word	0x58025430
 8001c44:	58025444 	.word	0x58025444
 8001c48:	58025458 	.word	0x58025458
 8001c4c:	5802546c 	.word	0x5802546c
 8001c50:	58025480 	.word	0x58025480
 8001c54:	58025494 	.word	0x58025494

08001c58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e237      	b.n	80020da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d004      	beq.n	8001c80 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e22c      	b.n	80020da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a5c      	ldr	r2, [pc, #368]	; (8001df8 <HAL_DMA_Abort_IT+0x1a0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d04a      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a5b      	ldr	r2, [pc, #364]	; (8001dfc <HAL_DMA_Abort_IT+0x1a4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d045      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a59      	ldr	r2, [pc, #356]	; (8001e00 <HAL_DMA_Abort_IT+0x1a8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d040      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_DMA_Abort_IT+0x1ac>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d03b      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a56      	ldr	r2, [pc, #344]	; (8001e08 <HAL_DMA_Abort_IT+0x1b0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d036      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a55      	ldr	r2, [pc, #340]	; (8001e0c <HAL_DMA_Abort_IT+0x1b4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d031      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a53      	ldr	r2, [pc, #332]	; (8001e10 <HAL_DMA_Abort_IT+0x1b8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d02c      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_DMA_Abort_IT+0x1bc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d027      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a50      	ldr	r2, [pc, #320]	; (8001e18 <HAL_DMA_Abort_IT+0x1c0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d022      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a4f      	ldr	r2, [pc, #316]	; (8001e1c <HAL_DMA_Abort_IT+0x1c4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d01d      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <HAL_DMA_Abort_IT+0x1c8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d018      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_DMA_Abort_IT+0x1cc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a4a      	ldr	r2, [pc, #296]	; (8001e28 <HAL_DMA_Abort_IT+0x1d0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00e      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a49      	ldr	r2, [pc, #292]	; (8001e2c <HAL_DMA_Abort_IT+0x1d4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a47      	ldr	r2, [pc, #284]	; (8001e30 <HAL_DMA_Abort_IT+0x1d8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_DMA_Abort_IT+0x1dc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_DMA_Abort_IT+0xcc>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_DMA_Abort_IT+0xce>
 8001d24:	2300      	movs	r3, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8086 	beq.w	8001e38 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2f      	ldr	r2, [pc, #188]	; (8001df8 <HAL_DMA_Abort_IT+0x1a0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d04a      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2e      	ldr	r2, [pc, #184]	; (8001dfc <HAL_DMA_Abort_IT+0x1a4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d045      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <HAL_DMA_Abort_IT+0x1a8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d040      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <HAL_DMA_Abort_IT+0x1ac>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d03b      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a29      	ldr	r2, [pc, #164]	; (8001e08 <HAL_DMA_Abort_IT+0x1b0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d036      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <HAL_DMA_Abort_IT+0x1b4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d031      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <HAL_DMA_Abort_IT+0x1b8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d02c      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_DMA_Abort_IT+0x1bc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d027      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <HAL_DMA_Abort_IT+0x1c0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d022      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <HAL_DMA_Abort_IT+0x1c4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d01d      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a20      	ldr	r2, [pc, #128]	; (8001e20 <HAL_DMA_Abort_IT+0x1c8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d018      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_DMA_Abort_IT+0x1cc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_DMA_Abort_IT+0x1d0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00e      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_DMA_Abort_IT+0x1d4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d009      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <HAL_DMA_Abort_IT+0x1d8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_DMA_Abort_IT+0x1dc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d108      	bne.n	8001de6 <HAL_DMA_Abort_IT+0x18e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e178      	b.n	80020d8 <HAL_DMA_Abort_IT+0x480>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e16f      	b.n	80020d8 <HAL_DMA_Abort_IT+0x480>
 8001df8:	40020010 	.word	0x40020010
 8001dfc:	40020028 	.word	0x40020028
 8001e00:	40020040 	.word	0x40020040
 8001e04:	40020058 	.word	0x40020058
 8001e08:	40020070 	.word	0x40020070
 8001e0c:	40020088 	.word	0x40020088
 8001e10:	400200a0 	.word	0x400200a0
 8001e14:	400200b8 	.word	0x400200b8
 8001e18:	40020410 	.word	0x40020410
 8001e1c:	40020428 	.word	0x40020428
 8001e20:	40020440 	.word	0x40020440
 8001e24:	40020458 	.word	0x40020458
 8001e28:	40020470 	.word	0x40020470
 8001e2c:	40020488 	.word	0x40020488
 8001e30:	400204a0 	.word	0x400204a0
 8001e34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 020e 	bic.w	r2, r2, #14
 8001e46:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6c      	ldr	r2, [pc, #432]	; (8002000 <HAL_DMA_Abort_IT+0x3a8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d04a      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6b      	ldr	r2, [pc, #428]	; (8002004 <HAL_DMA_Abort_IT+0x3ac>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d045      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a69      	ldr	r2, [pc, #420]	; (8002008 <HAL_DMA_Abort_IT+0x3b0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d040      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a68      	ldr	r2, [pc, #416]	; (800200c <HAL_DMA_Abort_IT+0x3b4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d03b      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a66      	ldr	r2, [pc, #408]	; (8002010 <HAL_DMA_Abort_IT+0x3b8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d036      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a65      	ldr	r2, [pc, #404]	; (8002014 <HAL_DMA_Abort_IT+0x3bc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d031      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a63      	ldr	r2, [pc, #396]	; (8002018 <HAL_DMA_Abort_IT+0x3c0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d02c      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a62      	ldr	r2, [pc, #392]	; (800201c <HAL_DMA_Abort_IT+0x3c4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d027      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a60      	ldr	r2, [pc, #384]	; (8002020 <HAL_DMA_Abort_IT+0x3c8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d022      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5f      	ldr	r2, [pc, #380]	; (8002024 <HAL_DMA_Abort_IT+0x3cc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d01d      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <HAL_DMA_Abort_IT+0x3d0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d018      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5c      	ldr	r2, [pc, #368]	; (800202c <HAL_DMA_Abort_IT+0x3d4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a5a      	ldr	r2, [pc, #360]	; (8002030 <HAL_DMA_Abort_IT+0x3d8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a59      	ldr	r2, [pc, #356]	; (8002034 <HAL_DMA_Abort_IT+0x3dc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a57      	ldr	r2, [pc, #348]	; (8002038 <HAL_DMA_Abort_IT+0x3e0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a56      	ldr	r2, [pc, #344]	; (800203c <HAL_DMA_Abort_IT+0x3e4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d108      	bne.n	8001efa <HAL_DMA_Abort_IT+0x2a2>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e007      	b.n	8001f0a <HAL_DMA_Abort_IT+0x2b2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a3c      	ldr	r2, [pc, #240]	; (8002000 <HAL_DMA_Abort_IT+0x3a8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d072      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <HAL_DMA_Abort_IT+0x3ac>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d06d      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a39      	ldr	r2, [pc, #228]	; (8002008 <HAL_DMA_Abort_IT+0x3b0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d068      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a37      	ldr	r2, [pc, #220]	; (800200c <HAL_DMA_Abort_IT+0x3b4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d063      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a36      	ldr	r2, [pc, #216]	; (8002010 <HAL_DMA_Abort_IT+0x3b8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d05e      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a34      	ldr	r2, [pc, #208]	; (8002014 <HAL_DMA_Abort_IT+0x3bc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d059      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a33      	ldr	r2, [pc, #204]	; (8002018 <HAL_DMA_Abort_IT+0x3c0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d054      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a31      	ldr	r2, [pc, #196]	; (800201c <HAL_DMA_Abort_IT+0x3c4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d04f      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a30      	ldr	r2, [pc, #192]	; (8002020 <HAL_DMA_Abort_IT+0x3c8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04a      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2e      	ldr	r2, [pc, #184]	; (8002024 <HAL_DMA_Abort_IT+0x3cc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d045      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2d      	ldr	r2, [pc, #180]	; (8002028 <HAL_DMA_Abort_IT+0x3d0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d040      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	; (800202c <HAL_DMA_Abort_IT+0x3d4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d03b      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <HAL_DMA_Abort_IT+0x3d8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d036      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a28      	ldr	r2, [pc, #160]	; (8002034 <HAL_DMA_Abort_IT+0x3dc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d031      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a27      	ldr	r2, [pc, #156]	; (8002038 <HAL_DMA_Abort_IT+0x3e0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d02c      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a25      	ldr	r2, [pc, #148]	; (800203c <HAL_DMA_Abort_IT+0x3e4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d027      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a24      	ldr	r2, [pc, #144]	; (8002040 <HAL_DMA_Abort_IT+0x3e8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a22      	ldr	r2, [pc, #136]	; (8002044 <HAL_DMA_Abort_IT+0x3ec>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01d      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a21      	ldr	r2, [pc, #132]	; (8002048 <HAL_DMA_Abort_IT+0x3f0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d018      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	; (800204c <HAL_DMA_Abort_IT+0x3f4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_DMA_Abort_IT+0x3f8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00e      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <HAL_DMA_Abort_IT+0x3fc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <HAL_DMA_Abort_IT+0x400>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d004      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_DMA_Abort_IT+0x404>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d132      	bne.n	8002060 <HAL_DMA_Abort_IT+0x408>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e031      	b.n	8002062 <HAL_DMA_Abort_IT+0x40a>
 8001ffe:	bf00      	nop
 8002000:	40020010 	.word	0x40020010
 8002004:	40020028 	.word	0x40020028
 8002008:	40020040 	.word	0x40020040
 800200c:	40020058 	.word	0x40020058
 8002010:	40020070 	.word	0x40020070
 8002014:	40020088 	.word	0x40020088
 8002018:	400200a0 	.word	0x400200a0
 800201c:	400200b8 	.word	0x400200b8
 8002020:	40020410 	.word	0x40020410
 8002024:	40020428 	.word	0x40020428
 8002028:	40020440 	.word	0x40020440
 800202c:	40020458 	.word	0x40020458
 8002030:	40020470 	.word	0x40020470
 8002034:	40020488 	.word	0x40020488
 8002038:	400204a0 	.word	0x400204a0
 800203c:	400204b8 	.word	0x400204b8
 8002040:	58025408 	.word	0x58025408
 8002044:	5802541c 	.word	0x5802541c
 8002048:	58025430 	.word	0x58025430
 800204c:	58025444 	.word	0x58025444
 8002050:	58025458 	.word	0x58025458
 8002054:	5802546c 	.word	0x5802546c
 8002058:	58025480 	.word	0x58025480
 800205c:	58025494 	.word	0x58025494
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d028      	beq.n	80020b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002074:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	2201      	movs	r2, #1
 8002086:	409a      	lsls	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002094:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020f2:	4b89      	ldr	r3, [pc, #548]	; (8002318 <HAL_GPIO_Init+0x234>)
 80020f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020f6:	e194      	b.n	8002422 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8186 	beq.w	800241c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d005      	beq.n	8002128 <HAL_GPIO_Init+0x44>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d130      	bne.n	800218a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215e:	2201      	movs	r2, #1
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f003 0201 	and.w	r2, r3, #1
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b03      	cmp	r3, #3
 8002194:	d017      	beq.n	80021c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d123      	bne.n	800221a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	69b9      	ldr	r1, [r7, #24]
 8002216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0203 	and.w	r2, r3, #3
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80e0 	beq.w	800241c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225c:	4b2f      	ldr	r3, [pc, #188]	; (800231c <HAL_GPIO_Init+0x238>)
 800225e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002262:	4a2e      	ldr	r2, [pc, #184]	; (800231c <HAL_GPIO_Init+0x238>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_GPIO_Init+0x238>)
 800226e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800227a:	4a29      	ldr	r2, [pc, #164]	; (8002320 <HAL_GPIO_Init+0x23c>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a20      	ldr	r2, [pc, #128]	; (8002324 <HAL_GPIO_Init+0x240>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d052      	beq.n	800234c <HAL_GPIO_Init+0x268>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <HAL_GPIO_Init+0x244>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d031      	beq.n	8002312 <HAL_GPIO_Init+0x22e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1e      	ldr	r2, [pc, #120]	; (800232c <HAL_GPIO_Init+0x248>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d02b      	beq.n	800230e <HAL_GPIO_Init+0x22a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_GPIO_Init+0x24c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d025      	beq.n	800230a <HAL_GPIO_Init+0x226>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <HAL_GPIO_Init+0x250>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <HAL_GPIO_Init+0x222>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <HAL_GPIO_Init+0x254>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d019      	beq.n	8002302 <HAL_GPIO_Init+0x21e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1a      	ldr	r2, [pc, #104]	; (800233c <HAL_GPIO_Init+0x258>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0x21a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a19      	ldr	r2, [pc, #100]	; (8002340 <HAL_GPIO_Init+0x25c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00d      	beq.n	80022fa <HAL_GPIO_Init+0x216>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_GPIO_Init+0x260>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0x212>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a17      	ldr	r2, [pc, #92]	; (8002348 <HAL_GPIO_Init+0x264>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_Init+0x20e>
 80022ee:	2309      	movs	r3, #9
 80022f0:	e02d      	b.n	800234e <HAL_GPIO_Init+0x26a>
 80022f2:	230a      	movs	r3, #10
 80022f4:	e02b      	b.n	800234e <HAL_GPIO_Init+0x26a>
 80022f6:	2308      	movs	r3, #8
 80022f8:	e029      	b.n	800234e <HAL_GPIO_Init+0x26a>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e027      	b.n	800234e <HAL_GPIO_Init+0x26a>
 80022fe:	2306      	movs	r3, #6
 8002300:	e025      	b.n	800234e <HAL_GPIO_Init+0x26a>
 8002302:	2305      	movs	r3, #5
 8002304:	e023      	b.n	800234e <HAL_GPIO_Init+0x26a>
 8002306:	2304      	movs	r3, #4
 8002308:	e021      	b.n	800234e <HAL_GPIO_Init+0x26a>
 800230a:	2303      	movs	r3, #3
 800230c:	e01f      	b.n	800234e <HAL_GPIO_Init+0x26a>
 800230e:	2302      	movs	r3, #2
 8002310:	e01d      	b.n	800234e <HAL_GPIO_Init+0x26a>
 8002312:	2301      	movs	r3, #1
 8002314:	e01b      	b.n	800234e <HAL_GPIO_Init+0x26a>
 8002316:	bf00      	nop
 8002318:	58000080 	.word	0x58000080
 800231c:	58024400 	.word	0x58024400
 8002320:	58000400 	.word	0x58000400
 8002324:	58020000 	.word	0x58020000
 8002328:	58020400 	.word	0x58020400
 800232c:	58020800 	.word	0x58020800
 8002330:	58020c00 	.word	0x58020c00
 8002334:	58021000 	.word	0x58021000
 8002338:	58021400 	.word	0x58021400
 800233c:	58021800 	.word	0x58021800
 8002340:	58021c00 	.word	0x58021c00
 8002344:	58022000 	.word	0x58022000
 8002348:	58022400 	.word	0x58022400
 800234c:	2300      	movs	r3, #0
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	f002 0203 	and.w	r2, r2, #3
 8002354:	0092      	lsls	r2, r2, #2
 8002356:	4093      	lsls	r3, r2
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800235e:	4938      	ldr	r1, [pc, #224]	; (8002440 <HAL_GPIO_Init+0x35c>)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	3301      	adds	r3, #1
 8002420:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f ae63 	bne.w	80020f8 <HAL_GPIO_Init+0x14>
  }
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	3724      	adds	r7, #36	; 0x24
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	58000400 	.word	0x58000400

08002444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002460:	e003      	b.n	800246a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	619a      	str	r2, [r3, #24]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43d9      	mvns	r1, r3
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	400b      	ands	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_PWREx_ConfigSupply+0x70>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d00a      	beq.n	80024d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_PWREx_ConfigSupply+0x70>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e01f      	b.n	8002512 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e01d      	b.n	8002512 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_PWREx_ConfigSupply+0x70>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f023 0207 	bic.w	r2, r3, #7
 80024de:	490f      	ldr	r1, [pc, #60]	; (800251c <HAL_PWREx_ConfigSupply+0x70>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024e6:	f7fe ff71 	bl	80013cc <HAL_GetTick>
 80024ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024ec:	e009      	b.n	8002502 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024ee:	f7fe ff6d 	bl	80013cc <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024fc:	d901      	bls.n	8002502 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e007      	b.n	8002512 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_PWREx_ConfigSupply+0x70>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800250a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250e:	d1ee      	bne.n	80024ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	58024800 	.word	0x58024800

08002520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	f000 bc48 	b.w	8002dc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8088 	beq.w	8002652 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002542:	4b99      	ldr	r3, [pc, #612]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800254c:	4b96      	ldr	r3, [pc, #600]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	2b10      	cmp	r3, #16
 8002556:	d007      	beq.n	8002568 <HAL_RCC_OscConfig+0x48>
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	2b18      	cmp	r3, #24
 800255c:	d111      	bne.n	8002582 <HAL_RCC_OscConfig+0x62>
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d10c      	bne.n	8002582 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	4b8f      	ldr	r3, [pc, #572]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d06d      	beq.n	8002650 <HAL_RCC_OscConfig+0x130>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d169      	bne.n	8002650 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	f000 bc21 	b.w	8002dc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x7a>
 800258c:	4b86      	ldr	r3, [pc, #536]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a85      	ldr	r2, [pc, #532]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	e02e      	b.n	80025f8 <HAL_RCC_OscConfig+0xd8>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x9c>
 80025a2:	4b81      	ldr	r3, [pc, #516]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a80      	ldr	r2, [pc, #512]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b7e      	ldr	r3, [pc, #504]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a7d      	ldr	r2, [pc, #500]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e01d      	b.n	80025f8 <HAL_RCC_OscConfig+0xd8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025c6:	4b78      	ldr	r3, [pc, #480]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a77      	ldr	r2, [pc, #476]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b75      	ldr	r3, [pc, #468]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a74      	ldr	r2, [pc, #464]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0xd8>
 80025e0:	4b71      	ldr	r3, [pc, #452]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a70      	ldr	r2, [pc, #448]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b6e      	ldr	r3, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a6d      	ldr	r2, [pc, #436]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80025f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fee4 	bl	80013cc <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe fee0 	bl	80013cc <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e3d4      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0xe8>
 8002626:	e014      	b.n	8002652 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7fe fed0 	bl	80013cc <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe fecc 	bl	80013cc <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e3c0      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002642:	4b59      	ldr	r3, [pc, #356]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x110>
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80ca 	beq.w	80027f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002660:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002668:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800266a:	4b4f      	ldr	r3, [pc, #316]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_RCC_OscConfig+0x166>
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	2b18      	cmp	r3, #24
 800267a:	d156      	bne.n	800272a <HAL_RCC_OscConfig+0x20a>
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d151      	bne.n	800272a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002686:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x17e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e392      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800269e:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0219 	bic.w	r2, r3, #25
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	493f      	ldr	r1, [pc, #252]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fe8c 	bl	80013cc <HAL_GetTick>
 80026b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b8:	f7fe fe88 	bl	80013cc <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e37c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	f7fe fe85 	bl	80013e4 <HAL_GetREVID>
 80026da:	4603      	mov	r3, r0
 80026dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d817      	bhi.n	8002714 <HAL_RCC_OscConfig+0x1f4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d108      	bne.n	80026fe <HAL_RCC_OscConfig+0x1de>
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026f4:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80026f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fc:	e07a      	b.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	031b      	lsls	r3, r3, #12
 800270c:	4926      	ldr	r1, [pc, #152]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002712:	e06f      	b.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	4921      	ldr	r1, [pc, #132]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002728:	e064      	b.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d047      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0219 	bic.w	r2, r3, #25
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	491a      	ldr	r1, [pc, #104]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fe42 	bl	80013cc <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274c:	f7fe fe3e 	bl	80013cc <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e332      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	f7fe fe3b 	bl	80013e4 <HAL_GetREVID>
 800276e:	4603      	mov	r3, r0
 8002770:	f241 0203 	movw	r2, #4099	; 0x1003
 8002774:	4293      	cmp	r3, r2
 8002776:	d819      	bhi.n	80027ac <HAL_RCC_OscConfig+0x28c>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d108      	bne.n	8002792 <HAL_RCC_OscConfig+0x272>
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 800278a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278e:	6053      	str	r3, [r2, #4]
 8002790:	e030      	b.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	031b      	lsls	r3, r3, #12
 80027a0:	4901      	ldr	r1, [pc, #4]	; (80027a8 <HAL_RCC_OscConfig+0x288>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
 80027a6:	e025      	b.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
 80027a8:	58024400 	.word	0x58024400
 80027ac:	4b9a      	ldr	r3, [pc, #616]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	061b      	lsls	r3, r3, #24
 80027ba:	4997      	ldr	r1, [pc, #604]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
 80027c0:	e018      	b.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c2:	4b95      	ldr	r3, [pc, #596]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a94      	ldr	r2, [pc, #592]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe fdfd 	bl	80013cc <HAL_GetTick>
 80027d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe fdf9 	bl	80013cc <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e2ed      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027e8:	4b8b      	ldr	r3, [pc, #556]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a9 	beq.w	8002954 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002802:	4b85      	ldr	r3, [pc, #532]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800280a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800280c:	4b82      	ldr	r3, [pc, #520]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d007      	beq.n	8002828 <HAL_RCC_OscConfig+0x308>
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b18      	cmp	r3, #24
 800281c:	d13a      	bne.n	8002894 <HAL_RCC_OscConfig+0x374>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d135      	bne.n	8002894 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002828:	4b7b      	ldr	r3, [pc, #492]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x320>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b80      	cmp	r3, #128	; 0x80
 800283a:	d001      	beq.n	8002840 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e2c1      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002840:	f7fe fdd0 	bl	80013e4 <HAL_GetREVID>
 8002844:	4603      	mov	r3, r0
 8002846:	f241 0203 	movw	r2, #4099	; 0x1003
 800284a:	4293      	cmp	r3, r2
 800284c:	d817      	bhi.n	800287e <HAL_RCC_OscConfig+0x35e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	2b20      	cmp	r3, #32
 8002854:	d108      	bne.n	8002868 <HAL_RCC_OscConfig+0x348>
 8002856:	4b70      	ldr	r3, [pc, #448]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800285e:	4a6e      	ldr	r2, [pc, #440]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002864:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002866:	e075      	b.n	8002954 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002868:	4b6b      	ldr	r3, [pc, #428]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	069b      	lsls	r3, r3, #26
 8002876:	4968      	ldr	r1, [pc, #416]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800287c:	e06a      	b.n	8002954 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800287e:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	061b      	lsls	r3, r3, #24
 800288c:	4962      	ldr	r1, [pc, #392]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002892:	e05f      	b.n	8002954 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d042      	beq.n	8002922 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800289c:	4b5e      	ldr	r3, [pc, #376]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5d      	ldr	r2, [pc, #372]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80028a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fd90 	bl	80013cc <HAL_GetTick>
 80028ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028b0:	f7fe fd8c 	bl	80013cc <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e280      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028c2:	4b55      	ldr	r3, [pc, #340]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ce:	f7fe fd89 	bl	80013e4 <HAL_GetREVID>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80028d8:	4293      	cmp	r3, r2
 80028da:	d817      	bhi.n	800290c <HAL_RCC_OscConfig+0x3ec>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d108      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3d6>
 80028e4:	4b4c      	ldr	r3, [pc, #304]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028ec:	4a4a      	ldr	r2, [pc, #296]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80028ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028f2:	6053      	str	r3, [r2, #4]
 80028f4:	e02e      	b.n	8002954 <HAL_RCC_OscConfig+0x434>
 80028f6:	4b48      	ldr	r3, [pc, #288]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	069b      	lsls	r3, r3, #26
 8002904:	4944      	ldr	r1, [pc, #272]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
 800290a:	e023      	b.n	8002954 <HAL_RCC_OscConfig+0x434>
 800290c:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	493f      	ldr	r1, [pc, #252]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	4313      	orrs	r3, r2
 800291e:	60cb      	str	r3, [r1, #12]
 8002920:	e018      	b.n	8002954 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a3c      	ldr	r2, [pc, #240]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 8002928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800292c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fd4d 	bl	80013cc <HAL_GetTick>
 8002932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002936:	f7fe fd49 	bl	80013cc <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e23d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002948:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d036      	beq.n	80029ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d019      	beq.n	800299c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296c:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe fd2a 	bl	80013cc <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297c:	f7fe fd26 	bl	80013cc <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e21a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800298e:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 8002990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x45c>
 800299a:	e018      	b.n	80029ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 800299e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a0:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe fd10 	bl	80013cc <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b0:	f7fe fd0c 	bl	80013cc <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e200      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80029c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d039      	beq.n	8002a4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01c      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 80029e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fced 	bl	80013cc <HAL_GetTick>
 80029f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029f6:	f7fe fce9 	bl	80013cc <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1dd      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_RCC_OscConfig+0x4f8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x4d6>
 8002a14:	e01b      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
 8002a16:	bf00      	nop
 8002a18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a1c:	4b9b      	ldr	r3, [pc, #620]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a9a      	ldr	r2, [pc, #616]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a28:	f7fe fcd0 	bl	80013cc <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a30:	f7fe fccc 	bl	80013cc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e1c0      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a42:	4b92      	ldr	r3, [pc, #584]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8081 	beq.w	8002b5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCC_OscConfig+0x770>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a8b      	ldr	r2, [pc, #556]	; (8002c90 <HAL_RCC_OscConfig+0x770>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a68:	f7fe fcb0 	bl	80013cc <HAL_GetTick>
 8002a6c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a70:	f7fe fcac 	bl	80013cc <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1a0      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a82:	4b83      	ldr	r3, [pc, #524]	; (8002c90 <HAL_RCC_OscConfig+0x770>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x584>
 8002a96:	4b7d      	ldr	r3, [pc, #500]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a7c      	ldr	r2, [pc, #496]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	e02d      	b.n	8002b00 <HAL_RCC_OscConfig+0x5e0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x5a6>
 8002aac:	4b77      	ldr	r3, [pc, #476]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a76      	ldr	r2, [pc, #472]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab8:	4b74      	ldr	r3, [pc, #464]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a73      	ldr	r2, [pc, #460]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002abe:	f023 0304 	bic.w	r3, r3, #4
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac4:	e01c      	b.n	8002b00 <HAL_RCC_OscConfig+0x5e0>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x5c8>
 8002ace:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a6e      	ldr	r2, [pc, #440]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a6b      	ldr	r2, [pc, #428]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0x5e0>
 8002ae8:	4b68      	ldr	r3, [pc, #416]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a67      	ldr	r2, [pc, #412]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	4b65      	ldr	r3, [pc, #404]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a64      	ldr	r2, [pc, #400]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fc60 	bl	80013cc <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7fe fc5c 	bl	80013cc <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e14e      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b26:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0ee      	beq.n	8002b10 <HAL_RCC_OscConfig+0x5f0>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe fc4a 	bl	80013cc <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fc46 	bl	80013cc <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e138      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b52:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ee      	bne.n	8002b3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 812d 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b68:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b70:	2b18      	cmp	r3, #24
 8002b72:	f000 80bd 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	f040 809e 	bne.w	8002cbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a41      	ldr	r2, [pc, #260]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fc1e 	bl	80013cc <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fc1a 	bl	80013cc <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e10e      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ba6:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bb6:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <HAL_RCC_OscConfig+0x774>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	4931      	ldr	r1, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	628b      	str	r3, [r1, #40]	; 0x28
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	025b      	lsls	r3, r3, #9
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bfc:	4923      	ldr	r1, [pc, #140]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c02:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c12:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_RCC_OscConfig+0x778>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c1a:	00d2      	lsls	r2, r2, #3
 8002c1c:	491b      	ldr	r1, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c22:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f023 020c 	bic.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4917      	ldr	r1, [pc, #92]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f023 0202 	bic.w	r2, r3, #2
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	4912      	ldr	r1, [pc, #72]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7fe fba3 	bl	80013cc <HAL_GetTick>
 8002c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c88:	e011      	b.n	8002cae <HAL_RCC_OscConfig+0x78e>
 8002c8a:	bf00      	nop
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	58024800 	.word	0x58024800
 8002c94:	fffffc0c 	.word	0xfffffc0c
 8002c98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe fb96 	bl	80013cc <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e08a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x77c>
 8002cba:	e082      	b.n	8002dc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbc:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a42      	ldr	r2, [pc, #264]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fb80 	bl	80013cc <HAL_GetTick>
 8002ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe fb7c 	bl	80013cc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e070      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce2:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x7b0>
 8002cee:	e068      	b.n	8002dc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cf6:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d031      	beq.n	8002d68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 0203 	and.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d12a      	bne.n	8002d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d122      	bne.n	8002d68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d11a      	bne.n	8002d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	0a5b      	lsrs	r3, r3, #9
 8002d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d111      	bne.n	8002d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	0c1b      	lsrs	r3, r3, #16
 8002d48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	0e1b      	lsrs	r3, r3, #24
 8002d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e02b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	08db      	lsrs	r3, r3, #3
 8002d72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d01f      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d8e:	f7fe fb1d 	bl	80013cc <HAL_GetTick>
 8002d92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d94:	bf00      	nop
 8002d96:	f7fe fb19 	bl	80013cc <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d0f9      	beq.n	8002d96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_RCC_OscConfig+0x8b0>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dae:	00d2      	lsls	r2, r2, #3
 8002db0:	4906      	ldr	r1, [pc, #24]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <HAL_RCC_OscConfig+0x8ac>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3730      	adds	r7, #48	; 0x30
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	58024400 	.word	0x58024400
 8002dd0:	ffff0007 	.word	0xffff0007

08002dd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e19c      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b8a      	ldr	r3, [pc, #552]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d910      	bls.n	8002e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b87      	ldr	r3, [pc, #540]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 020f 	bic.w	r2, r3, #15
 8002dfe:	4985      	ldr	r1, [pc, #532]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b83      	ldr	r3, [pc, #524]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e184      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	4b7b      	ldr	r3, [pc, #492]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d908      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e34:	4b78      	ldr	r3, [pc, #480]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4975      	ldr	r1, [pc, #468]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	4b70      	ldr	r3, [pc, #448]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d908      	bls.n	8002e74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e62:	4b6d      	ldr	r3, [pc, #436]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	496a      	ldr	r1, [pc, #424]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	4b64      	ldr	r3, [pc, #400]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d908      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e90:	4b61      	ldr	r3, [pc, #388]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	495e      	ldr	r1, [pc, #376]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d010      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d908      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ebe:	4b56      	ldr	r3, [pc, #344]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4953      	ldr	r1, [pc, #332]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	4b4d      	ldr	r3, [pc, #308]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d908      	bls.n	8002efe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eec:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f023 020f 	bic.w	r2, r3, #15
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4947      	ldr	r1, [pc, #284]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d055      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f0a:	4b43      	ldr	r3, [pc, #268]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	4940      	ldr	r1, [pc, #256]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f24:	4b3c      	ldr	r3, [pc, #240]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d121      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0f6      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f3c:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d115      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0ea      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f54:	4b30      	ldr	r3, [pc, #192]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0de      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0d6      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f74:	4b28      	ldr	r3, [pc, #160]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f023 0207 	bic.w	r2, r3, #7
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4925      	ldr	r1, [pc, #148]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f86:	f7fe fa21 	bl	80013cc <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8e:	f7fe fa1d 	bl	80013cc <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0be      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d1eb      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d010      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d208      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f023 020f 	bic.w	r2, r3, #15
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	490e      	ldr	r1, [pc, #56]	; (8003018 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d214      	bcs.n	800301c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 020f 	bic.w	r2, r3, #15
 8002ffa:	4906      	ldr	r1, [pc, #24]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <HAL_RCC_ClockConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e086      	b.n	8003122 <HAL_RCC_ClockConfig+0x34e>
 8003014:	52002000 	.word	0x52002000
 8003018:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d010      	beq.n	800304a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	4b3f      	ldr	r3, [pc, #252]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003034:	429a      	cmp	r2, r3
 8003036:	d208      	bcs.n	800304a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003038:	4b3c      	ldr	r3, [pc, #240]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	4939      	ldr	r1, [pc, #228]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 8003046:	4313      	orrs	r3, r2
 8003048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	4b34      	ldr	r3, [pc, #208]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003062:	429a      	cmp	r2, r3
 8003064:	d208      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	492e      	ldr	r1, [pc, #184]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 8003074:	4313      	orrs	r3, r2
 8003076:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003090:	429a      	cmp	r2, r3
 8003092:	d208      	bcs.n	80030a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003094:	4b25      	ldr	r3, [pc, #148]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	4922      	ldr	r1, [pc, #136]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030be:	429a      	cmp	r2, r3
 80030c0:	d208      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4917      	ldr	r1, [pc, #92]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030d4:	f000 f834 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	0a1b      	lsrs	r3, r3, #8
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	4912      	ldr	r1, [pc, #72]	; (8003130 <HAL_RCC_ClockConfig+0x35c>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <HAL_RCC_ClockConfig+0x358>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <HAL_RCC_ClockConfig+0x35c>)
 80030fc:	5cd3      	ldrb	r3, [r2, r3]
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x360>)
 800310a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800310c:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x364>)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x368>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe f90e 	bl	8001338 <HAL_InitTick>
 800311c:	4603      	mov	r3, r0
 800311e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	58024400 	.word	0x58024400
 8003130:	08008464 	.word	0x08008464
 8003134:	24000004 	.word	0x24000004
 8003138:	24000000 	.word	0x24000000
 800313c:	24000008 	.word	0x24000008

08003140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003146:	4bb3      	ldr	r3, [pc, #716]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800314e:	2b18      	cmp	r3, #24
 8003150:	f200 8155 	bhi.w	80033fe <HAL_RCC_GetSysClockFreq+0x2be>
 8003154:	a201      	add	r2, pc, #4	; (adr r2, 800315c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	080031c1 	.word	0x080031c1
 8003160:	080033ff 	.word	0x080033ff
 8003164:	080033ff 	.word	0x080033ff
 8003168:	080033ff 	.word	0x080033ff
 800316c:	080033ff 	.word	0x080033ff
 8003170:	080033ff 	.word	0x080033ff
 8003174:	080033ff 	.word	0x080033ff
 8003178:	080033ff 	.word	0x080033ff
 800317c:	080031e7 	.word	0x080031e7
 8003180:	080033ff 	.word	0x080033ff
 8003184:	080033ff 	.word	0x080033ff
 8003188:	080033ff 	.word	0x080033ff
 800318c:	080033ff 	.word	0x080033ff
 8003190:	080033ff 	.word	0x080033ff
 8003194:	080033ff 	.word	0x080033ff
 8003198:	080033ff 	.word	0x080033ff
 800319c:	080031ed 	.word	0x080031ed
 80031a0:	080033ff 	.word	0x080033ff
 80031a4:	080033ff 	.word	0x080033ff
 80031a8:	080033ff 	.word	0x080033ff
 80031ac:	080033ff 	.word	0x080033ff
 80031b0:	080033ff 	.word	0x080033ff
 80031b4:	080033ff 	.word	0x080033ff
 80031b8:	080033ff 	.word	0x080033ff
 80031bc:	080031f3 	.word	0x080031f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031c0:	4b94      	ldr	r3, [pc, #592]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031cc:	4b91      	ldr	r3, [pc, #580]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	08db      	lsrs	r3, r3, #3
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	4a90      	ldr	r2, [pc, #576]	; (8003418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031de:	e111      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031e0:	4b8d      	ldr	r3, [pc, #564]	; (8003418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031e2:	61bb      	str	r3, [r7, #24]
      break;
 80031e4:	e10e      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031e6:	4b8d      	ldr	r3, [pc, #564]	; (800341c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031e8:	61bb      	str	r3, [r7, #24]
      break;
 80031ea:	e10b      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031ec:	4b8c      	ldr	r3, [pc, #560]	; (8003420 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031ee:	61bb      	str	r3, [r7, #24]
      break;
 80031f0:	e108      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031f2:	4b88      	ldr	r3, [pc, #544]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031fc:	4b85      	ldr	r3, [pc, #532]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003206:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003208:	4b82      	ldr	r3, [pc, #520]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003212:	4b80      	ldr	r3, [pc, #512]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	08db      	lsrs	r3, r3, #3
 8003218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80e1 	beq.w	80033f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b02      	cmp	r3, #2
 800323a:	f000 8083 	beq.w	8003344 <HAL_RCC_GetSysClockFreq+0x204>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b02      	cmp	r3, #2
 8003242:	f200 80a1 	bhi.w	8003388 <HAL_RCC_GetSysClockFreq+0x248>
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x114>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d056      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003252:	e099      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003254:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02d      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003260:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	4a6b      	ldr	r2, [pc, #428]	; (8003418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800328a:	4b62      	ldr	r3, [pc, #392]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329a:	ed97 6a02 	vldr	s12, [r7, #8]
 800329e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032ba:	e087      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003428 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ce:	4b51      	ldr	r3, [pc, #324]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032de:	ed97 6a02 	vldr	s12, [r7, #8]
 80032e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032fe:	e065      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800342c <HAL_RCC_GetSysClockFreq+0x2ec>
 800330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003312:	4b40      	ldr	r3, [pc, #256]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003322:	ed97 6a02 	vldr	s12, [r7, #8]
 8003326:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003342:	e043      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003430 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a02 	vldr	s12, [r7, #8]
 800336a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003386:	e021      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	eddf 6a26 	vldr	s13, [pc, #152]	; 800342c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	0a5b      	lsrs	r3, r3, #9
 80033d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d6:	3301      	adds	r3, #1
 80033d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	ee07 3a90 	vmov	s15, r3
 80033e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80033e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f0:	ee17 3a90 	vmov	r3, s15
 80033f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033f6:	e005      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
      break;
 80033fc:	e002      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003400:	61bb      	str	r3, [r7, #24]
      break;
 8003402:	bf00      	nop
  }

  return sysclockfreq;
 8003404:	69bb      	ldr	r3, [r7, #24]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	58024400 	.word	0x58024400
 8003418:	03d09000 	.word	0x03d09000
 800341c:	003d0900 	.word	0x003d0900
 8003420:	007a1200 	.word	0x007a1200
 8003424:	46000000 	.word	0x46000000
 8003428:	4c742400 	.word	0x4c742400
 800342c:	4a742400 	.word	0x4a742400
 8003430:	4af42400 	.word	0x4af42400

08003434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800343a:	f7ff fe81 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 800343e:	4602      	mov	r2, r0
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_GetHCLKFreq+0x50>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	490f      	ldr	r1, [pc, #60]	; (8003488 <HAL_RCC_GetHCLKFreq+0x54>)
 800344c:	5ccb      	ldrb	r3, [r1, r3]
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_GetHCLKFreq+0x50>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	4a09      	ldr	r2, [pc, #36]	; (8003488 <HAL_RCC_GetHCLKFreq+0x54>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <HAL_RCC_GetHCLKFreq+0x58>)
 8003470:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003472:	4a07      	ldr	r2, [pc, #28]	; (8003490 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <HAL_RCC_GetHCLKFreq+0x58>)
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	58024400 	.word	0x58024400
 8003488:	08008464 	.word	0x08008464
 800348c:	24000004 	.word	0x24000004
 8003490:	24000000 	.word	0x24000000

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003498:	f7ff ffcc 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4904      	ldr	r1, [pc, #16]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	58024400 	.word	0x58024400
 80034bc:	08008464 	.word	0x08008464

080034c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034c4:	f7ff ffb6 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4904      	ldr	r1, [pc, #16]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034d6:	5ccb      	ldrb	r3, [r1, r3]
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	58024400 	.word	0x58024400
 80034e8:	08008464 	.word	0x08008464

080034ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f0:	b0ca      	sub	sp, #296	; 0x128
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003510:	2500      	movs	r5, #0
 8003512:	ea54 0305 	orrs.w	r3, r4, r5
 8003516:	d049      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800351c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800351e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003522:	d02f      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003524:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003528:	d828      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800352a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800352e:	d01a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003534:	d822      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800353a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800353e:	d007      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003540:	e01c      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003542:	4bb8      	ldr	r3, [pc, #736]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	4ab7      	ldr	r2, [pc, #732]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800354e:	e01a      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003554:	3308      	adds	r3, #8
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fc8f 	bl	8004e7c <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003564:	e00f      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356a:	3328      	adds	r3, #40	; 0x28
 800356c:	2102      	movs	r1, #2
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fd36 	bl	8004fe0 <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800357a:	e004      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003582:	e000      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800358e:	4ba5      	ldr	r3, [pc, #660]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003592:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800359c:	4aa1      	ldr	r2, [pc, #644]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800359e:	430b      	orrs	r3, r1
 80035a0:	6513      	str	r3, [r2, #80]	; 0x50
 80035a2:	e003      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80035b8:	f04f 0900 	mov.w	r9, #0
 80035bc:	ea58 0309 	orrs.w	r3, r8, r9
 80035c0:	d047      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d82a      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035cc:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	080035e9 	.word	0x080035e9
 80035d8:	080035f7 	.word	0x080035f7
 80035dc:	0800360d 	.word	0x0800360d
 80035e0:	0800362b 	.word	0x0800362b
 80035e4:	0800362b 	.word	0x0800362b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e8:	4b8e      	ldr	r3, [pc, #568]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	4a8d      	ldr	r2, [pc, #564]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f4:	e01a      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fa:	3308      	adds	r3, #8
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 fc3c 	bl	8004e7c <RCCEx_PLL2_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800360a:	e00f      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003610:	3328      	adds	r3, #40	; 0x28
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f001 fce3 	bl	8004fe0 <RCCEx_PLL3_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003620:	e004      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003628:	e000      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800362a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003634:	4b7b      	ldr	r3, [pc, #492]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	f023 0107 	bic.w	r1, r3, #7
 800363c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	4a78      	ldr	r2, [pc, #480]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003644:	430b      	orrs	r3, r1
 8003646:	6513      	str	r3, [r2, #80]	; 0x50
 8003648:	e003      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800364e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800365e:	f04f 0b00 	mov.w	fp, #0
 8003662:	ea5a 030b 	orrs.w	r3, sl, fp
 8003666:	d04c      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003672:	d030      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003678:	d829      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800367a:	2bc0      	cmp	r3, #192	; 0xc0
 800367c:	d02d      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800367e:	2bc0      	cmp	r3, #192	; 0xc0
 8003680:	d825      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d018      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003686:	2b80      	cmp	r3, #128	; 0x80
 8003688:	d821      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d007      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003692:	e01c      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003694:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	4a62      	ldr	r2, [pc, #392]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800369a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036a0:	e01c      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a6:	3308      	adds	r3, #8
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 fbe6 	bl	8004e7c <RCCEx_PLL2_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036b6:	e011      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036bc:	3328      	adds	r3, #40	; 0x28
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 fc8d 	bl	8004fe0 <RCCEx_PLL3_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036cc:	e006      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036d4:	e002      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036d6:	bf00      	nop
 80036d8:	e000      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036e4:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	4a4c      	ldr	r2, [pc, #304]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6513      	str	r3, [r2, #80]	; 0x50
 80036f8:	e003      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800370e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003718:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800371c:	460b      	mov	r3, r1
 800371e:	4313      	orrs	r3, r2
 8003720:	d053      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800372a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800372e:	d035      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003730:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003734:	d82e      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003736:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800373a:	d031      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800373c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003740:	d828      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003746:	d01a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374c:	d822      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003756:	d007      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003758:	e01c      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800375a:	4b32      	ldr	r3, [pc, #200]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	4a31      	ldr	r2, [pc, #196]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003764:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003766:	e01c      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376c:	3308      	adds	r3, #8
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f001 fb83 	bl	8004e7c <RCCEx_PLL2_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800377c:	e011      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003782:	3328      	adds	r3, #40	; 0x28
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f001 fc2a 	bl	8004fe0 <RCCEx_PLL3_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003792:	e006      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800379a:	e002      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037aa:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037ba:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037bc:	430b      	orrs	r3, r1
 80037be:	6593      	str	r3, [r2, #88]	; 0x58
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80037d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80037e4:	460b      	mov	r3, r1
 80037e6:	4313      	orrs	r3, r2
 80037e8:	d056      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f6:	d038      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037fc:	d831      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003802:	d034      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003804:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003808:	d82b      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800380a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800380e:	d01d      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003814:	d825      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d006      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800381a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003820:	e01f      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003822:	bf00      	nop
 8003824:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003828:	4ba2      	ldr	r3, [pc, #648]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4aa1      	ldr	r2, [pc, #644]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800382e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003834:	e01c      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383a:	3308      	adds	r3, #8
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fb1c 	bl	8004e7c <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800384a:	e011      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003850:	3328      	adds	r3, #40	; 0x28
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f001 fbc3 	bl	8004fe0 <RCCEx_PLL3_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003860:	e006      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003868:	e002      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800386a:	bf00      	nop
 800386c:	e000      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800386e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003878:	4b8e      	ldr	r3, [pc, #568]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003884:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003888:	4a8a      	ldr	r2, [pc, #552]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800388a:	430b      	orrs	r3, r1
 800388c:	6593      	str	r3, [r2, #88]	; 0x58
 800388e:	e003      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003894:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80038a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	d03a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	2b30      	cmp	r3, #48	; 0x30
 80038c0:	d01f      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80038c2:	2b30      	cmp	r3, #48	; 0x30
 80038c4:	d819      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d00c      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d815      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d019      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d111      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d6:	4b77      	ldr	r3, [pc, #476]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	4a76      	ldr	r2, [pc, #472]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038e2:	e011      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e8:	3308      	adds	r3, #8
 80038ea:	2102      	movs	r1, #2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fac5 	bl	8004e7c <RCCEx_PLL2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038f8:	e006      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003900:	e002      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003902:	bf00      	nop
 8003904:	e000      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003910:	4b68      	ldr	r3, [pc, #416]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	4a65      	ldr	r2, [pc, #404]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003920:	430b      	orrs	r3, r1
 8003922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003924:	e003      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800392a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800393a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800393e:	2300      	movs	r3, #0
 8003940:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003944:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003948:	460b      	mov	r3, r1
 800394a:	4313      	orrs	r3, r2
 800394c:	d051      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003958:	d035      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800395a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800395e:	d82e      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003964:	d031      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003966:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800396a:	d828      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800396c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003970:	d01a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003976:	d822      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d007      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003982:	e01c      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003984:	4b4b      	ldr	r3, [pc, #300]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	4a4a      	ldr	r2, [pc, #296]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800398a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003990:	e01c      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003996:	3308      	adds	r3, #8
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f001 fa6e 	bl	8004e7c <RCCEx_PLL2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039a6:	e011      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ac:	3328      	adds	r3, #40	; 0x28
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 fb15 	bl	8004fe0 <RCCEx_PLL3_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039bc:	e006      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039c4:	e002      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039c6:	bf00      	nop
 80039c8:	e000      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039d4:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	4a34      	ldr	r2, [pc, #208]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6513      	str	r3, [r2, #80]	; 0x50
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80039fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d056      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1c:	d033      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a22:	d82c      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a28:	d02f      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a2e:	d826      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a34:	d02b      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a3a:	d820      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a40:	d012      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a46:	d81a      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d022      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a50:	d115      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	3308      	adds	r3, #8
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 fa0e 	bl	8004e7c <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a66:	e015      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6c:	3328      	adds	r3, #40	; 0x28
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 fab5 	bl	8004fe0 <RCCEx_PLL3_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a84:	e006      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a86:	bf00      	nop
 8003a88:	e004      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a8a:	bf00      	nop
 8003a8c:	e002      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aaa:	4a02      	ldr	r2, [pc, #8]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6513      	str	r3, [r2, #80]	; 0x50
 8003ab0:	e006      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003ab2:	bf00      	nop
 8003ab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003abc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ad6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	d055      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aec:	d033      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af2:	d82c      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af8:	d02f      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d826      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b04:	d02b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b0a:	d820      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b10:	d012      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b16:	d81a      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d022      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b20:	d115      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b26:	3308      	adds	r3, #8
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f9a6 	bl	8004e7c <RCCEx_PLL2_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b36:	e015      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3c:	3328      	adds	r3, #40	; 0x28
 8003b3e:	2101      	movs	r1, #1
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 fa4d 	bl	8004fe0 <RCCEx_PLL3_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b56:	bf00      	nop
 8003b58:	e004      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b5a:	bf00      	nop
 8003b5c:	e002      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b5e:	bf00      	nop
 8003b60:	e000      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b6c:	4ba3      	ldr	r3, [pc, #652]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b7c:	4a9f      	ldr	r2, [pc, #636]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	6593      	str	r3, [r2, #88]	; 0x58
 8003b82:	e003      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	d037      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bbc:	d816      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d018      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bc6:	d111      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc8:	4b8c      	ldr	r3, [pc, #560]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	4a8b      	ldr	r2, [pc, #556]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bd4:	e00f      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bda:	3308      	adds	r3, #8
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 f94c 	bl	8004e7c <RCCEx_PLL2_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bea:	e004      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bfe:	4b7f      	ldr	r3, [pc, #508]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c02:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a7b      	ldr	r2, [pc, #492]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	6513      	str	r3, [r2, #80]	; 0x50
 8003c12:	e003      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	d039      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d81c      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c46:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003c89 	.word	0x08003c89
 8003c50:	08003c5d 	.word	0x08003c5d
 8003c54:	08003c6b 	.word	0x08003c6b
 8003c58:	08003c89 	.word	0x08003c89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5c:	4b67      	ldr	r3, [pc, #412]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	4a66      	ldr	r2, [pc, #408]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c68:	e00f      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6e:	3308      	adds	r3, #8
 8003c70:	2102      	movs	r1, #2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f001 f902 	bl	8004e7c <RCCEx_PLL2_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c7e:	e004      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c92:	4b5a      	ldr	r3, [pc, #360]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	f023 0103 	bic.w	r1, r3, #3
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca0:	4a56      	ldr	r2, [pc, #344]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca6:	e003      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cc6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f000 809f 	beq.w	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd2:	4b4b      	ldr	r3, [pc, #300]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a4a      	ldr	r2, [pc, #296]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cde:	f7fd fb75 	bl	80013cc <HAL_GetTick>
 8003ce2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce8:	f7fd fb70 	bl	80013cc <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b64      	cmp	r3, #100	; 0x64
 8003cf6:	d903      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cfe:	e005      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d00:	4b3f      	ldr	r3, [pc, #252]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ed      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d179      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d14:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d20:	4053      	eors	r3, r2
 8003d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d015      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d2a:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d36:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	4a30      	ldr	r2, [pc, #192]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d42:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a2d      	ldr	r2, [pc, #180]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d4e:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d62:	d118      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fd fb32 	bl	80013cc <HAL_GetTick>
 8003d68:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d6c:	e00d      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fd fb2d 	bl	80013cc <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d78:	1ad2      	subs	r2, r2, r3
 8003d7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d903      	bls.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003d88:	e005      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0eb      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d129      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dae:	d10e      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003db0:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dc0:	091a      	lsrs	r2, r3, #4
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6113      	str	r3, [r2, #16]
 8003dcc:	e005      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dd8:	6113      	str	r3, [r2, #16]
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ddc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dea:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6713      	str	r3, [r2, #112]	; 0x70
 8003df0:	e00e      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003dfa:	e009      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	58024800 	.word	0x58024800
 8003e04:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f002 0301 	and.w	r3, r2, #1
 8003e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f000 8089 	beq.w	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e38:	2b28      	cmp	r3, #40	; 0x28
 8003e3a:	d86b      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003f1d 	.word	0x08003f1d
 8003e48:	08003f15 	.word	0x08003f15
 8003e4c:	08003f15 	.word	0x08003f15
 8003e50:	08003f15 	.word	0x08003f15
 8003e54:	08003f15 	.word	0x08003f15
 8003e58:	08003f15 	.word	0x08003f15
 8003e5c:	08003f15 	.word	0x08003f15
 8003e60:	08003f15 	.word	0x08003f15
 8003e64:	08003ee9 	.word	0x08003ee9
 8003e68:	08003f15 	.word	0x08003f15
 8003e6c:	08003f15 	.word	0x08003f15
 8003e70:	08003f15 	.word	0x08003f15
 8003e74:	08003f15 	.word	0x08003f15
 8003e78:	08003f15 	.word	0x08003f15
 8003e7c:	08003f15 	.word	0x08003f15
 8003e80:	08003f15 	.word	0x08003f15
 8003e84:	08003eff 	.word	0x08003eff
 8003e88:	08003f15 	.word	0x08003f15
 8003e8c:	08003f15 	.word	0x08003f15
 8003e90:	08003f15 	.word	0x08003f15
 8003e94:	08003f15 	.word	0x08003f15
 8003e98:	08003f15 	.word	0x08003f15
 8003e9c:	08003f15 	.word	0x08003f15
 8003ea0:	08003f15 	.word	0x08003f15
 8003ea4:	08003f1d 	.word	0x08003f1d
 8003ea8:	08003f15 	.word	0x08003f15
 8003eac:	08003f15 	.word	0x08003f15
 8003eb0:	08003f15 	.word	0x08003f15
 8003eb4:	08003f15 	.word	0x08003f15
 8003eb8:	08003f15 	.word	0x08003f15
 8003ebc:	08003f15 	.word	0x08003f15
 8003ec0:	08003f15 	.word	0x08003f15
 8003ec4:	08003f1d 	.word	0x08003f1d
 8003ec8:	08003f15 	.word	0x08003f15
 8003ecc:	08003f15 	.word	0x08003f15
 8003ed0:	08003f15 	.word	0x08003f15
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f15 	.word	0x08003f15
 8003edc:	08003f15 	.word	0x08003f15
 8003ee0:	08003f15 	.word	0x08003f15
 8003ee4:	08003f1d 	.word	0x08003f1d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eec:	3308      	adds	r3, #8
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 ffc3 	bl	8004e7c <RCCEx_PLL2_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003efc:	e00f      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f02:	3328      	adds	r3, #40	; 0x28
 8003f04:	2101      	movs	r1, #1
 8003f06:	4618      	mov	r0, r3
 8003f08:	f001 f86a 	bl	8004fe0 <RCCEx_PLL3_Config>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f12:	e004      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f1a:	e000      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f26:	4bbf      	ldr	r3, [pc, #764]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f34:	4abb      	ldr	r2, [pc, #748]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f36:	430b      	orrs	r3, r1
 8003f38:	6553      	str	r3, [r2, #84]	; 0x54
 8003f3a:	e003      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f002 0302 	and.w	r3, r2, #2
 8003f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4313      	orrs	r3, r2
 8003f62:	d041      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6a:	2b05      	cmp	r3, #5
 8003f6c:	d824      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f6e:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003fc1 	.word	0x08003fc1
 8003f78:	08003f8d 	.word	0x08003f8d
 8003f7c:	08003fa3 	.word	0x08003fa3
 8003f80:	08003fc1 	.word	0x08003fc1
 8003f84:	08003fc1 	.word	0x08003fc1
 8003f88:	08003fc1 	.word	0x08003fc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f90:	3308      	adds	r3, #8
 8003f92:	2101      	movs	r1, #1
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 ff71 	bl	8004e7c <RCCEx_PLL2_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fa0:	e00f      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa6:	3328      	adds	r3, #40	; 0x28
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 f818 	bl	8004fe0 <RCCEx_PLL3_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fb6:	e004      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fca:	4b96      	ldr	r3, [pc, #600]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	f023 0107 	bic.w	r1, r3, #7
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fd8:	4a92      	ldr	r2, [pc, #584]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	6553      	str	r3, [r2, #84]	; 0x54
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f002 0304 	and.w	r3, r2, #4
 8003ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ffe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d044      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004010:	2b05      	cmp	r3, #5
 8004012:	d825      	bhi.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004069 	.word	0x08004069
 8004020:	08004035 	.word	0x08004035
 8004024:	0800404b 	.word	0x0800404b
 8004028:	08004069 	.word	0x08004069
 800402c:	08004069 	.word	0x08004069
 8004030:	08004069 	.word	0x08004069
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004038:	3308      	adds	r3, #8
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f000 ff1d 	bl	8004e7c <RCCEx_PLL2_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004048:	e00f      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404e:	3328      	adds	r3, #40	; 0x28
 8004050:	2101      	movs	r1, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f000 ffc4 	bl	8004fe0 <RCCEx_PLL3_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800405e:	e004      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004066:	e000      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10b      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004072:	4b6c      	ldr	r3, [pc, #432]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	f023 0107 	bic.w	r1, r3, #7
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004082:	4a68      	ldr	r2, [pc, #416]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004084:	430b      	orrs	r3, r1
 8004086:	6593      	str	r3, [r2, #88]	; 0x58
 8004088:	e003      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800408e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f002 0320 	and.w	r3, r2, #32
 800409e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040ac:	460b      	mov	r3, r1
 80040ae:	4313      	orrs	r3, r2
 80040b0:	d055      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040be:	d033      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80040c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c4:	d82c      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d02f      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d826      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040d6:	d02b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040dc:	d820      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e2:	d012      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e8:	d81a      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d022      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f2:	d115      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f8:	3308      	adds	r3, #8
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 febd 	bl	8004e7c <RCCEx_PLL2_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004108:	e015      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410e:	3328      	adds	r3, #40	; 0x28
 8004110:	2102      	movs	r1, #2
 8004112:	4618      	mov	r0, r3
 8004114:	f000 ff64 	bl	8004fe0 <RCCEx_PLL3_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800411e:	e00a      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004126:	e006      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004128:	bf00      	nop
 800412a:	e004      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800412c:	bf00      	nop
 800412e:	e002      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004130:	bf00      	nop
 8004132:	e000      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800413e:	4b39      	ldr	r3, [pc, #228]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	4a35      	ldr	r2, [pc, #212]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004150:	430b      	orrs	r3, r1
 8004152:	6553      	str	r3, [r2, #84]	; 0x54
 8004154:	e003      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800415a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800416a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004174:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004178:	460b      	mov	r3, r1
 800417a:	4313      	orrs	r3, r2
 800417c:	d058      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004186:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800418a:	d033      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800418c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004190:	d82c      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004196:	d02f      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419c:	d826      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800419e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a2:	d02b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80041a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a8:	d820      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ae:	d012      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b4:	d81a      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d022      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041be:	d115      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c4:	3308      	adds	r3, #8
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fe57 	bl	8004e7c <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041d4:	e015      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041da:	3328      	adds	r3, #40	; 0x28
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fefe 	bl	8004fe0 <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041ea:	e00a      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041f2:	e006      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041f4:	bf00      	nop
 80041f6:	e004      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041f8:	bf00      	nop
 80041fa:	e002      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041fc:	bf00      	nop
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10e      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800421a:	4a02      	ldr	r2, [pc, #8]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800421c:	430b      	orrs	r3, r1
 800421e:	6593      	str	r3, [r2, #88]	; 0x58
 8004220:	e006      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004222:	bf00      	nop
 8004224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800422c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800423c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004240:	2300      	movs	r3, #0
 8004242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004246:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800424a:	460b      	mov	r3, r1
 800424c:	4313      	orrs	r3, r2
 800424e:	d055      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004258:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800425c:	d033      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800425e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004262:	d82c      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	d02f      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800426a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426e:	d826      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004270:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004274:	d02b      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004276:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800427a:	d820      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800427c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004280:	d012      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004286:	d81a      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d022      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800428c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004290:	d115      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004296:	3308      	adds	r3, #8
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fdee 	bl	8004e7c <RCCEx_PLL2_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042a6:	e015      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ac:	3328      	adds	r3, #40	; 0x28
 80042ae:	2102      	movs	r1, #2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fe95 	bl	8004fe0 <RCCEx_PLL3_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042bc:	e00a      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042c4:	e006      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042c6:	bf00      	nop
 80042c8:	e004      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042ca:	bf00      	nop
 80042cc:	e002      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042dc:	4ba1      	ldr	r3, [pc, #644]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ec:	4a9d      	ldr	r2, [pc, #628]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ee:	430b      	orrs	r3, r1
 80042f0:	6593      	str	r3, [r2, #88]	; 0x58
 80042f2:	e003      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f002 0308 	and.w	r3, r2, #8
 8004308:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800430c:	2300      	movs	r3, #0
 800430e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004312:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004316:	460b      	mov	r3, r1
 8004318:	4313      	orrs	r3, r2
 800431a:	d01e      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004328:	d10c      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432e:	3328      	adds	r3, #40	; 0x28
 8004330:	2102      	movs	r1, #2
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fe54 	bl	8004fe0 <RCCEx_PLL3_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004344:	4b87      	ldr	r3, [pc, #540]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004354:	4a83      	ldr	r2, [pc, #524]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004356:	430b      	orrs	r3, r1
 8004358:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	f002 0310 	and.w	r3, r2, #16
 8004366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800436a:	2300      	movs	r3, #0
 800436c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004370:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004374:	460b      	mov	r3, r1
 8004376:	4313      	orrs	r3, r2
 8004378:	d01e      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004386:	d10c      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438c:	3328      	adds	r3, #40	; 0x28
 800438e:	2102      	movs	r1, #2
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fe25 	bl	8004fe0 <RCCEx_PLL3_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043a2:	4b70      	ldr	r3, [pc, #448]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043b2:	4a6c      	ldr	r2, [pc, #432]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80043c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80043d2:	460b      	mov	r3, r1
 80043d4:	4313      	orrs	r3, r2
 80043d6:	d03e      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e4:	d022      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ea:	d81b      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d00b      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80043f6:	e015      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fc:	3308      	adds	r3, #8
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fd3b 	bl	8004e7c <RCCEx_PLL2_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800440c:	e00f      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004412:	3328      	adds	r3, #40	; 0x28
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fde2 	bl	8004fe0 <RCCEx_PLL3_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004422:	e004      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800442a:	e000      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800442c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800442e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004436:	4b4b      	ldr	r3, [pc, #300]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004446:	4a47      	ldr	r2, [pc, #284]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004448:	430b      	orrs	r3, r1
 800444a:	6593      	str	r3, [r2, #88]	; 0x58
 800444c:	e003      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004462:	67bb      	str	r3, [r7, #120]	; 0x78
 8004464:	2300      	movs	r3, #0
 8004466:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004468:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800446c:	460b      	mov	r3, r1
 800446e:	4313      	orrs	r3, r2
 8004470:	d03b      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800447e:	d01f      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004480:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004484:	d818      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800448a:	d003      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800448c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004490:	d007      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004492:	e011      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004494:	4b33      	ldr	r3, [pc, #204]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	4a32      	ldr	r2, [pc, #200]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800449a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044a0:	e00f      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a6:	3328      	adds	r3, #40	; 0x28
 80044a8:	2101      	movs	r1, #1
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fd98 	bl	8004fe0 <RCCEx_PLL3_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044b6:	e004      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044be:	e000      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80044c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044ca:	4b26      	ldr	r3, [pc, #152]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	4a22      	ldr	r2, [pc, #136]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6553      	str	r3, [r2, #84]	; 0x54
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80044f6:	673b      	str	r3, [r7, #112]	; 0x70
 80044f8:	2300      	movs	r3, #0
 80044fa:	677b      	str	r3, [r7, #116]	; 0x74
 80044fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004500:	460b      	mov	r3, r1
 8004502:	4313      	orrs	r3, r2
 8004504:	d034      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d007      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004516:	e011      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004518:	4b12      	ldr	r3, [pc, #72]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a11      	ldr	r2, [pc, #68]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800451e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004524:	e00e      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452a:	3308      	adds	r3, #8
 800452c:	2102      	movs	r1, #2
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fca4 	bl	8004e7c <RCCEx_PLL2_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800453a:	e003      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10d      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455a:	4a02      	ldr	r2, [pc, #8]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800455c:	430b      	orrs	r3, r1
 800455e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004560:	e006      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004562:	bf00      	nop
 8004564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800456c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800457c:	66bb      	str	r3, [r7, #104]	; 0x68
 800457e:	2300      	movs	r3, #0
 8004580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004582:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004586:	460b      	mov	r3, r1
 8004588:	4313      	orrs	r3, r2
 800458a:	d00c      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004590:	3328      	adds	r3, #40	; 0x28
 8004592:	2102      	movs	r1, #2
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fd23 	bl	8004fe0 <RCCEx_PLL3_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80045b2:	663b      	str	r3, [r7, #96]	; 0x60
 80045b4:	2300      	movs	r3, #0
 80045b6:	667b      	str	r3, [r7, #100]	; 0x64
 80045b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80045bc:	460b      	mov	r3, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	d038      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ce:	d018      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d4:	d811      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045da:	d014      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e0:	d80b      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ea:	d106      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ec:	4bc3      	ldr	r3, [pc, #780]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	4ac2      	ldr	r2, [pc, #776]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045f8:	e008      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004600:	e004      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004602:	bf00      	nop
 8004604:	e002      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004606:	bf00      	nop
 8004608:	e000      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800460a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10b      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004614:	4bb9      	ldr	r3, [pc, #740]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004624:	4ab5      	ldr	r2, [pc, #724]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004626:	430b      	orrs	r3, r1
 8004628:	6553      	str	r3, [r2, #84]	; 0x54
 800462a:	e003      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004640:	65bb      	str	r3, [r7, #88]	; 0x58
 8004642:	2300      	movs	r3, #0
 8004644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004646:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004650:	4baa      	ldr	r3, [pc, #680]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800465e:	4aa7      	ldr	r2, [pc, #668]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004660:	430b      	orrs	r3, r1
 8004662:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004670:	653b      	str	r3, [r7, #80]	; 0x50
 8004672:	2300      	movs	r3, #0
 8004674:	657b      	str	r3, [r7, #84]	; 0x54
 8004676:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800467a:	460b      	mov	r3, r1
 800467c:	4313      	orrs	r3, r2
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004680:	4b9e      	ldr	r3, [pc, #632]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800468c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004690:	4a9a      	ldr	r2, [pc, #616]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004692:	430b      	orrs	r3, r1
 8004694:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80046a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a4:	2300      	movs	r3, #0
 80046a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80046ac:	460b      	mov	r3, r1
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046b2:	4b92      	ldr	r3, [pc, #584]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c0:	4a8e      	ldr	r2, [pc, #568]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c2:	430b      	orrs	r3, r1
 80046c4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80046d2:	643b      	str	r3, [r7, #64]	; 0x40
 80046d4:	2300      	movs	r3, #0
 80046d6:	647b      	str	r3, [r7, #68]	; 0x44
 80046d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80046dc:	460b      	mov	r3, r1
 80046de:	4313      	orrs	r3, r2
 80046e0:	d00e      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046e2:	4b86      	ldr	r3, [pc, #536]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	4a85      	ldr	r2, [pc, #532]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046ec:	6113      	str	r3, [r2, #16]
 80046ee:	4b83      	ldr	r3, [pc, #524]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f0:	6919      	ldr	r1, [r3, #16]
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046fa:	4a80      	ldr	r2, [pc, #512]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800470c:	63bb      	str	r3, [r7, #56]	; 0x38
 800470e:	2300      	movs	r3, #0
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004712:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004716:	460b      	mov	r3, r1
 8004718:	4313      	orrs	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800471c:	4b77      	ldr	r3, [pc, #476]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004720:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	4a74      	ldr	r2, [pc, #464]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472c:	430b      	orrs	r3, r1
 800472e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800473c:	633b      	str	r3, [r7, #48]	; 0x30
 800473e:	2300      	movs	r3, #0
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
 8004742:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800474c:	4b6b      	ldr	r3, [pc, #428]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475c:	4a67      	ldr	r2, [pc, #412]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475e:	430b      	orrs	r3, r1
 8004760:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	2100      	movs	r1, #0
 800476c:	62b9      	str	r1, [r7, #40]	; 0x28
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004774:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004778:	460b      	mov	r3, r1
 800477a:	4313      	orrs	r3, r2
 800477c:	d011      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004782:	3308      	adds	r3, #8
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fb78 	bl	8004e7c <RCCEx_PLL2_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800479e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	2100      	movs	r1, #0
 80047ac:	6239      	str	r1, [r7, #32]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
 80047b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047b8:	460b      	mov	r3, r1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	d011      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c2:	3308      	adds	r3, #8
 80047c4:	2101      	movs	r1, #1
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fb58 	bl	8004e7c <RCCEx_PLL2_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80047d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	2100      	movs	r1, #0
 80047ec:	61b9      	str	r1, [r7, #24]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047f8:	460b      	mov	r3, r1
 80047fa:	4313      	orrs	r3, r2
 80047fc:	d011      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004802:	3308      	adds	r3, #8
 8004804:	2102      	movs	r1, #2
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fb38 	bl	8004e7c <RCCEx_PLL2_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800481e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	2100      	movs	r1, #0
 800482c:	6139      	str	r1, [r7, #16]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004838:	460b      	mov	r3, r1
 800483a:	4313      	orrs	r3, r2
 800483c:	d011      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004842:	3328      	adds	r3, #40	; 0x28
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fbca 	bl	8004fe0 <RCCEx_PLL3_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800485e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	2100      	movs	r1, #0
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004878:	460b      	mov	r3, r1
 800487a:	4313      	orrs	r3, r2
 800487c:	d011      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004882:	3328      	adds	r3, #40	; 0x28
 8004884:	2101      	movs	r1, #1
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fbaa 	bl	8004fe0 <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800489e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	2100      	movs	r1, #0
 80048ac:	6039      	str	r1, [r7, #0]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048b8:	460b      	mov	r3, r1
 80048ba:	4313      	orrs	r3, r2
 80048bc:	d011      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c2:	3328      	adds	r3, #40	; 0x28
 80048c4:	2102      	movs	r1, #2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fb8a 	bl	8004fe0 <RCCEx_PLL3_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80048e2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80048f6:	46bd      	mov	sp, r7
 80048f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048fc:	58024400 	.word	0x58024400

08004900 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004904:	f7fe fd96 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4904      	ldr	r1, [pc, #16]	; (8004928 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004920:	4618      	mov	r0, r3
 8004922:	bd80      	pop	{r7, pc}
 8004924:	58024400 	.word	0x58024400
 8004928:	08008464 	.word	0x08008464

0800492c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800492c:	b480      	push	{r7}
 800492e:	b089      	sub	sp, #36	; 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004934:	4ba1      	ldr	r3, [pc, #644]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800493e:	4b9f      	ldr	r3, [pc, #636]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	0b1b      	lsrs	r3, r3, #12
 8004944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004948:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800494a:	4b9c      	ldr	r3, [pc, #624]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004956:	4b99      	ldr	r3, [pc, #612]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	08db      	lsrs	r3, r3, #3
 800495c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8111 	beq.w	8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b02      	cmp	r3, #2
 800497e:	f000 8083 	beq.w	8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b02      	cmp	r3, #2
 8004986:	f200 80a1 	bhi.w	8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d056      	beq.n	8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004996:	e099      	b.n	8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004998:	4b88      	ldr	r3, [pc, #544]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02d      	beq.n	8004a00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049a4:	4b85      	ldr	r3, [pc, #532]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	08db      	lsrs	r3, r3, #3
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	4a84      	ldr	r2, [pc, #528]	; (8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
 80049b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ce:	4b7b      	ldr	r3, [pc, #492]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049de:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049fe:	e087      	b.n	8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a12:	4b6a      	ldr	r3, [pc, #424]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a42:	e065      	b.n	8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a56:	4b59      	ldr	r3, [pc, #356]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a86:	e043      	b.n	8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9a:	4b48      	ldr	r3, [pc, #288]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aca:	e021      	b.n	8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ade:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b10:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	0a5b      	lsrs	r3, r3, #9
 8004b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b36:	ee17 2a90 	vmov	r2, s15
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b3e:	4b1f      	ldr	r3, [pc, #124]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	0c1b      	lsrs	r3, r3, #16
 8004b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b48:	ee07 3a90 	vmov	s15, r3
 8004b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b58:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b64:	ee17 2a90 	vmov	r2, s15
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	0e1b      	lsrs	r3, r3, #24
 8004b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b92:	ee17 2a90 	vmov	r2, s15
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b9a:	e008      	b.n	8004bae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	609a      	str	r2, [r3, #8]
}
 8004bae:	bf00      	nop
 8004bb0:	3724      	adds	r7, #36	; 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	58024400 	.word	0x58024400
 8004bc0:	03d09000 	.word	0x03d09000
 8004bc4:	46000000 	.word	0x46000000
 8004bc8:	4c742400 	.word	0x4c742400
 8004bcc:	4a742400 	.word	0x4a742400
 8004bd0:	4af42400 	.word	0x4af42400

08004bd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	; 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bdc:	4ba1      	ldr	r3, [pc, #644]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004be6:	4b9f      	ldr	r3, [pc, #636]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	0d1b      	lsrs	r3, r3, #20
 8004bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bf2:	4b9c      	ldr	r3, [pc, #624]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bfe:	4b99      	ldr	r3, [pc, #612]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	08db      	lsrs	r3, r3, #3
 8004c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8111 	beq.w	8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	f000 8083 	beq.w	8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	f200 80a1 	bhi.w	8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d056      	beq.n	8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c3e:	e099      	b.n	8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c40:	4b88      	ldr	r3, [pc, #544]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02d      	beq.n	8004ca8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c4c:	4b85      	ldr	r3, [pc, #532]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	08db      	lsrs	r3, r3, #3
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	4a84      	ldr	r2, [pc, #528]	; (8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c76:	4b7b      	ldr	r3, [pc, #492]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ca6:	e087      	b.n	8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cba:	4b6a      	ldr	r3, [pc, #424]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cea:	e065      	b.n	8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfe:	4b59      	ldr	r3, [pc, #356]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d2e:	e043      	b.n	8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d42:	4b48      	ldr	r3, [pc, #288]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d72:	e021      	b.n	8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d86:	4b37      	ldr	r3, [pc, #220]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004db8:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	0a5b      	lsrs	r3, r3, #9
 8004dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dde:	ee17 2a90 	vmov	r2, s15
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004de6:	4b1f      	ldr	r3, [pc, #124]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	0c1b      	lsrs	r3, r3, #16
 8004dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df0:	ee07 3a90 	vmov	s15, r3
 8004df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0c:	ee17 2a90 	vmov	r2, s15
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	0e1b      	lsrs	r3, r3, #24
 8004e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3a:	ee17 2a90 	vmov	r2, s15
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e42:	e008      	b.n	8004e56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	609a      	str	r2, [r3, #8]
}
 8004e56:	bf00      	nop
 8004e58:	3724      	adds	r7, #36	; 0x24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	58024400 	.word	0x58024400
 8004e68:	03d09000 	.word	0x03d09000
 8004e6c:	46000000 	.word	0x46000000
 8004e70:	4c742400 	.word	0x4c742400
 8004e74:	4a742400 	.word	0x4a742400
 8004e78:	4af42400 	.word	0x4af42400

08004e7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e8a:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d101      	bne.n	8004e9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e099      	b.n	8004fce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e9a:	4b4f      	ldr	r3, [pc, #316]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4e      	ldr	r2, [pc, #312]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004ea0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea6:	f7fc fa91 	bl	80013cc <HAL_GetTick>
 8004eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004eac:	e008      	b.n	8004ec0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004eae:	f7fc fa8d 	bl	80013cc <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e086      	b.n	8004fce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ec0:	4b45      	ldr	r3, [pc, #276]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ecc:	4b42      	ldr	r3, [pc, #264]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	493f      	ldr	r1, [pc, #252]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	628b      	str	r3, [r1, #40]	; 0x28
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	025b      	lsls	r3, r3, #9
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f10:	4931      	ldr	r1, [pc, #196]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f16:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	492d      	ldr	r1, [pc, #180]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f28:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	f023 0220 	bic.w	r2, r3, #32
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	4928      	ldr	r1, [pc, #160]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f3a:	4b27      	ldr	r3, [pc, #156]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f40:	f023 0310 	bic.w	r3, r3, #16
 8004f44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f46:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <RCCEx_PLL2_Config+0x160>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	69d2      	ldr	r2, [r2, #28]
 8004f52:	00d2      	lsls	r2, r2, #3
 8004f54:	4920      	ldr	r1, [pc, #128]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f60:	f043 0310 	orr.w	r3, r3, #16
 8004f64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f78:	e00f      	b.n	8004f9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d106      	bne.n	8004f8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f80:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	4a14      	ldr	r2, [pc, #80]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f8c:	e005      	b.n	8004f9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	4a11      	ldr	r2, [pc, #68]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a0e      	ldr	r2, [pc, #56]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa6:	f7fc fa11 	bl	80013cc <HAL_GetTick>
 8004faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fac:	e008      	b.n	8004fc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fae:	f7fc fa0d 	bl	80013cc <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e006      	b.n	8004fce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <RCCEx_PLL2_Config+0x15c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	58024400 	.word	0x58024400
 8004fdc:	ffff0007 	.word	0xffff0007

08004fe0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fee:	4b53      	ldr	r3, [pc, #332]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d101      	bne.n	8004ffe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e099      	b.n	8005132 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ffe:	4b4f      	ldr	r3, [pc, #316]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a4e      	ldr	r2, [pc, #312]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8005004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800500a:	f7fc f9df 	bl	80013cc <HAL_GetTick>
 800500e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005010:	e008      	b.n	8005024 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005012:	f7fc f9db 	bl	80013cc <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e086      	b.n	8005132 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005024:	4b45      	ldr	r3, [pc, #276]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f0      	bne.n	8005012 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005030:	4b42      	ldr	r3, [pc, #264]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	051b      	lsls	r3, r3, #20
 800503e:	493f      	ldr	r1, [pc, #252]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	628b      	str	r3, [r1, #40]	; 0x28
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	3b01      	subs	r3, #1
 800504a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	3b01      	subs	r3, #1
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	b29b      	uxth	r3, r3
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	3b01      	subs	r3, #1
 800506e:	061b      	lsls	r3, r3, #24
 8005070:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005074:	4931      	ldr	r1, [pc, #196]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800507a:	4b30      	ldr	r3, [pc, #192]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	492d      	ldr	r1, [pc, #180]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800508c:	4b2b      	ldr	r3, [pc, #172]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	4928      	ldr	r1, [pc, #160]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 800509a:	4313      	orrs	r3, r2
 800509c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800509e:	4b27      	ldr	r3, [pc, #156]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	4a26      	ldr	r2, [pc, #152]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <RCCEx_PLL3_Config+0x160>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	69d2      	ldr	r2, [r2, #28]
 80050b6:	00d2      	lsls	r2, r2, #3
 80050b8:	4920      	ldr	r1, [pc, #128]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050be:	4b1f      	ldr	r3, [pc, #124]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	4a1e      	ldr	r2, [pc, #120]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050d0:	4b1a      	ldr	r3, [pc, #104]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	4a19      	ldr	r2, [pc, #100]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050dc:	e00f      	b.n	80050fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d106      	bne.n	80050f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050e4:	4b15      	ldr	r3, [pc, #84]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050f0:	e005      	b.n	80050fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050f2:	4b12      	ldr	r3, [pc, #72]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	4a11      	ldr	r2, [pc, #68]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 80050f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050fe:	4b0f      	ldr	r3, [pc, #60]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a0e      	ldr	r2, [pc, #56]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510a:	f7fc f95f 	bl	80013cc <HAL_GetTick>
 800510e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005110:	e008      	b.n	8005124 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005112:	f7fc f95b 	bl	80013cc <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e006      	b.n	8005132 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <RCCEx_PLL3_Config+0x15c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	ffff0007 	.word	0xffff0007

08005144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e049      	b.n	80051ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fb ff7a 	bl	8001064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 faee 	bl	8005764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d001      	beq.n	800520c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e054      	b.n	80052b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a26      	ldr	r2, [pc, #152]	; (80052c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d022      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005236:	d01d      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a22      	ldr	r2, [pc, #136]	; (80052c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d018      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a21      	ldr	r2, [pc, #132]	; (80052cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d013      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00e      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d009      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d004      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <HAL_TIM_Base_Start_IT+0xe8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d115      	bne.n	80052a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <HAL_TIM_Base_Start_IT+0xec>)
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b06      	cmp	r3, #6
 8005284:	d015      	beq.n	80052b2 <HAL_TIM_Base_Start_IT+0xbe>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d011      	beq.n	80052b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529e:	e008      	b.n	80052b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e000      	b.n	80052b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40000c00 	.word	0x40000c00
 80052d4:	40010400 	.word	0x40010400
 80052d8:	40001800 	.word	0x40001800
 80052dc:	40014000 	.word	0x40014000
 80052e0:	00010007 	.word	0x00010007

080052e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d122      	bne.n	8005340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	d11b      	bne.n	8005340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0202 	mvn.w	r2, #2
 8005310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f9fe 	bl	8005728 <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9f0 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fa01 	bl	800573c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d122      	bne.n	8005394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b04      	cmp	r3, #4
 800535a:	d11b      	bne.n	8005394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0204 	mvn.w	r2, #4
 8005364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f9d4 	bl	8005728 <HAL_TIM_IC_CaptureCallback>
 8005380:	e005      	b.n	800538e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f9c6 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f9d7 	bl	800573c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d122      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d11b      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0208 	mvn.w	r2, #8
 80053b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f9aa 	bl	8005728 <HAL_TIM_IC_CaptureCallback>
 80053d4:	e005      	b.n	80053e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f99c 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f9ad 	bl	800573c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d122      	bne.n	800543c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b10      	cmp	r3, #16
 8005402:	d11b      	bne.n	800543c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0210 	mvn.w	r2, #16
 800540c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2208      	movs	r2, #8
 8005412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f980 	bl	8005728 <HAL_TIM_IC_CaptureCallback>
 8005428:	e005      	b.n	8005436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f972 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f983 	bl	800573c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10e      	bne.n	8005468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d107      	bne.n	8005468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0201 	mvn.w	r2, #1
 8005460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fb fabe 	bl	80009e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d10e      	bne.n	8005494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d107      	bne.n	8005494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fb38 	bl	8005b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a2:	d10e      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	d107      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fb2b 	bl	8005b18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d10e      	bne.n	80054ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	d107      	bne.n	80054ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f931 	bl	8005750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d10e      	bne.n	800551a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b20      	cmp	r3, #32
 8005508:	d107      	bne.n	800551a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f06f 0220 	mvn.w	r2, #32
 8005512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 faeb 	bl	8005af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIM_ConfigClockSource+0x1c>
 800553c:	2302      	movs	r3, #2
 800553e:	e0dc      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x1d6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	4b6a      	ldr	r3, [pc, #424]	; (8005704 <HAL_TIM_ConfigClockSource+0x1e0>)
 800555c:	4013      	ands	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a64      	ldr	r2, [pc, #400]	; (8005708 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	f000 80a9 	beq.w	80056ce <HAL_TIM_ConfigClockSource+0x1aa>
 800557c:	4a62      	ldr	r2, [pc, #392]	; (8005708 <HAL_TIM_ConfigClockSource+0x1e4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	f200 80ae 	bhi.w	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005584:	4a61      	ldr	r2, [pc, #388]	; (800570c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	f000 80a1 	beq.w	80056ce <HAL_TIM_ConfigClockSource+0x1aa>
 800558c:	4a5f      	ldr	r2, [pc, #380]	; (800570c <HAL_TIM_ConfigClockSource+0x1e8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	f200 80a6 	bhi.w	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005594:	4a5e      	ldr	r2, [pc, #376]	; (8005710 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f000 8099 	beq.w	80056ce <HAL_TIM_ConfigClockSource+0x1aa>
 800559c:	4a5c      	ldr	r2, [pc, #368]	; (8005710 <HAL_TIM_ConfigClockSource+0x1ec>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	f200 809e 	bhi.w	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80055a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055a8:	f000 8091 	beq.w	80056ce <HAL_TIM_ConfigClockSource+0x1aa>
 80055ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055b0:	f200 8096 	bhi.w	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80055b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b8:	f000 8089 	beq.w	80056ce <HAL_TIM_ConfigClockSource+0x1aa>
 80055bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c0:	f200 808e 	bhi.w	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80055c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c8:	d03e      	beq.n	8005648 <HAL_TIM_ConfigClockSource+0x124>
 80055ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ce:	f200 8087 	bhi.w	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	f000 8086 	beq.w	80056e6 <HAL_TIM_ConfigClockSource+0x1c2>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	d87f      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80055e0:	2b70      	cmp	r3, #112	; 0x70
 80055e2:	d01a      	beq.n	800561a <HAL_TIM_ConfigClockSource+0xf6>
 80055e4:	2b70      	cmp	r3, #112	; 0x70
 80055e6:	d87b      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80055e8:	2b60      	cmp	r3, #96	; 0x60
 80055ea:	d050      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x16a>
 80055ec:	2b60      	cmp	r3, #96	; 0x60
 80055ee:	d877      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80055f0:	2b50      	cmp	r3, #80	; 0x50
 80055f2:	d03c      	beq.n	800566e <HAL_TIM_ConfigClockSource+0x14a>
 80055f4:	2b50      	cmp	r3, #80	; 0x50
 80055f6:	d873      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d058      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x18a>
 80055fc:	2b40      	cmp	r3, #64	; 0x40
 80055fe:	d86f      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005600:	2b30      	cmp	r3, #48	; 0x30
 8005602:	d064      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x1aa>
 8005604:	2b30      	cmp	r3, #48	; 0x30
 8005606:	d86b      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005608:	2b20      	cmp	r3, #32
 800560a:	d060      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x1aa>
 800560c:	2b20      	cmp	r3, #32
 800560e:	d867      	bhi.n	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d05c      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x1aa>
 8005614:	2b10      	cmp	r3, #16
 8005616:	d05a      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x1aa>
 8005618:	e062      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6899      	ldr	r1, [r3, #8]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f000 f9b3 	bl	8005994 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800563c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	609a      	str	r2, [r3, #8]
      break;
 8005646:	e04f      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6899      	ldr	r1, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f000 f99c 	bl	8005994 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566a:	609a      	str	r2, [r3, #8]
      break;
 800566c:	e03c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6859      	ldr	r1, [r3, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	461a      	mov	r2, r3
 800567c:	f000 f90c 	bl	8005898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2150      	movs	r1, #80	; 0x50
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f966 	bl	8005958 <TIM_ITRx_SetConfig>
      break;
 800568c:	e02c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	461a      	mov	r2, r3
 800569c:	f000 f92b 	bl	80058f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2160      	movs	r1, #96	; 0x60
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 f956 	bl	8005958 <TIM_ITRx_SetConfig>
      break;
 80056ac:	e01c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6859      	ldr	r1, [r3, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	461a      	mov	r2, r3
 80056bc:	f000 f8ec 	bl	8005898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2140      	movs	r1, #64	; 0x40
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 f946 	bl	8005958 <TIM_ITRx_SetConfig>
      break;
 80056cc:	e00c      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4619      	mov	r1, r3
 80056d8:	4610      	mov	r0, r2
 80056da:	f000 f93d 	bl	8005958 <TIM_ITRx_SetConfig>
      break;
 80056de:	e003      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
      break;
 80056e4:	e000      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80056e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	ffceff88 	.word	0xffceff88
 8005708:	00100040 	.word	0x00100040
 800570c:	00100030 	.word	0x00100030
 8005710:	00100020 	.word	0x00100020

08005714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a40      	ldr	r2, [pc, #256]	; (8005878 <TIM_Base_SetConfig+0x114>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <TIM_Base_SetConfig+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d00f      	beq.n	80057a4 <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a3d      	ldr	r2, [pc, #244]	; (800587c <TIM_Base_SetConfig+0x118>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00b      	beq.n	80057a4 <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a3c      	ldr	r2, [pc, #240]	; (8005880 <TIM_Base_SetConfig+0x11c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d007      	beq.n	80057a4 <TIM_Base_SetConfig+0x40>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a3b      	ldr	r2, [pc, #236]	; (8005884 <TIM_Base_SetConfig+0x120>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_Base_SetConfig+0x40>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a3a      	ldr	r2, [pc, #232]	; (8005888 <TIM_Base_SetConfig+0x124>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d108      	bne.n	80057b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2f      	ldr	r2, [pc, #188]	; (8005878 <TIM_Base_SetConfig+0x114>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01f      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c4:	d01b      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a2c      	ldr	r2, [pc, #176]	; (800587c <TIM_Base_SetConfig+0x118>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d017      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a2b      	ldr	r2, [pc, #172]	; (8005880 <TIM_Base_SetConfig+0x11c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <TIM_Base_SetConfig+0x120>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00f      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a29      	ldr	r2, [pc, #164]	; (8005888 <TIM_Base_SetConfig+0x124>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00b      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a28      	ldr	r2, [pc, #160]	; (800588c <TIM_Base_SetConfig+0x128>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a27      	ldr	r2, [pc, #156]	; (8005890 <TIM_Base_SetConfig+0x12c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a26      	ldr	r2, [pc, #152]	; (8005894 <TIM_Base_SetConfig+0x130>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d108      	bne.n	8005810 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a10      	ldr	r2, [pc, #64]	; (8005878 <TIM_Base_SetConfig+0x114>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00f      	beq.n	800585c <TIM_Base_SetConfig+0xf8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a12      	ldr	r2, [pc, #72]	; (8005888 <TIM_Base_SetConfig+0x124>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00b      	beq.n	800585c <TIM_Base_SetConfig+0xf8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a11      	ldr	r2, [pc, #68]	; (800588c <TIM_Base_SetConfig+0x128>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <TIM_Base_SetConfig+0xf8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a10      	ldr	r2, [pc, #64]	; (8005890 <TIM_Base_SetConfig+0x12c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_Base_SetConfig+0xf8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a0f      	ldr	r2, [pc, #60]	; (8005894 <TIM_Base_SetConfig+0x130>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d103      	bne.n	8005864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	615a      	str	r2, [r3, #20]
}
 800586a:	bf00      	nop
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40010000 	.word	0x40010000
 800587c:	40000400 	.word	0x40000400
 8005880:	40000800 	.word	0x40000800
 8005884:	40000c00 	.word	0x40000c00
 8005888:	40010400 	.word	0x40010400
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800

08005898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f023 030a 	bic.w	r3, r3, #10
 80058d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b087      	sub	sp, #28
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f023 0210 	bic.w	r2, r3, #16
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	031b      	lsls	r3, r3, #12
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <TIM_ITRx_SetConfig+0x38>)
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	f043 0307 	orr.w	r3, r3, #7
 800597a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	609a      	str	r2, [r3, #8]
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	ffcfff8f 	.word	0xffcfff8f

08005994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	021a      	lsls	r2, r3, #8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e06d      	b.n	8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a30      	ldr	r2, [pc, #192]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a2f      	ldr	r2, [pc, #188]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d108      	bne.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a20      	ldr	r2, [pc, #128]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d022      	beq.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5e:	d01d      	beq.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d018      	beq.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d013      	beq.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00e      	beq.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d009      	beq.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a16      	ldr	r2, [pc, #88]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a15      	ldr	r2, [pc, #84]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d10c      	bne.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40010400 	.word	0x40010400
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	40000c00 	.word	0x40000c00
 8005ae8:	40001800 	.word	0x40001800
 8005aec:	40014000 	.word	0x40014000

08005af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e042      	b.n	8005bc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d106      	bne.n	8005b56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7fb fb19 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2224      	movs	r2, #36	; 0x24
 8005b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0201 	bic.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fc5c 	bl	800642c <UART_SetConfig>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e022      	b.n	8005bc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 f9b8 	bl	8006efc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 fa3f 	bl	8007040 <UART_CheckIdleState>
 8005bc2:	4603      	mov	r3, r0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d137      	bne.n	8005c54 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_UART_Receive_IT+0x24>
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e030      	b.n	8005c56 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <HAL_UART_Receive_IT+0x94>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d01f      	beq.n	8005c44 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d018      	beq.n	8005c44 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	623b      	str	r3, [r7, #32]
 8005c32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	69f9      	ldr	r1, [r7, #28]
 8005c36:	6a3a      	ldr	r2, [r7, #32]
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e6      	bne.n	8005c12 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	461a      	mov	r2, r3
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f001 fb0a 	bl	8007264 <UART_Start_Receive_IT>
 8005c50:	4603      	mov	r3, r0
 8005c52:	e000      	b.n	8005c56 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3728      	adds	r7, #40	; 0x28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	58000c00 	.word	0x58000c00

08005c64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b0ba      	sub	sp, #232	; 0xe8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c92:	4013      	ands	r3, r2
 8005c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d11b      	bne.n	8005cd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d015      	beq.n	8005cd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d009      	beq.n	8005cd8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 8377 	beq.w	80063bc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	4798      	blx	r3
      }
      return;
 8005cd6:	e371      	b.n	80063bc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8123 	beq.w	8005f28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ce2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ce6:	4b8d      	ldr	r3, [pc, #564]	; (8005f1c <HAL_UART_IRQHandler+0x2b8>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005cee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005cf2:	4b8b      	ldr	r3, [pc, #556]	; (8005f20 <HAL_UART_IRQHandler+0x2bc>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 8116 	beq.w	8005f28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d011      	beq.n	8005d2c <HAL_UART_IRQHandler+0xc8>
 8005d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	f043 0201 	orr.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d011      	beq.n	8005d5c <HAL_UART_IRQHandler+0xf8>
 8005d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f043 0204 	orr.w	r2, r3, #4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d011      	beq.n	8005d8c <HAL_UART_IRQHandler+0x128>
 8005d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2204      	movs	r2, #4
 8005d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d82:	f043 0202 	orr.w	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d017      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005da4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005da8:	4b5c      	ldr	r3, [pc, #368]	; (8005f1c <HAL_UART_IRQHandler+0x2b8>)
 8005daa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00b      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2208      	movs	r2, #8
 8005db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbe:	f043 0208 	orr.w	r2, r3, #8
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d012      	beq.n	8005dfa <HAL_UART_IRQHandler+0x196>
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00c      	beq.n	8005dfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df0:	f043 0220 	orr.w	r2, r3, #32
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 82dd 	beq.w	80063c0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d013      	beq.n	8005e3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d105      	bne.n	8005e2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d005      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d054      	beq.n	8005f08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fb22 	bl	80074a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d146      	bne.n	8005f00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3308      	adds	r3, #8
 8005e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1d9      	bne.n	8005e72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d017      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ece:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <HAL_UART_IRQHandler+0x2c0>)
 8005ed0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fb febd 	bl	8001c58 <HAL_DMA_Abort_IT>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d019      	beq.n	8005f18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef6:	e00f      	b.n	8005f18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa81 	bl	8006400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efe:	e00b      	b.n	8005f18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa7d 	bl	8006400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f06:	e007      	b.n	8005f18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fa79 	bl	8006400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005f16:	e253      	b.n	80063c0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f18:	bf00      	nop
    return;
 8005f1a:	e251      	b.n	80063c0 <HAL_UART_IRQHandler+0x75c>
 8005f1c:	10000001 	.word	0x10000001
 8005f20:	04000120 	.word	0x04000120
 8005f24:	08007575 	.word	0x08007575

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	f040 81e7 	bne.w	8006300 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f36:	f003 0310 	and.w	r3, r3, #16
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 81e0 	beq.w	8006300 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 81d9 	beq.w	8006300 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2210      	movs	r2, #16
 8005f54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	f040 8151 	bne.w	8006208 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a96      	ldr	r2, [pc, #600]	; (80061c8 <HAL_UART_IRQHandler+0x564>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d068      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a93      	ldr	r2, [pc, #588]	; (80061cc <HAL_UART_IRQHandler+0x568>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d061      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a91      	ldr	r2, [pc, #580]	; (80061d0 <HAL_UART_IRQHandler+0x56c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d05a      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a8e      	ldr	r2, [pc, #568]	; (80061d4 <HAL_UART_IRQHandler+0x570>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d053      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a8c      	ldr	r2, [pc, #560]	; (80061d8 <HAL_UART_IRQHandler+0x574>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d04c      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a89      	ldr	r2, [pc, #548]	; (80061dc <HAL_UART_IRQHandler+0x578>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d045      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a87      	ldr	r2, [pc, #540]	; (80061e0 <HAL_UART_IRQHandler+0x57c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d03e      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a84      	ldr	r2, [pc, #528]	; (80061e4 <HAL_UART_IRQHandler+0x580>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d037      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a82      	ldr	r2, [pc, #520]	; (80061e8 <HAL_UART_IRQHandler+0x584>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d030      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a7f      	ldr	r2, [pc, #508]	; (80061ec <HAL_UART_IRQHandler+0x588>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d029      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a7d      	ldr	r2, [pc, #500]	; (80061f0 <HAL_UART_IRQHandler+0x58c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d022      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a7a      	ldr	r2, [pc, #488]	; (80061f4 <HAL_UART_IRQHandler+0x590>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01b      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a78      	ldr	r2, [pc, #480]	; (80061f8 <HAL_UART_IRQHandler+0x594>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d014      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a75      	ldr	r2, [pc, #468]	; (80061fc <HAL_UART_IRQHandler+0x598>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00d      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a73      	ldr	r2, [pc, #460]	; (8006200 <HAL_UART_IRQHandler+0x59c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d006      	beq.n	8006046 <HAL_UART_IRQHandler+0x3e2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a70      	ldr	r2, [pc, #448]	; (8006204 <HAL_UART_IRQHandler+0x5a0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d106      	bne.n	8006054 <HAL_UART_IRQHandler+0x3f0>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	b29b      	uxth	r3, r3
 8006052:	e005      	b.n	8006060 <HAL_UART_IRQHandler+0x3fc>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006064:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 81ab 	beq.w	80063c4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006074:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006078:	429a      	cmp	r2, r3
 800607a:	f080 81a3 	bcs.w	80063c4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006084:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006094:	f000 8087 	beq.w	80061a6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1da      	bne.n	8006098 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3308      	adds	r3, #8
 80060e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3308      	adds	r3, #8
 8006102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006106:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800610a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800610e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e1      	bne.n	80060e2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3308      	adds	r3, #8
 8006124:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800612e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3308      	adds	r3, #8
 800613e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006142:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006144:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006148:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e3      	bne.n	800611e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006174:	f023 0310 	bic.w	r3, r3, #16
 8006178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006186:	65bb      	str	r3, [r7, #88]	; 0x58
 8006188:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800618c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e4      	bne.n	8006164 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fb fa3b 	bl	800161c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2202      	movs	r2, #2
 80061aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	b29b      	uxth	r3, r3
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f927 	bl	8006414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061c6:	e0fd      	b.n	80063c4 <HAL_UART_IRQHandler+0x760>
 80061c8:	40020010 	.word	0x40020010
 80061cc:	40020028 	.word	0x40020028
 80061d0:	40020040 	.word	0x40020040
 80061d4:	40020058 	.word	0x40020058
 80061d8:	40020070 	.word	0x40020070
 80061dc:	40020088 	.word	0x40020088
 80061e0:	400200a0 	.word	0x400200a0
 80061e4:	400200b8 	.word	0x400200b8
 80061e8:	40020410 	.word	0x40020410
 80061ec:	40020428 	.word	0x40020428
 80061f0:	40020440 	.word	0x40020440
 80061f4:	40020458 	.word	0x40020458
 80061f8:	40020470 	.word	0x40020470
 80061fc:	40020488 	.word	0x40020488
 8006200:	400204a0 	.word	0x400204a0
 8006204:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006214:	b29b      	uxth	r3, r3
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80cf 	beq.w	80063c8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800622a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80ca 	beq.w	80063c8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006248:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006256:	647b      	str	r3, [r7, #68]	; 0x44
 8006258:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800625c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e4      	bne.n	8006234 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	623b      	str	r3, [r7, #32]
   return(result);
 800627a:	6a3a      	ldr	r2, [r7, #32]
 800627c:	4b55      	ldr	r3, [pc, #340]	; (80063d4 <HAL_UART_IRQHandler+0x770>)
 800627e:	4013      	ands	r3, r2
 8006280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800628e:	633a      	str	r2, [r7, #48]	; 0x30
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e3      	bne.n	800626a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0310 	bic.w	r3, r3, #16
 80062ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	617b      	str	r3, [r7, #20]
   return(result);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e4      	bne.n	80062b6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f88b 	bl	8006414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062fe:	e063      	b.n	80063c8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00e      	beq.n	800632a <HAL_UART_IRQHandler+0x6c6>
 800630c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 fe84 	bl	8008030 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006328:	e051      	b.n	80063ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d014      	beq.n	8006360 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633e:	2b00      	cmp	r3, #0
 8006340:	d105      	bne.n	800634e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006352:	2b00      	cmp	r3, #0
 8006354:	d03a      	beq.n	80063cc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	4798      	blx	r3
    }
    return;
 800635e:	e035      	b.n	80063cc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d009      	beq.n	8006380 <HAL_UART_IRQHandler+0x71c>
 800636c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 f911 	bl	80075a0 <UART_EndTransmit_IT>
    return;
 800637e:	e026      	b.n	80063ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d009      	beq.n	80063a0 <HAL_UART_IRQHandler+0x73c>
 800638c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006390:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 fe5d 	bl	8008058 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800639e:	e016      	b.n	80063ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d010      	beq.n	80063ce <HAL_UART_IRQHandler+0x76a>
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	da0c      	bge.n	80063ce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 fe45 	bl	8008044 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ba:	e008      	b.n	80063ce <HAL_UART_IRQHandler+0x76a>
      return;
 80063bc:	bf00      	nop
 80063be:	e006      	b.n	80063ce <HAL_UART_IRQHandler+0x76a>
    return;
 80063c0:	bf00      	nop
 80063c2:	e004      	b.n	80063ce <HAL_UART_IRQHandler+0x76a>
      return;
 80063c4:	bf00      	nop
 80063c6:	e002      	b.n	80063ce <HAL_UART_IRQHandler+0x76a>
      return;
 80063c8:	bf00      	nop
 80063ca:	e000      	b.n	80063ce <HAL_UART_IRQHandler+0x76a>
    return;
 80063cc:	bf00      	nop
  }
}
 80063ce:	37e8      	adds	r7, #232	; 0xe8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	effffffe 	.word	0xeffffffe

080063d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800642c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006430:	b092      	sub	sp, #72	; 0x48
 8006432:	af00      	add	r7, sp, #0
 8006434:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	431a      	orrs	r2, r3
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	431a      	orrs	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	4313      	orrs	r3, r2
 8006452:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4bbe      	ldr	r3, [pc, #760]	; (8006754 <UART_SetConfig+0x328>)
 800645c:	4013      	ands	r3, r2
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006464:	430b      	orrs	r3, r1
 8006466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4ab3      	ldr	r2, [pc, #716]	; (8006758 <UART_SetConfig+0x32c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006494:	4313      	orrs	r3, r2
 8006496:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	4baf      	ldr	r3, [pc, #700]	; (800675c <UART_SetConfig+0x330>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	6812      	ldr	r2, [r2, #0]
 80064a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064a8:	430b      	orrs	r3, r1
 80064aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	f023 010f 	bic.w	r1, r3, #15
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4aa6      	ldr	r2, [pc, #664]	; (8006760 <UART_SetConfig+0x334>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d177      	bne.n	80065bc <UART_SetConfig+0x190>
 80064cc:	4ba5      	ldr	r3, [pc, #660]	; (8006764 <UART_SetConfig+0x338>)
 80064ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064d4:	2b28      	cmp	r3, #40	; 0x28
 80064d6:	d86d      	bhi.n	80065b4 <UART_SetConfig+0x188>
 80064d8:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <UART_SetConfig+0xb4>)
 80064da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064de:	bf00      	nop
 80064e0:	08006585 	.word	0x08006585
 80064e4:	080065b5 	.word	0x080065b5
 80064e8:	080065b5 	.word	0x080065b5
 80064ec:	080065b5 	.word	0x080065b5
 80064f0:	080065b5 	.word	0x080065b5
 80064f4:	080065b5 	.word	0x080065b5
 80064f8:	080065b5 	.word	0x080065b5
 80064fc:	080065b5 	.word	0x080065b5
 8006500:	0800658d 	.word	0x0800658d
 8006504:	080065b5 	.word	0x080065b5
 8006508:	080065b5 	.word	0x080065b5
 800650c:	080065b5 	.word	0x080065b5
 8006510:	080065b5 	.word	0x080065b5
 8006514:	080065b5 	.word	0x080065b5
 8006518:	080065b5 	.word	0x080065b5
 800651c:	080065b5 	.word	0x080065b5
 8006520:	08006595 	.word	0x08006595
 8006524:	080065b5 	.word	0x080065b5
 8006528:	080065b5 	.word	0x080065b5
 800652c:	080065b5 	.word	0x080065b5
 8006530:	080065b5 	.word	0x080065b5
 8006534:	080065b5 	.word	0x080065b5
 8006538:	080065b5 	.word	0x080065b5
 800653c:	080065b5 	.word	0x080065b5
 8006540:	0800659d 	.word	0x0800659d
 8006544:	080065b5 	.word	0x080065b5
 8006548:	080065b5 	.word	0x080065b5
 800654c:	080065b5 	.word	0x080065b5
 8006550:	080065b5 	.word	0x080065b5
 8006554:	080065b5 	.word	0x080065b5
 8006558:	080065b5 	.word	0x080065b5
 800655c:	080065b5 	.word	0x080065b5
 8006560:	080065a5 	.word	0x080065a5
 8006564:	080065b5 	.word	0x080065b5
 8006568:	080065b5 	.word	0x080065b5
 800656c:	080065b5 	.word	0x080065b5
 8006570:	080065b5 	.word	0x080065b5
 8006574:	080065b5 	.word	0x080065b5
 8006578:	080065b5 	.word	0x080065b5
 800657c:	080065b5 	.word	0x080065b5
 8006580:	080065ad 	.word	0x080065ad
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658a:	e222      	b.n	80069d2 <UART_SetConfig+0x5a6>
 800658c:	2304      	movs	r3, #4
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006592:	e21e      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006594:	2308      	movs	r3, #8
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659a:	e21a      	b.n	80069d2 <UART_SetConfig+0x5a6>
 800659c:	2310      	movs	r3, #16
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a2:	e216      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80065a4:	2320      	movs	r3, #32
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065aa:	e212      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80065ac:	2340      	movs	r3, #64	; 0x40
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b2:	e20e      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80065b4:	2380      	movs	r3, #128	; 0x80
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ba:	e20a      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a69      	ldr	r2, [pc, #420]	; (8006768 <UART_SetConfig+0x33c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d130      	bne.n	8006628 <UART_SetConfig+0x1fc>
 80065c6:	4b67      	ldr	r3, [pc, #412]	; (8006764 <UART_SetConfig+0x338>)
 80065c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d826      	bhi.n	8006620 <UART_SetConfig+0x1f4>
 80065d2:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <UART_SetConfig+0x1ac>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	080065f1 	.word	0x080065f1
 80065dc:	080065f9 	.word	0x080065f9
 80065e0:	08006601 	.word	0x08006601
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006611 	.word	0x08006611
 80065ec:	08006619 	.word	0x08006619
 80065f0:	2300      	movs	r3, #0
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f6:	e1ec      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fe:	e1e8      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006606:	e1e4      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660e:	e1e0      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006610:	2320      	movs	r3, #32
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006616:	e1dc      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006618:	2340      	movs	r3, #64	; 0x40
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661e:	e1d8      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006620:	2380      	movs	r3, #128	; 0x80
 8006622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006626:	e1d4      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a4f      	ldr	r2, [pc, #316]	; (800676c <UART_SetConfig+0x340>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d130      	bne.n	8006694 <UART_SetConfig+0x268>
 8006632:	4b4c      	ldr	r3, [pc, #304]	; (8006764 <UART_SetConfig+0x338>)
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	2b05      	cmp	r3, #5
 800663c:	d826      	bhi.n	800668c <UART_SetConfig+0x260>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0x218>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	0800665d 	.word	0x0800665d
 8006648:	08006665 	.word	0x08006665
 800664c:	0800666d 	.word	0x0800666d
 8006650:	08006675 	.word	0x08006675
 8006654:	0800667d 	.word	0x0800667d
 8006658:	08006685 	.word	0x08006685
 800665c:	2300      	movs	r3, #0
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006662:	e1b6      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006664:	2304      	movs	r3, #4
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666a:	e1b2      	b.n	80069d2 <UART_SetConfig+0x5a6>
 800666c:	2308      	movs	r3, #8
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006672:	e1ae      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006674:	2310      	movs	r3, #16
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667a:	e1aa      	b.n	80069d2 <UART_SetConfig+0x5a6>
 800667c:	2320      	movs	r3, #32
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006682:	e1a6      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668a:	e1a2      	b.n	80069d2 <UART_SetConfig+0x5a6>
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006692:	e19e      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a35      	ldr	r2, [pc, #212]	; (8006770 <UART_SetConfig+0x344>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d130      	bne.n	8006700 <UART_SetConfig+0x2d4>
 800669e:	4b31      	ldr	r3, [pc, #196]	; (8006764 <UART_SetConfig+0x338>)
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	d826      	bhi.n	80066f8 <UART_SetConfig+0x2cc>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <UART_SetConfig+0x284>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066c9 	.word	0x080066c9
 80066b4:	080066d1 	.word	0x080066d1
 80066b8:	080066d9 	.word	0x080066d9
 80066bc:	080066e1 	.word	0x080066e1
 80066c0:	080066e9 	.word	0x080066e9
 80066c4:	080066f1 	.word	0x080066f1
 80066c8:	2300      	movs	r3, #0
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ce:	e180      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80066d0:	2304      	movs	r3, #4
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d6:	e17c      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80066d8:	2308      	movs	r3, #8
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066de:	e178      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80066e0:	2310      	movs	r3, #16
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e6:	e174      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80066e8:	2320      	movs	r3, #32
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ee:	e170      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80066f0:	2340      	movs	r3, #64	; 0x40
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f6:	e16c      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fe:	e168      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1b      	ldr	r2, [pc, #108]	; (8006774 <UART_SetConfig+0x348>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d142      	bne.n	8006790 <UART_SetConfig+0x364>
 800670a:	4b16      	ldr	r3, [pc, #88]	; (8006764 <UART_SetConfig+0x338>)
 800670c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	2b05      	cmp	r3, #5
 8006714:	d838      	bhi.n	8006788 <UART_SetConfig+0x35c>
 8006716:	a201      	add	r2, pc, #4	; (adr r2, 800671c <UART_SetConfig+0x2f0>)
 8006718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671c:	08006735 	.word	0x08006735
 8006720:	0800673d 	.word	0x0800673d
 8006724:	08006745 	.word	0x08006745
 8006728:	0800674d 	.word	0x0800674d
 800672c:	08006779 	.word	0x08006779
 8006730:	08006781 	.word	0x08006781
 8006734:	2300      	movs	r3, #0
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673a:	e14a      	b.n	80069d2 <UART_SetConfig+0x5a6>
 800673c:	2304      	movs	r3, #4
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006742:	e146      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006744:	2308      	movs	r3, #8
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674a:	e142      	b.n	80069d2 <UART_SetConfig+0x5a6>
 800674c:	2310      	movs	r3, #16
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006752:	e13e      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006754:	cfff69f3 	.word	0xcfff69f3
 8006758:	58000c00 	.word	0x58000c00
 800675c:	11fff4ff 	.word	0x11fff4ff
 8006760:	40011000 	.word	0x40011000
 8006764:	58024400 	.word	0x58024400
 8006768:	40004400 	.word	0x40004400
 800676c:	40004800 	.word	0x40004800
 8006770:	40004c00 	.word	0x40004c00
 8006774:	40005000 	.word	0x40005000
 8006778:	2320      	movs	r3, #32
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677e:	e128      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006780:	2340      	movs	r3, #64	; 0x40
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006786:	e124      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006788:	2380      	movs	r3, #128	; 0x80
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678e:	e120      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4acb      	ldr	r2, [pc, #812]	; (8006ac4 <UART_SetConfig+0x698>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d176      	bne.n	8006888 <UART_SetConfig+0x45c>
 800679a:	4bcb      	ldr	r3, [pc, #812]	; (8006ac8 <UART_SetConfig+0x69c>)
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067a2:	2b28      	cmp	r3, #40	; 0x28
 80067a4:	d86c      	bhi.n	8006880 <UART_SetConfig+0x454>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0x380>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	08006851 	.word	0x08006851
 80067b0:	08006881 	.word	0x08006881
 80067b4:	08006881 	.word	0x08006881
 80067b8:	08006881 	.word	0x08006881
 80067bc:	08006881 	.word	0x08006881
 80067c0:	08006881 	.word	0x08006881
 80067c4:	08006881 	.word	0x08006881
 80067c8:	08006881 	.word	0x08006881
 80067cc:	08006859 	.word	0x08006859
 80067d0:	08006881 	.word	0x08006881
 80067d4:	08006881 	.word	0x08006881
 80067d8:	08006881 	.word	0x08006881
 80067dc:	08006881 	.word	0x08006881
 80067e0:	08006881 	.word	0x08006881
 80067e4:	08006881 	.word	0x08006881
 80067e8:	08006881 	.word	0x08006881
 80067ec:	08006861 	.word	0x08006861
 80067f0:	08006881 	.word	0x08006881
 80067f4:	08006881 	.word	0x08006881
 80067f8:	08006881 	.word	0x08006881
 80067fc:	08006881 	.word	0x08006881
 8006800:	08006881 	.word	0x08006881
 8006804:	08006881 	.word	0x08006881
 8006808:	08006881 	.word	0x08006881
 800680c:	08006869 	.word	0x08006869
 8006810:	08006881 	.word	0x08006881
 8006814:	08006881 	.word	0x08006881
 8006818:	08006881 	.word	0x08006881
 800681c:	08006881 	.word	0x08006881
 8006820:	08006881 	.word	0x08006881
 8006824:	08006881 	.word	0x08006881
 8006828:	08006881 	.word	0x08006881
 800682c:	08006871 	.word	0x08006871
 8006830:	08006881 	.word	0x08006881
 8006834:	08006881 	.word	0x08006881
 8006838:	08006881 	.word	0x08006881
 800683c:	08006881 	.word	0x08006881
 8006840:	08006881 	.word	0x08006881
 8006844:	08006881 	.word	0x08006881
 8006848:	08006881 	.word	0x08006881
 800684c:	08006879 	.word	0x08006879
 8006850:	2301      	movs	r3, #1
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006856:	e0bc      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006858:	2304      	movs	r3, #4
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685e:	e0b8      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006860:	2308      	movs	r3, #8
 8006862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006866:	e0b4      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006868:	2310      	movs	r3, #16
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686e:	e0b0      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006870:	2320      	movs	r3, #32
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006876:	e0ac      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006878:	2340      	movs	r3, #64	; 0x40
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687e:	e0a8      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006880:	2380      	movs	r3, #128	; 0x80
 8006882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006886:	e0a4      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a8f      	ldr	r2, [pc, #572]	; (8006acc <UART_SetConfig+0x6a0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d130      	bne.n	80068f4 <UART_SetConfig+0x4c8>
 8006892:	4b8d      	ldr	r3, [pc, #564]	; (8006ac8 <UART_SetConfig+0x69c>)
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b05      	cmp	r3, #5
 800689c:	d826      	bhi.n	80068ec <UART_SetConfig+0x4c0>
 800689e:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <UART_SetConfig+0x478>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068bd 	.word	0x080068bd
 80068a8:	080068c5 	.word	0x080068c5
 80068ac:	080068cd 	.word	0x080068cd
 80068b0:	080068d5 	.word	0x080068d5
 80068b4:	080068dd 	.word	0x080068dd
 80068b8:	080068e5 	.word	0x080068e5
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068c2:	e086      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80068c4:	2304      	movs	r3, #4
 80068c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ca:	e082      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d2:	e07e      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068da:	e07a      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80068dc:	2320      	movs	r3, #32
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e2:	e076      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80068e4:	2340      	movs	r3, #64	; 0x40
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ea:	e072      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80068ec:	2380      	movs	r3, #128	; 0x80
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f2:	e06e      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a75      	ldr	r2, [pc, #468]	; (8006ad0 <UART_SetConfig+0x6a4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d130      	bne.n	8006960 <UART_SetConfig+0x534>
 80068fe:	4b72      	ldr	r3, [pc, #456]	; (8006ac8 <UART_SetConfig+0x69c>)
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	2b05      	cmp	r3, #5
 8006908:	d826      	bhi.n	8006958 <UART_SetConfig+0x52c>
 800690a:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <UART_SetConfig+0x4e4>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	08006929 	.word	0x08006929
 8006914:	08006931 	.word	0x08006931
 8006918:	08006939 	.word	0x08006939
 800691c:	08006941 	.word	0x08006941
 8006920:	08006949 	.word	0x08006949
 8006924:	08006951 	.word	0x08006951
 8006928:	2300      	movs	r3, #0
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692e:	e050      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006930:	2304      	movs	r3, #4
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006936:	e04c      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006938:	2308      	movs	r3, #8
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693e:	e048      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006940:	2310      	movs	r3, #16
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006946:	e044      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006948:	2320      	movs	r3, #32
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694e:	e040      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006950:	2340      	movs	r3, #64	; 0x40
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006956:	e03c      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006958:	2380      	movs	r3, #128	; 0x80
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695e:	e038      	b.n	80069d2 <UART_SetConfig+0x5a6>
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a5b      	ldr	r2, [pc, #364]	; (8006ad4 <UART_SetConfig+0x6a8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d130      	bne.n	80069cc <UART_SetConfig+0x5a0>
 800696a:	4b57      	ldr	r3, [pc, #348]	; (8006ac8 <UART_SetConfig+0x69c>)
 800696c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	2b05      	cmp	r3, #5
 8006974:	d826      	bhi.n	80069c4 <UART_SetConfig+0x598>
 8006976:	a201      	add	r2, pc, #4	; (adr r2, 800697c <UART_SetConfig+0x550>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	08006995 	.word	0x08006995
 8006980:	0800699d 	.word	0x0800699d
 8006984:	080069a5 	.word	0x080069a5
 8006988:	080069ad 	.word	0x080069ad
 800698c:	080069b5 	.word	0x080069b5
 8006990:	080069bd 	.word	0x080069bd
 8006994:	2302      	movs	r3, #2
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699a:	e01a      	b.n	80069d2 <UART_SetConfig+0x5a6>
 800699c:	2304      	movs	r3, #4
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a2:	e016      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80069a4:	2308      	movs	r3, #8
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069aa:	e012      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80069ac:	2310      	movs	r3, #16
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b2:	e00e      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80069b4:	2320      	movs	r3, #32
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ba:	e00a      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80069bc:	2340      	movs	r3, #64	; 0x40
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c2:	e006      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80069c4:	2380      	movs	r3, #128	; 0x80
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ca:	e002      	b.n	80069d2 <UART_SetConfig+0x5a6>
 80069cc:	2380      	movs	r3, #128	; 0x80
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a3f      	ldr	r2, [pc, #252]	; (8006ad4 <UART_SetConfig+0x6a8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	f040 80f8 	bne.w	8006bce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	dc46      	bgt.n	8006a74 <UART_SetConfig+0x648>
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	f2c0 8082 	blt.w	8006af0 <UART_SetConfig+0x6c4>
 80069ec:	3b02      	subs	r3, #2
 80069ee:	2b1e      	cmp	r3, #30
 80069f0:	d87e      	bhi.n	8006af0 <UART_SetConfig+0x6c4>
 80069f2:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <UART_SetConfig+0x5cc>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a7b 	.word	0x08006a7b
 80069fc:	08006af1 	.word	0x08006af1
 8006a00:	08006a83 	.word	0x08006a83
 8006a04:	08006af1 	.word	0x08006af1
 8006a08:	08006af1 	.word	0x08006af1
 8006a0c:	08006af1 	.word	0x08006af1
 8006a10:	08006a93 	.word	0x08006a93
 8006a14:	08006af1 	.word	0x08006af1
 8006a18:	08006af1 	.word	0x08006af1
 8006a1c:	08006af1 	.word	0x08006af1
 8006a20:	08006af1 	.word	0x08006af1
 8006a24:	08006af1 	.word	0x08006af1
 8006a28:	08006af1 	.word	0x08006af1
 8006a2c:	08006af1 	.word	0x08006af1
 8006a30:	08006aa3 	.word	0x08006aa3
 8006a34:	08006af1 	.word	0x08006af1
 8006a38:	08006af1 	.word	0x08006af1
 8006a3c:	08006af1 	.word	0x08006af1
 8006a40:	08006af1 	.word	0x08006af1
 8006a44:	08006af1 	.word	0x08006af1
 8006a48:	08006af1 	.word	0x08006af1
 8006a4c:	08006af1 	.word	0x08006af1
 8006a50:	08006af1 	.word	0x08006af1
 8006a54:	08006af1 	.word	0x08006af1
 8006a58:	08006af1 	.word	0x08006af1
 8006a5c:	08006af1 	.word	0x08006af1
 8006a60:	08006af1 	.word	0x08006af1
 8006a64:	08006af1 	.word	0x08006af1
 8006a68:	08006af1 	.word	0x08006af1
 8006a6c:	08006af1 	.word	0x08006af1
 8006a70:	08006ae3 	.word	0x08006ae3
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	d037      	beq.n	8006ae8 <UART_SetConfig+0x6bc>
 8006a78:	e03a      	b.n	8006af0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006a7a:	f7fd ff41 	bl	8004900 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a80:	e03c      	b.n	8006afc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fd ff50 	bl	800492c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a90:	e034      	b.n	8006afc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a92:	f107 0318 	add.w	r3, r7, #24
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe f89c 	bl	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa0:	e02c      	b.n	8006afc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aa2:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <UART_SetConfig+0x69c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006aae:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <UART_SetConfig+0x69c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	08db      	lsrs	r3, r3, #3
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	4a07      	ldr	r2, [pc, #28]	; (8006ad8 <UART_SetConfig+0x6ac>)
 8006aba:	fa22 f303 	lsr.w	r3, r2, r3
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ac0:	e01c      	b.n	8006afc <UART_SetConfig+0x6d0>
 8006ac2:	bf00      	nop
 8006ac4:	40011400 	.word	0x40011400
 8006ac8:	58024400 	.word	0x58024400
 8006acc:	40007800 	.word	0x40007800
 8006ad0:	40007c00 	.word	0x40007c00
 8006ad4:	58000c00 	.word	0x58000c00
 8006ad8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006adc:	4b9d      	ldr	r3, [pc, #628]	; (8006d54 <UART_SetConfig+0x928>)
 8006ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ae0:	e00c      	b.n	8006afc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ae2:	4b9d      	ldr	r3, [pc, #628]	; (8006d58 <UART_SetConfig+0x92c>)
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ae6:	e009      	b.n	8006afc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aee:	e005      	b.n	8006afc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006afa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 81de 	beq.w	8006ec0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	4a94      	ldr	r2, [pc, #592]	; (8006d5c <UART_SetConfig+0x930>)
 8006b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b16:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	4413      	add	r3, r2
 8006b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d305      	bcc.n	8006b34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d903      	bls.n	8006b3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b3a:	e1c1      	b.n	8006ec0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b3e:	2200      	movs	r2, #0
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	60fa      	str	r2, [r7, #12]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	4a84      	ldr	r2, [pc, #528]	; (8006d5c <UART_SetConfig+0x930>)
 8006b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2200      	movs	r2, #0
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b5e:	f7f9 fbbb 	bl	80002d8 <__aeabi_uldivmod>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4610      	mov	r0, r2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	020b      	lsls	r3, r1, #8
 8006b74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b78:	0202      	lsls	r2, r0, #8
 8006b7a:	6979      	ldr	r1, [r7, #20]
 8006b7c:	6849      	ldr	r1, [r1, #4]
 8006b7e:	0849      	lsrs	r1, r1, #1
 8006b80:	2000      	movs	r0, #0
 8006b82:	460c      	mov	r4, r1
 8006b84:	4605      	mov	r5, r0
 8006b86:	eb12 0804 	adds.w	r8, r2, r4
 8006b8a:	eb43 0905 	adc.w	r9, r3, r5
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	469a      	mov	sl, r3
 8006b96:	4693      	mov	fp, r2
 8006b98:	4652      	mov	r2, sl
 8006b9a:	465b      	mov	r3, fp
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	f7f9 fb9a 	bl	80002d8 <__aeabi_uldivmod>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4613      	mov	r3, r2
 8006baa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb2:	d308      	bcc.n	8006bc6 <UART_SetConfig+0x79a>
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bba:	d204      	bcs.n	8006bc6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc2:	60da      	str	r2, [r3, #12]
 8006bc4:	e17c      	b.n	8006ec0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006bcc:	e178      	b.n	8006ec0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd6:	f040 80c5 	bne.w	8006d64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006bda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	dc48      	bgt.n	8006c74 <UART_SetConfig+0x848>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	db7b      	blt.n	8006cde <UART_SetConfig+0x8b2>
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d879      	bhi.n	8006cde <UART_SetConfig+0x8b2>
 8006bea:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <UART_SetConfig+0x7c4>)
 8006bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf0:	08006c7b 	.word	0x08006c7b
 8006bf4:	08006c83 	.word	0x08006c83
 8006bf8:	08006cdf 	.word	0x08006cdf
 8006bfc:	08006cdf 	.word	0x08006cdf
 8006c00:	08006c8b 	.word	0x08006c8b
 8006c04:	08006cdf 	.word	0x08006cdf
 8006c08:	08006cdf 	.word	0x08006cdf
 8006c0c:	08006cdf 	.word	0x08006cdf
 8006c10:	08006c9b 	.word	0x08006c9b
 8006c14:	08006cdf 	.word	0x08006cdf
 8006c18:	08006cdf 	.word	0x08006cdf
 8006c1c:	08006cdf 	.word	0x08006cdf
 8006c20:	08006cdf 	.word	0x08006cdf
 8006c24:	08006cdf 	.word	0x08006cdf
 8006c28:	08006cdf 	.word	0x08006cdf
 8006c2c:	08006cdf 	.word	0x08006cdf
 8006c30:	08006cab 	.word	0x08006cab
 8006c34:	08006cdf 	.word	0x08006cdf
 8006c38:	08006cdf 	.word	0x08006cdf
 8006c3c:	08006cdf 	.word	0x08006cdf
 8006c40:	08006cdf 	.word	0x08006cdf
 8006c44:	08006cdf 	.word	0x08006cdf
 8006c48:	08006cdf 	.word	0x08006cdf
 8006c4c:	08006cdf 	.word	0x08006cdf
 8006c50:	08006cdf 	.word	0x08006cdf
 8006c54:	08006cdf 	.word	0x08006cdf
 8006c58:	08006cdf 	.word	0x08006cdf
 8006c5c:	08006cdf 	.word	0x08006cdf
 8006c60:	08006cdf 	.word	0x08006cdf
 8006c64:	08006cdf 	.word	0x08006cdf
 8006c68:	08006cdf 	.word	0x08006cdf
 8006c6c:	08006cdf 	.word	0x08006cdf
 8006c70:	08006cd1 	.word	0x08006cd1
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	d02e      	beq.n	8006cd6 <UART_SetConfig+0x8aa>
 8006c78:	e031      	b.n	8006cde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c7a:	f7fc fc0b 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8006c7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c80:	e033      	b.n	8006cea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c82:	f7fc fc1d 	bl	80034c0 <HAL_RCC_GetPCLK2Freq>
 8006c86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c88:	e02f      	b.n	8006cea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fd fe4c 	bl	800492c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c98:	e027      	b.n	8006cea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c9a:	f107 0318 	add.w	r3, r7, #24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fd ff98 	bl	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca8:	e01f      	b.n	8006cea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006caa:	4b2d      	ldr	r3, [pc, #180]	; (8006d60 <UART_SetConfig+0x934>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cb6:	4b2a      	ldr	r3, [pc, #168]	; (8006d60 <UART_SetConfig+0x934>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	08db      	lsrs	r3, r3, #3
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	4a24      	ldr	r2, [pc, #144]	; (8006d54 <UART_SetConfig+0x928>)
 8006cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cc8:	e00f      	b.n	8006cea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006cca:	4b22      	ldr	r3, [pc, #136]	; (8006d54 <UART_SetConfig+0x928>)
 8006ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cce:	e00c      	b.n	8006cea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cd0:	4b21      	ldr	r3, [pc, #132]	; (8006d58 <UART_SetConfig+0x92c>)
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd4:	e009      	b.n	8006cea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cdc:	e005      	b.n	8006cea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ce8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80e7 	beq.w	8006ec0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <UART_SetConfig+0x930>)
 8006cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d04:	005a      	lsls	r2, r3, #1
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	085b      	lsrs	r3, r3, #1
 8006d0c:	441a      	add	r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d16:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1a:	2b0f      	cmp	r3, #15
 8006d1c:	d916      	bls.n	8006d4c <UART_SetConfig+0x920>
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d24:	d212      	bcs.n	8006d4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f023 030f 	bic.w	r3, r3, #15
 8006d2e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006d48:	60da      	str	r2, [r3, #12]
 8006d4a:	e0b9      	b.n	8006ec0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d52:	e0b5      	b.n	8006ec0 <UART_SetConfig+0xa94>
 8006d54:	03d09000 	.word	0x03d09000
 8006d58:	003d0900 	.word	0x003d0900
 8006d5c:	08008474 	.word	0x08008474
 8006d60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	dc49      	bgt.n	8006e00 <UART_SetConfig+0x9d4>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	db7c      	blt.n	8006e6a <UART_SetConfig+0xa3e>
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d87a      	bhi.n	8006e6a <UART_SetConfig+0xa3e>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <UART_SetConfig+0x950>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006e07 	.word	0x08006e07
 8006d80:	08006e0f 	.word	0x08006e0f
 8006d84:	08006e6b 	.word	0x08006e6b
 8006d88:	08006e6b 	.word	0x08006e6b
 8006d8c:	08006e17 	.word	0x08006e17
 8006d90:	08006e6b 	.word	0x08006e6b
 8006d94:	08006e6b 	.word	0x08006e6b
 8006d98:	08006e6b 	.word	0x08006e6b
 8006d9c:	08006e27 	.word	0x08006e27
 8006da0:	08006e6b 	.word	0x08006e6b
 8006da4:	08006e6b 	.word	0x08006e6b
 8006da8:	08006e6b 	.word	0x08006e6b
 8006dac:	08006e6b 	.word	0x08006e6b
 8006db0:	08006e6b 	.word	0x08006e6b
 8006db4:	08006e6b 	.word	0x08006e6b
 8006db8:	08006e6b 	.word	0x08006e6b
 8006dbc:	08006e37 	.word	0x08006e37
 8006dc0:	08006e6b 	.word	0x08006e6b
 8006dc4:	08006e6b 	.word	0x08006e6b
 8006dc8:	08006e6b 	.word	0x08006e6b
 8006dcc:	08006e6b 	.word	0x08006e6b
 8006dd0:	08006e6b 	.word	0x08006e6b
 8006dd4:	08006e6b 	.word	0x08006e6b
 8006dd8:	08006e6b 	.word	0x08006e6b
 8006ddc:	08006e6b 	.word	0x08006e6b
 8006de0:	08006e6b 	.word	0x08006e6b
 8006de4:	08006e6b 	.word	0x08006e6b
 8006de8:	08006e6b 	.word	0x08006e6b
 8006dec:	08006e6b 	.word	0x08006e6b
 8006df0:	08006e6b 	.word	0x08006e6b
 8006df4:	08006e6b 	.word	0x08006e6b
 8006df8:	08006e6b 	.word	0x08006e6b
 8006dfc:	08006e5d 	.word	0x08006e5d
 8006e00:	2b40      	cmp	r3, #64	; 0x40
 8006e02:	d02e      	beq.n	8006e62 <UART_SetConfig+0xa36>
 8006e04:	e031      	b.n	8006e6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e06:	f7fc fb45 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8006e0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e0c:	e033      	b.n	8006e76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e0e:	f7fc fb57 	bl	80034c0 <HAL_RCC_GetPCLK2Freq>
 8006e12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e14:	e02f      	b.n	8006e76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fd fd86 	bl	800492c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e24:	e027      	b.n	8006e76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e26:	f107 0318 	add.w	r3, r7, #24
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fd fed2 	bl	8004bd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e34:	e01f      	b.n	8006e76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e36:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <UART_SetConfig+0xac0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e42:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <UART_SetConfig+0xac0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	08db      	lsrs	r3, r3, #3
 8006e48:	f003 0303 	and.w	r3, r3, #3
 8006e4c:	4a28      	ldr	r2, [pc, #160]	; (8006ef0 <UART_SetConfig+0xac4>)
 8006e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e54:	e00f      	b.n	8006e76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006e56:	4b26      	ldr	r3, [pc, #152]	; (8006ef0 <UART_SetConfig+0xac4>)
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e5a:	e00c      	b.n	8006e76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e5c:	4b25      	ldr	r3, [pc, #148]	; (8006ef4 <UART_SetConfig+0xac8>)
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e60:	e009      	b.n	8006e76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e68:	e005      	b.n	8006e76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e74:	bf00      	nop
    }

    if (pclk != 0U)
 8006e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d021      	beq.n	8006ec0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <UART_SetConfig+0xacc>)
 8006e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e86:	461a      	mov	r2, r3
 8006e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	441a      	add	r2, r3
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	2b0f      	cmp	r3, #15
 8006ea4:	d909      	bls.n	8006eba <UART_SetConfig+0xa8e>
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eac:	d205      	bcs.n	8006eba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60da      	str	r2, [r3, #12]
 8006eb8:	e002      	b.n	8006ec0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006edc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3748      	adds	r7, #72	; 0x48
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eea:	bf00      	nop
 8006eec:	58024400 	.word	0x58024400
 8006ef0:	03d09000 	.word	0x03d09000
 8006ef4:	003d0900 	.word	0x003d0900
 8006ef8:	08008474 	.word	0x08008474

08006efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01a      	beq.n	8007012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ffa:	d10a      	bne.n	8007012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	605a      	str	r2, [r3, #4]
  }
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b098      	sub	sp, #96	; 0x60
 8007044:	af02      	add	r7, sp, #8
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007050:	f7fa f9bc 	bl	80013cc <HAL_GetTick>
 8007054:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b08      	cmp	r3, #8
 8007062:	d12f      	bne.n	80070c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800706c:	2200      	movs	r2, #0
 800706e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f88e 	bl	8007194 <UART_WaitOnFlagUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d022      	beq.n	80070c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800708c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007092:	653b      	str	r3, [r7, #80]	; 0x50
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709c:	647b      	str	r3, [r7, #68]	; 0x44
 800709e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e6      	bne.n	800707e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e063      	b.n	800718c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d149      	bne.n	8007166 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070da:	2200      	movs	r2, #0
 80070dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f857 	bl	8007194 <UART_WaitOnFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d03c      	beq.n	8007166 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	623b      	str	r3, [r7, #32]
   return(result);
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007100:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800710a:	633b      	str	r3, [r7, #48]	; 0x30
 800710c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e6      	bne.n	80070ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	60fb      	str	r3, [r7, #12]
   return(result);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f023 0301 	bic.w	r3, r3, #1
 8007134:	64bb      	str	r3, [r7, #72]	; 0x48
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3308      	adds	r3, #8
 800713c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800713e:	61fa      	str	r2, [r7, #28]
 8007140:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	69b9      	ldr	r1, [r7, #24]
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	617b      	str	r3, [r7, #20]
   return(result);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e5      	bne.n	800711e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2220      	movs	r2, #32
 8007156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e012      	b.n	800718c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3758      	adds	r7, #88	; 0x58
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	4613      	mov	r3, r2
 80071a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a4:	e049      	b.n	800723a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d045      	beq.n	800723a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ae:	f7fa f90d 	bl	80013cc <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d302      	bcc.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e048      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d031      	beq.n	800723a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d110      	bne.n	8007206 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2208      	movs	r2, #8
 80071ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 f95b 	bl	80074a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2208      	movs	r2, #8
 80071f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e029      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007214:	d111      	bne.n	800723a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800721e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f941 	bl	80074a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2220      	movs	r2, #32
 800722a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e00f      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69da      	ldr	r2, [r3, #28]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4013      	ands	r3, r2
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	429a      	cmp	r2, r3
 8007248:	bf0c      	ite	eq
 800724a:	2301      	moveq	r3, #1
 800724c:	2300      	movne	r3, #0
 800724e:	b2db      	uxtb	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	429a      	cmp	r2, r3
 8007256:	d0a6      	beq.n	80071a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007264:	b480      	push	{r7}
 8007266:	b0a3      	sub	sp, #140	; 0x8c
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	88fa      	ldrh	r2, [r7, #6]
 800727c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007296:	d10e      	bne.n	80072b6 <UART_Start_Receive_IT+0x52>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d105      	bne.n	80072ac <UART_Start_Receive_IT+0x48>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80072a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072aa:	e02d      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	22ff      	movs	r2, #255	; 0xff
 80072b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072b4:	e028      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10d      	bne.n	80072da <UART_Start_Receive_IT+0x76>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <UART_Start_Receive_IT+0x6c>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	22ff      	movs	r2, #255	; 0xff
 80072ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072ce:	e01b      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	227f      	movs	r2, #127	; 0x7f
 80072d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072d8:	e016      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072e2:	d10d      	bne.n	8007300 <UART_Start_Receive_IT+0x9c>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d104      	bne.n	80072f6 <UART_Start_Receive_IT+0x92>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	227f      	movs	r2, #127	; 0x7f
 80072f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072f4:	e008      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	223f      	movs	r2, #63	; 0x3f
 80072fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072fe:	e003      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2222      	movs	r2, #34	; 0x22
 8007314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800732a:	f043 0301 	orr.w	r3, r3, #1
 800732e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800733c:	673a      	str	r2, [r7, #112]	; 0x70
 800733e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007342:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800734a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e3      	bne.n	8007318 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007358:	d14f      	bne.n	80073fa <UART_Start_Receive_IT+0x196>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007360:	88fa      	ldrh	r2, [r7, #6]
 8007362:	429a      	cmp	r2, r3
 8007364:	d349      	bcc.n	80073fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736e:	d107      	bne.n	8007380 <UART_Start_Receive_IT+0x11c>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d103      	bne.n	8007380 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4a47      	ldr	r2, [pc, #284]	; (8007498 <UART_Start_Receive_IT+0x234>)
 800737c:	675a      	str	r2, [r3, #116]	; 0x74
 800737e:	e002      	b.n	8007386 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4a46      	ldr	r2, [pc, #280]	; (800749c <UART_Start_Receive_IT+0x238>)
 8007384:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01a      	beq.n	80073c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800739c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073b2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e4      	bne.n	800738e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ce:	e853 3f00 	ldrex	r3, [r3]
 80073d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80073e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80073e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ec:	e841 2300 	strex	r3, r2, [r1]
 80073f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e5      	bne.n	80073c4 <UART_Start_Receive_IT+0x160>
 80073f8:	e046      	b.n	8007488 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007402:	d107      	bne.n	8007414 <UART_Start_Receive_IT+0x1b0>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4a24      	ldr	r2, [pc, #144]	; (80074a0 <UART_Start_Receive_IT+0x23c>)
 8007410:	675a      	str	r2, [r3, #116]	; 0x74
 8007412:	e002      	b.n	800741a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4a23      	ldr	r2, [pc, #140]	; (80074a4 <UART_Start_Receive_IT+0x240>)
 8007418:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d019      	beq.n	8007456 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007436:	677b      	str	r3, [r7, #116]	; 0x74
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
 8007442:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e6      	bne.n	8007422 <UART_Start_Receive_IT+0x1be>
 8007454:	e018      	b.n	8007488 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	613b      	str	r3, [r7, #16]
   return(result);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f043 0320 	orr.w	r3, r3, #32
 800746a:	67bb      	str	r3, [r7, #120]	; 0x78
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007474:	623b      	str	r3, [r7, #32]
 8007476:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	69f9      	ldr	r1, [r7, #28]
 800747a:	6a3a      	ldr	r2, [r7, #32]
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	61bb      	str	r3, [r7, #24]
   return(result);
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e6      	bne.n	8007456 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	378c      	adds	r7, #140	; 0x8c
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	08007cc9 	.word	0x08007cc9
 800749c:	08007969 	.word	0x08007969
 80074a0:	080077b1 	.word	0x080077b1
 80074a4:	080075f9 	.word	0x080075f9

080074a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b095      	sub	sp, #84	; 0x54
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ce:	643b      	str	r3, [r7, #64]	; 0x40
 80074d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e6      	bne.n	80074b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3308      	adds	r3, #8
 80074e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	4b1e      	ldr	r3, [pc, #120]	; (8007570 <UART_EndRxTransfer+0xc8>)
 80074f6:	4013      	ands	r3, r2
 80074f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3308      	adds	r3, #8
 8007500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007502:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e5      	bne.n	80074e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d118      	bne.n	8007550 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	60bb      	str	r3, [r7, #8]
   return(result);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f023 0310 	bic.w	r3, r3, #16
 8007532:	647b      	str	r3, [r7, #68]	; 0x44
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6979      	ldr	r1, [r7, #20]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	613b      	str	r3, [r7, #16]
   return(result);
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e6      	bne.n	800751e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007564:	bf00      	nop
 8007566:	3754      	adds	r7, #84	; 0x54
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	effffffe 	.word	0xeffffffe

08007574 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f7fe ff34 	bl	8006400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075bc:	61fb      	str	r3, [r7, #28]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	61bb      	str	r3, [r7, #24]
 80075c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6979      	ldr	r1, [r7, #20]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	613b      	str	r3, [r7, #16]
   return(result);
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e6      	bne.n	80075a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7fe fef5 	bl	80063d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ee:	bf00      	nop
 80075f0:	3720      	adds	r7, #32
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b09c      	sub	sp, #112	; 0x70
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007606:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007610:	2b22      	cmp	r3, #34	; 0x22
 8007612:	f040 80be 	bne.w	8007792 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007620:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007624:	b2d9      	uxtb	r1, r3
 8007626:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800762a:	b2da      	uxtb	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007630:	400a      	ands	r2, r1
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007646:	b29b      	uxth	r3, r3
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007658:	b29b      	uxth	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	f040 80a1 	bne.w	80077a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800766e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007674:	66bb      	str	r3, [r7, #104]	; 0x68
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800767e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007680:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007684:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800768c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e6      	bne.n	8007660 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	f023 0301 	bic.w	r3, r3, #1
 80076a8:	667b      	str	r3, [r7, #100]	; 0x64
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076b2:	647a      	str	r2, [r7, #68]	; 0x44
 80076b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a33      	ldr	r2, [pc, #204]	; (80077ac <UART_RxISR_8BIT+0x1b4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d01f      	beq.n	8007724 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d018      	beq.n	8007724 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007706:	663b      	str	r3, [r7, #96]	; 0x60
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007710:	633b      	str	r3, [r7, #48]	; 0x30
 8007712:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e6      	bne.n	80076f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007728:	2b01      	cmp	r3, #1
 800772a:	d12e      	bne.n	800778a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0310 	bic.w	r3, r3, #16
 8007746:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007750:	61fb      	str	r3, [r7, #28]
 8007752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	69b9      	ldr	r1, [r7, #24]
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	617b      	str	r3, [r7, #20]
   return(result);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e6      	bne.n	8007732 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f003 0310 	and.w	r3, r3, #16
 800776e:	2b10      	cmp	r3, #16
 8007770:	d103      	bne.n	800777a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2210      	movs	r2, #16
 8007778:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fe fe46 	bl	8006414 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007788:	e00b      	b.n	80077a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7fe fe2e 	bl	80063ec <HAL_UART_RxCpltCallback>
}
 8007790:	e007      	b.n	80077a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0208 	orr.w	r2, r2, #8
 80077a0:	619a      	str	r2, [r3, #24]
}
 80077a2:	bf00      	nop
 80077a4:	3770      	adds	r7, #112	; 0x70
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	58000c00 	.word	0x58000c00

080077b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b09c      	sub	sp, #112	; 0x70
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077c8:	2b22      	cmp	r3, #34	; 0x22
 80077ca:	f040 80be 	bne.w	800794a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80077de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80077e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80077e6:	4013      	ands	r3, r2
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f2:	1c9a      	adds	r2, r3, #2
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	f040 80a1 	bne.w	800795a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800782c:	667b      	str	r3, [r7, #100]	; 0x64
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007836:	657b      	str	r3, [r7, #84]	; 0x54
 8007838:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800783c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e6      	bne.n	8007818 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	663b      	str	r3, [r7, #96]	; 0x60
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3308      	adds	r3, #8
 8007868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800786a:	643a      	str	r2, [r7, #64]	; 0x40
 800786c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e5      	bne.n	800784a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a33      	ldr	r2, [pc, #204]	; (8007964 <UART_RxISR_16BIT+0x1b4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d01f      	beq.n	80078dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d018      	beq.n	80078dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d12e      	bne.n	8007942 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f023 0310 	bic.w	r3, r3, #16
 80078fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6979      	ldr	r1, [r7, #20]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	613b      	str	r3, [r7, #16]
   return(result);
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e6      	bne.n	80078ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f003 0310 	and.w	r3, r3, #16
 8007926:	2b10      	cmp	r3, #16
 8007928:	d103      	bne.n	8007932 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2210      	movs	r2, #16
 8007930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fe fd6a 	bl	8006414 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007940:	e00b      	b.n	800795a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fe fd52 	bl	80063ec <HAL_UART_RxCpltCallback>
}
 8007948:	e007      	b.n	800795a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	699a      	ldr	r2, [r3, #24]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0208 	orr.w	r2, r2, #8
 8007958:	619a      	str	r2, [r3, #24]
}
 800795a:	bf00      	nop
 800795c:	3770      	adds	r7, #112	; 0x70
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	58000c00 	.word	0x58000c00

08007968 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b0ac      	sub	sp, #176	; 0xb0
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007976:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800799e:	2b22      	cmp	r3, #34	; 0x22
 80079a0:	f040 8180 	bne.w	8007ca4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079aa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079ae:	e123      	b.n	8007bf8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80079be:	b2d9      	uxtb	r1, r3
 80079c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ca:	400a      	ands	r2, r1
 80079cc:	b2d2      	uxtb	r2, r2
 80079ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80079f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d053      	beq.n	8007aaa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d011      	beq.n	8007a32 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00b      	beq.n	8007a32 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a28:	f043 0201 	orr.w	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d011      	beq.n	8007a62 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a58:	f043 0204 	orr.w	r2, r3, #4
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d011      	beq.n	8007a92 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00b      	beq.n	8007a92 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2204      	movs	r2, #4
 8007a80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a88:	f043 0202 	orr.w	r2, r3, #2
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d006      	beq.n	8007aaa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fe fcaf 	bl	8006400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 80a0 	bne.w	8007bf8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ada:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007adc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007ae0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e4      	bne.n	8007ab8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3308      	adds	r3, #8
 8007af4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007afe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b00:	4b6e      	ldr	r3, [pc, #440]	; (8007cbc <UART_RxISR_8BIT_FIFOEN+0x354>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b12:	66ba      	str	r2, [r7, #104]	; 0x68
 8007b14:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007b18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e3      	bne.n	8007aee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a60      	ldr	r2, [pc, #384]	; (8007cc0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d021      	beq.n	8007b88 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d01a      	beq.n	8007b88 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b74:	657b      	str	r3, [r7, #84]	; 0x54
 8007b76:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e4      	bne.n	8007b52 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d130      	bne.n	8007bf2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9e:	e853 3f00 	ldrex	r3, [r3]
 8007ba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	f023 0310 	bic.w	r3, r3, #16
 8007baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8007bba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e4      	bne.n	8007b96 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f003 0310 	and.w	r3, r3, #16
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d103      	bne.n	8007be2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2210      	movs	r2, #16
 8007be0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fe fc12 	bl	8006414 <HAL_UARTEx_RxEventCallback>
 8007bf0:	e002      	b.n	8007bf8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fe fbfa 	bl	80063ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bf8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f47f aed1 	bne.w	80079b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d049      	beq.n	8007cb4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c26:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d242      	bcs.n	8007cb4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3308      	adds	r3, #8
 8007c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e3      	bne.n	8007c2e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a16      	ldr	r2, [pc, #88]	; (8007cc4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007c6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f043 0320 	orr.w	r3, r3, #32
 8007c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c8e:	61bb      	str	r3, [r7, #24]
 8007c90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	6979      	ldr	r1, [r7, #20]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e4      	bne.n	8007c6c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ca2:	e007      	b.n	8007cb4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0208 	orr.w	r2, r2, #8
 8007cb2:	619a      	str	r2, [r3, #24]
}
 8007cb4:	bf00      	nop
 8007cb6:	37b0      	adds	r7, #176	; 0xb0
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	effffffe 	.word	0xeffffffe
 8007cc0:	58000c00 	.word	0x58000c00
 8007cc4:	080075f9 	.word	0x080075f9

08007cc8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b0ae      	sub	sp, #184	; 0xb8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007cd6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cfe:	2b22      	cmp	r3, #34	; 0x22
 8007d00:	f040 8184 	bne.w	800800c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d0e:	e127      	b.n	8007f60 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007d26:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d38:	1c9a      	adds	r2, r3, #2
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d053      	beq.n	8007e0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d011      	beq.n	8007d96 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2201      	movs	r2, #1
 8007d84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8c:	f043 0201 	orr.w	r2, r3, #1
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d011      	beq.n	8007dc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00b      	beq.n	8007dc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2202      	movs	r2, #2
 8007db4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dbc:	f043 0204 	orr.w	r2, r3, #4
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007dca:	f003 0304 	and.w	r3, r3, #4
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d011      	beq.n	8007df6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007dd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00b      	beq.n	8007df6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2204      	movs	r2, #4
 8007de4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dec:	f043 0202 	orr.w	r2, r3, #2
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d006      	beq.n	8007e0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7fe fafd 	bl	8006400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f040 80a2 	bne.w	8007f60 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e42:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e2      	bne.n	8007e1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e68:	4b6e      	ldr	r3, [pc, #440]	; (8008024 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3308      	adds	r3, #8
 8007e76:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007e7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e3      	bne.n	8007e56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a60      	ldr	r2, [pc, #384]	; (8008028 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d021      	beq.n	8007ef0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01a      	beq.n	8007ef0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007edc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ede:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e4      	bne.n	8007eba <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d130      	bne.n	8007f5a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	e853 3f00 	ldrex	r3, [r3]
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0e:	f023 0310 	bic.w	r3, r3, #16
 8007f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f20:	647b      	str	r3, [r7, #68]	; 0x44
 8007f22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e4      	bne.n	8007efe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	f003 0310 	and.w	r3, r3, #16
 8007f3e:	2b10      	cmp	r3, #16
 8007f40:	d103      	bne.n	8007f4a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2210      	movs	r2, #16
 8007f48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fe fa5e 	bl	8006414 <HAL_UARTEx_RxEventCallback>
 8007f58:	e002      	b.n	8007f60 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7fe fa46 	bl	80063ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f60:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d006      	beq.n	8007f76 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007f68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f47f aecd 	bne.w	8007d10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f7c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f80:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d049      	beq.n	800801c <UART_RxISR_16BIT_FIFOEN+0x354>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f8e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d242      	bcs.n	800801c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007fba:	633a      	str	r2, [r7, #48]	; 0x30
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e3      	bne.n	8007f96 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a16      	ldr	r2, [pc, #88]	; (800802c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007fd2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f043 0320 	orr.w	r3, r3, #32
 8007fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	69b9      	ldr	r1, [r7, #24]
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	617b      	str	r3, [r7, #20]
   return(result);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e4      	bne.n	8007fd4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800800a:	e007      	b.n	800801c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699a      	ldr	r2, [r3, #24]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0208 	orr.w	r2, r2, #8
 800801a:	619a      	str	r2, [r3, #24]
}
 800801c:	bf00      	nop
 800801e:	37b8      	adds	r7, #184	; 0xb8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	effffffe 	.word	0xeffffffe
 8008028:	58000c00 	.word	0x58000c00
 800802c:	080077b1 	.word	0x080077b1

08008030 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <HAL_UARTEx_DisableFifoMode+0x16>
 800807e:	2302      	movs	r3, #2
 8008080:	e027      	b.n	80080d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2224      	movs	r2, #36	; 0x24
 800808e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0201 	bic.w	r2, r2, #1
 80080a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d101      	bne.n	80080f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080f2:	2302      	movs	r3, #2
 80080f4:	e02d      	b.n	8008152 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2224      	movs	r2, #36	; 0x24
 8008102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0201 	bic.w	r2, r2, #1
 800811c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f850 	bl	80081d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2220      	movs	r2, #32
 8008144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800816e:	2302      	movs	r3, #2
 8008170:	e02d      	b.n	80081ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2224      	movs	r2, #36	; 0x24
 800817e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0201 	bic.w	r2, r2, #1
 8008198:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f812 	bl	80081d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d108      	bne.n	80081fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081f8:	e031      	b.n	800825e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081fa:	2310      	movs	r3, #16
 80081fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081fe:	2310      	movs	r3, #16
 8008200:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	0e5b      	lsrs	r3, r3, #25
 800820a:	b2db      	uxtb	r3, r3
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	0f5b      	lsrs	r3, r3, #29
 800821a:	b2db      	uxtb	r3, r3
 800821c:	f003 0307 	and.w	r3, r3, #7
 8008220:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	7b3a      	ldrb	r2, [r7, #12]
 8008226:	4911      	ldr	r1, [pc, #68]	; (800826c <UARTEx_SetNbDataToProcess+0x94>)
 8008228:	5c8a      	ldrb	r2, [r1, r2]
 800822a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800822e:	7b3a      	ldrb	r2, [r7, #12]
 8008230:	490f      	ldr	r1, [pc, #60]	; (8008270 <UARTEx_SetNbDataToProcess+0x98>)
 8008232:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008234:	fb93 f3f2 	sdiv	r3, r3, r2
 8008238:	b29a      	uxth	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	7b7a      	ldrb	r2, [r7, #13]
 8008244:	4909      	ldr	r1, [pc, #36]	; (800826c <UARTEx_SetNbDataToProcess+0x94>)
 8008246:	5c8a      	ldrb	r2, [r1, r2]
 8008248:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800824c:	7b7a      	ldrb	r2, [r7, #13]
 800824e:	4908      	ldr	r1, [pc, #32]	; (8008270 <UARTEx_SetNbDataToProcess+0x98>)
 8008250:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008252:	fb93 f3f2 	sdiv	r3, r3, r2
 8008256:	b29a      	uxth	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800825e:	bf00      	nop
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	0800848c 	.word	0x0800848c
 8008270:	08008494 	.word	0x08008494

08008274 <__errno>:
 8008274:	4b01      	ldr	r3, [pc, #4]	; (800827c <__errno+0x8>)
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	24000010 	.word	0x24000010

08008280 <__libc_init_array>:
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	4d0d      	ldr	r5, [pc, #52]	; (80082b8 <__libc_init_array+0x38>)
 8008284:	4c0d      	ldr	r4, [pc, #52]	; (80082bc <__libc_init_array+0x3c>)
 8008286:	1b64      	subs	r4, r4, r5
 8008288:	10a4      	asrs	r4, r4, #2
 800828a:	2600      	movs	r6, #0
 800828c:	42a6      	cmp	r6, r4
 800828e:	d109      	bne.n	80082a4 <__libc_init_array+0x24>
 8008290:	4d0b      	ldr	r5, [pc, #44]	; (80082c0 <__libc_init_array+0x40>)
 8008292:	4c0c      	ldr	r4, [pc, #48]	; (80082c4 <__libc_init_array+0x44>)
 8008294:	f000 f8da 	bl	800844c <_init>
 8008298:	1b64      	subs	r4, r4, r5
 800829a:	10a4      	asrs	r4, r4, #2
 800829c:	2600      	movs	r6, #0
 800829e:	42a6      	cmp	r6, r4
 80082a0:	d105      	bne.n	80082ae <__libc_init_array+0x2e>
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a8:	4798      	blx	r3
 80082aa:	3601      	adds	r6, #1
 80082ac:	e7ee      	b.n	800828c <__libc_init_array+0xc>
 80082ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b2:	4798      	blx	r3
 80082b4:	3601      	adds	r6, #1
 80082b6:	e7f2      	b.n	800829e <__libc_init_array+0x1e>
 80082b8:	080084a4 	.word	0x080084a4
 80082bc:	080084a4 	.word	0x080084a4
 80082c0:	080084a4 	.word	0x080084a4
 80082c4:	080084a8 	.word	0x080084a8

080082c8 <malloc>:
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <malloc+0xc>)
 80082ca:	4601      	mov	r1, r0
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f000 b82b 	b.w	8008328 <_malloc_r>
 80082d2:	bf00      	nop
 80082d4:	24000010 	.word	0x24000010

080082d8 <memset>:
 80082d8:	4402      	add	r2, r0
 80082da:	4603      	mov	r3, r0
 80082dc:	4293      	cmp	r3, r2
 80082de:	d100      	bne.n	80082e2 <memset+0xa>
 80082e0:	4770      	bx	lr
 80082e2:	f803 1b01 	strb.w	r1, [r3], #1
 80082e6:	e7f9      	b.n	80082dc <memset+0x4>

080082e8 <sbrk_aligned>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	4e0e      	ldr	r6, [pc, #56]	; (8008324 <sbrk_aligned+0x3c>)
 80082ec:	460c      	mov	r4, r1
 80082ee:	6831      	ldr	r1, [r6, #0]
 80082f0:	4605      	mov	r5, r0
 80082f2:	b911      	cbnz	r1, 80082fa <sbrk_aligned+0x12>
 80082f4:	f000 f88c 	bl	8008410 <_sbrk_r>
 80082f8:	6030      	str	r0, [r6, #0]
 80082fa:	4621      	mov	r1, r4
 80082fc:	4628      	mov	r0, r5
 80082fe:	f000 f887 	bl	8008410 <_sbrk_r>
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	d00a      	beq.n	800831c <sbrk_aligned+0x34>
 8008306:	1cc4      	adds	r4, r0, #3
 8008308:	f024 0403 	bic.w	r4, r4, #3
 800830c:	42a0      	cmp	r0, r4
 800830e:	d007      	beq.n	8008320 <sbrk_aligned+0x38>
 8008310:	1a21      	subs	r1, r4, r0
 8008312:	4628      	mov	r0, r5
 8008314:	f000 f87c 	bl	8008410 <_sbrk_r>
 8008318:	3001      	adds	r0, #1
 800831a:	d101      	bne.n	8008320 <sbrk_aligned+0x38>
 800831c:	f04f 34ff 	mov.w	r4, #4294967295
 8008320:	4620      	mov	r0, r4
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	240001e8 	.word	0x240001e8

08008328 <_malloc_r>:
 8008328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832c:	1ccd      	adds	r5, r1, #3
 800832e:	f025 0503 	bic.w	r5, r5, #3
 8008332:	3508      	adds	r5, #8
 8008334:	2d0c      	cmp	r5, #12
 8008336:	bf38      	it	cc
 8008338:	250c      	movcc	r5, #12
 800833a:	2d00      	cmp	r5, #0
 800833c:	4607      	mov	r7, r0
 800833e:	db01      	blt.n	8008344 <_malloc_r+0x1c>
 8008340:	42a9      	cmp	r1, r5
 8008342:	d905      	bls.n	8008350 <_malloc_r+0x28>
 8008344:	230c      	movs	r3, #12
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	2600      	movs	r6, #0
 800834a:	4630      	mov	r0, r6
 800834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008350:	4e2e      	ldr	r6, [pc, #184]	; (800840c <_malloc_r+0xe4>)
 8008352:	f000 f86d 	bl	8008430 <__malloc_lock>
 8008356:	6833      	ldr	r3, [r6, #0]
 8008358:	461c      	mov	r4, r3
 800835a:	bb34      	cbnz	r4, 80083aa <_malloc_r+0x82>
 800835c:	4629      	mov	r1, r5
 800835e:	4638      	mov	r0, r7
 8008360:	f7ff ffc2 	bl	80082e8 <sbrk_aligned>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	4604      	mov	r4, r0
 8008368:	d14d      	bne.n	8008406 <_malloc_r+0xde>
 800836a:	6834      	ldr	r4, [r6, #0]
 800836c:	4626      	mov	r6, r4
 800836e:	2e00      	cmp	r6, #0
 8008370:	d140      	bne.n	80083f4 <_malloc_r+0xcc>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	4631      	mov	r1, r6
 8008376:	4638      	mov	r0, r7
 8008378:	eb04 0803 	add.w	r8, r4, r3
 800837c:	f000 f848 	bl	8008410 <_sbrk_r>
 8008380:	4580      	cmp	r8, r0
 8008382:	d13a      	bne.n	80083fa <_malloc_r+0xd2>
 8008384:	6821      	ldr	r1, [r4, #0]
 8008386:	3503      	adds	r5, #3
 8008388:	1a6d      	subs	r5, r5, r1
 800838a:	f025 0503 	bic.w	r5, r5, #3
 800838e:	3508      	adds	r5, #8
 8008390:	2d0c      	cmp	r5, #12
 8008392:	bf38      	it	cc
 8008394:	250c      	movcc	r5, #12
 8008396:	4629      	mov	r1, r5
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff ffa5 	bl	80082e8 <sbrk_aligned>
 800839e:	3001      	adds	r0, #1
 80083a0:	d02b      	beq.n	80083fa <_malloc_r+0xd2>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	442b      	add	r3, r5
 80083a6:	6023      	str	r3, [r4, #0]
 80083a8:	e00e      	b.n	80083c8 <_malloc_r+0xa0>
 80083aa:	6822      	ldr	r2, [r4, #0]
 80083ac:	1b52      	subs	r2, r2, r5
 80083ae:	d41e      	bmi.n	80083ee <_malloc_r+0xc6>
 80083b0:	2a0b      	cmp	r2, #11
 80083b2:	d916      	bls.n	80083e2 <_malloc_r+0xba>
 80083b4:	1961      	adds	r1, r4, r5
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	6025      	str	r5, [r4, #0]
 80083ba:	bf18      	it	ne
 80083bc:	6059      	strne	r1, [r3, #4]
 80083be:	6863      	ldr	r3, [r4, #4]
 80083c0:	bf08      	it	eq
 80083c2:	6031      	streq	r1, [r6, #0]
 80083c4:	5162      	str	r2, [r4, r5]
 80083c6:	604b      	str	r3, [r1, #4]
 80083c8:	4638      	mov	r0, r7
 80083ca:	f104 060b 	add.w	r6, r4, #11
 80083ce:	f000 f835 	bl	800843c <__malloc_unlock>
 80083d2:	f026 0607 	bic.w	r6, r6, #7
 80083d6:	1d23      	adds	r3, r4, #4
 80083d8:	1af2      	subs	r2, r6, r3
 80083da:	d0b6      	beq.n	800834a <_malloc_r+0x22>
 80083dc:	1b9b      	subs	r3, r3, r6
 80083de:	50a3      	str	r3, [r4, r2]
 80083e0:	e7b3      	b.n	800834a <_malloc_r+0x22>
 80083e2:	6862      	ldr	r2, [r4, #4]
 80083e4:	42a3      	cmp	r3, r4
 80083e6:	bf0c      	ite	eq
 80083e8:	6032      	streq	r2, [r6, #0]
 80083ea:	605a      	strne	r2, [r3, #4]
 80083ec:	e7ec      	b.n	80083c8 <_malloc_r+0xa0>
 80083ee:	4623      	mov	r3, r4
 80083f0:	6864      	ldr	r4, [r4, #4]
 80083f2:	e7b2      	b.n	800835a <_malloc_r+0x32>
 80083f4:	4634      	mov	r4, r6
 80083f6:	6876      	ldr	r6, [r6, #4]
 80083f8:	e7b9      	b.n	800836e <_malloc_r+0x46>
 80083fa:	230c      	movs	r3, #12
 80083fc:	603b      	str	r3, [r7, #0]
 80083fe:	4638      	mov	r0, r7
 8008400:	f000 f81c 	bl	800843c <__malloc_unlock>
 8008404:	e7a1      	b.n	800834a <_malloc_r+0x22>
 8008406:	6025      	str	r5, [r4, #0]
 8008408:	e7de      	b.n	80083c8 <_malloc_r+0xa0>
 800840a:	bf00      	nop
 800840c:	240001e4 	.word	0x240001e4

08008410 <_sbrk_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d06      	ldr	r5, [pc, #24]	; (800842c <_sbrk_r+0x1c>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	f7f8 fbf8 	bl	8000c10 <_sbrk>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_sbrk_r+0x1a>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_sbrk_r+0x1a>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	240001ec 	.word	0x240001ec

08008430 <__malloc_lock>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__malloc_lock+0x8>)
 8008432:	f000 b809 	b.w	8008448 <__retarget_lock_acquire_recursive>
 8008436:	bf00      	nop
 8008438:	240001f0 	.word	0x240001f0

0800843c <__malloc_unlock>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__malloc_unlock+0x8>)
 800843e:	f000 b804 	b.w	800844a <__retarget_lock_release_recursive>
 8008442:	bf00      	nop
 8008444:	240001f0 	.word	0x240001f0

08008448 <__retarget_lock_acquire_recursive>:
 8008448:	4770      	bx	lr

0800844a <__retarget_lock_release_recursive>:
 800844a:	4770      	bx	lr

0800844c <_init>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	bf00      	nop
 8008450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008452:	bc08      	pop	{r3}
 8008454:	469e      	mov	lr, r3
 8008456:	4770      	bx	lr

08008458 <_fini>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	bf00      	nop
 800845c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845e:	bc08      	pop	{r3}
 8008460:	469e      	mov	lr, r3
 8008462:	4770      	bx	lr
