
STM32-blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f7c  08005f7c  00015f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000160  24000010  08005f9c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000170  08005f9c  00020170  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001721d  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028b7  00000000  00000000  0003725b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001020  00000000  00000000  00039b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f18  00000000  00000000  0003ab38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003754b  00000000  00000000  0003ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016363  00000000  00000000  00072f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001611a3  00000000  00000000  000892fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ea4a1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004328  00000000  00000000  001ea4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005f2c 	.word	0x08005f2c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005f2c 	.word	0x08005f2c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b8b      	ldr	r3, [pc, #556]	; (8000820 <MX_GPIO_Init+0x244>)
 80005f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f8:	4a89      	ldr	r2, [pc, #548]	; (8000820 <MX_GPIO_Init+0x244>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000602:	4b87      	ldr	r3, [pc, #540]	; (8000820 <MX_GPIO_Init+0x244>)
 8000604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000610:	4b83      	ldr	r3, [pc, #524]	; (8000820 <MX_GPIO_Init+0x244>)
 8000612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000616:	4a82      	ldr	r2, [pc, #520]	; (8000820 <MX_GPIO_Init+0x244>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000620:	4b7f      	ldr	r3, [pc, #508]	; (8000820 <MX_GPIO_Init+0x244>)
 8000622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b7c      	ldr	r3, [pc, #496]	; (8000820 <MX_GPIO_Init+0x244>)
 8000630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000634:	4a7a      	ldr	r2, [pc, #488]	; (8000820 <MX_GPIO_Init+0x244>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800063e:	4b78      	ldr	r3, [pc, #480]	; (8000820 <MX_GPIO_Init+0x244>)
 8000640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	4b74      	ldr	r3, [pc, #464]	; (8000820 <MX_GPIO_Init+0x244>)
 800064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000652:	4a73      	ldr	r2, [pc, #460]	; (8000820 <MX_GPIO_Init+0x244>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800065c:	4b70      	ldr	r3, [pc, #448]	; (8000820 <MX_GPIO_Init+0x244>)
 800065e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b6d      	ldr	r3, [pc, #436]	; (8000820 <MX_GPIO_Init+0x244>)
 800066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000670:	4a6b      	ldr	r2, [pc, #428]	; (8000820 <MX_GPIO_Init+0x244>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800067a:	4b69      	ldr	r3, [pc, #420]	; (8000820 <MX_GPIO_Init+0x244>)
 800067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000688:	4b65      	ldr	r3, [pc, #404]	; (8000820 <MX_GPIO_Init+0x244>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068e:	4a64      	ldr	r2, [pc, #400]	; (8000820 <MX_GPIO_Init+0x244>)
 8000690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000698:	4b61      	ldr	r3, [pc, #388]	; (8000820 <MX_GPIO_Init+0x244>)
 800069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a6:	4b5e      	ldr	r3, [pc, #376]	; (8000820 <MX_GPIO_Init+0x244>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ac:	4a5c      	ldr	r2, [pc, #368]	; (8000820 <MX_GPIO_Init+0x244>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b6:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <MX_GPIO_Init+0x244>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006bc:	f003 0310 	and.w	r3, r3, #16
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f244 0101 	movw	r1, #16385	; 0x4001
 80006ca:	4856      	ldr	r0, [pc, #344]	; (8000824 <MX_GPIO_Init+0x248>)
 80006cc:	f000 ffb8 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	4854      	ldr	r0, [pc, #336]	; (8000828 <MX_GPIO_Init+0x24c>)
 80006d8:	f000 ffb2 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2102      	movs	r1, #2
 80006e0:	4852      	ldr	r0, [pc, #328]	; (800082c <MX_GPIO_Init+0x250>)
 80006e2:	f000 ffad 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	484d      	ldr	r0, [pc, #308]	; (8000830 <MX_GPIO_Init+0x254>)
 80006fc:	f000 fdf0 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000700:	2332      	movs	r3, #50	; 0x32
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000710:	230b      	movs	r3, #11
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	4845      	ldr	r0, [pc, #276]	; (8000830 <MX_GPIO_Init+0x254>)
 800071c:	f000 fde0 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000720:	2386      	movs	r3, #134	; 0x86
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000730:	230b      	movs	r3, #11
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	483e      	ldr	r0, [pc, #248]	; (8000834 <MX_GPIO_Init+0x258>)
 800073c:	f000 fdd0 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000740:	f244 0301 	movw	r3, #16385	; 0x4001
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	4832      	ldr	r0, [pc, #200]	; (8000824 <MX_GPIO_Init+0x248>)
 800075a:	f000 fdc1 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800075e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000770:	230b      	movs	r3, #11
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	482a      	ldr	r0, [pc, #168]	; (8000824 <MX_GPIO_Init+0x248>)
 800077c:	f000 fdb0 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <MX_GPIO_Init+0x24c>)
 800079a:	f000 fda1 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4821      	ldr	r0, [pc, #132]	; (8000838 <MX_GPIO_Init+0x25c>)
 80007b4:	f000 fd94 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80007b8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80007ca:	230a      	movs	r3, #10
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4817      	ldr	r0, [pc, #92]	; (8000834 <MX_GPIO_Init+0x258>)
 80007d6:	f000 fd83 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ec:	230b      	movs	r3, #11
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4810      	ldr	r0, [pc, #64]	; (8000838 <MX_GPIO_Init+0x25c>)
 80007f8:	f000 fd72 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_GPIO_Init+0x250>)
 8000814:	f000 fd64 	bl	80012e0 <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3730      	adds	r7, #48	; 0x30
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	58024400 	.word	0x58024400
 8000824:	58020400 	.word	0x58020400
 8000828:	58020c00 	.word	0x58020c00
 800082c:	58021000 	.word	0x58021000
 8000830:	58020800 	.word	0x58020800
 8000834:	58020000 	.word	0x58020000
 8000838:	58021800 	.word	0x58021800

0800083c <HAL_TIM_PeriodElapsedCallback>:
 */

#include "system.h"

extern System my_sys;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	if (htim == (&my_sys)->h_timer1) {
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	429a      	cmp	r2, r3
 800084c:	d102      	bne.n	8000854 <HAL_TIM_PeriodElapsedCallback+0x18>
		(&my_sys)->LEDToggle1 = 1; // flip flag
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000850:	2201      	movs	r2, #1
 8000852:	741a      	strb	r2, [r3, #16]
	}
	if (htim == (&my_sys)->h_timer2) {
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	429a      	cmp	r2, r3
 800085c:	d102      	bne.n	8000864 <HAL_TIM_PeriodElapsedCallback+0x28>
		(&my_sys)->LEDToggle2 = 1; // flip flag
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000860:	2201      	movs	r2, #1
 8000862:	745a      	strb	r2, [r3, #17]
	}
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	2400002c 	.word	0x2400002c

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087a:	f000 fb83 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087e:	f000 f81f 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000882:	f7ff feab 	bl	80005dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000886:	f000 fa9d 	bl	8000dc4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800088a:	f000 f9b7 	bl	8000bfc <MX_TIM2_Init>
  MX_TIM3_Init();
 800088e:	f000 fa03 	bl	8000c98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // initialize system variable
  init_system(&my_sys,
 8000892:	2301      	movs	r3, #1
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <main+0x3c>)
 800089e:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <main+0x40>)
 80008a0:	4905      	ldr	r1, [pc, #20]	; (80008b8 <main+0x44>)
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <main+0x48>)
 80008a4:	f000 f8d4 	bl	8000a50 <init_system>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  system_main(&my_sys); // call main loop function
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <main+0x48>)
 80008aa:	f000 f8fb 	bl	8000aa4 <system_main>
 80008ae:	e7fb      	b.n	80008a8 <main+0x34>
 80008b0:	58020400 	.word	0x58020400
 80008b4:	2400008c 	.word	0x2400008c
 80008b8:	24000040 	.word	0x24000040
 80008bc:	2400002c 	.word	0x2400002c

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b09c      	sub	sp, #112	; 0x70
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	224c      	movs	r2, #76	; 0x4c
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f005 fb24 	bl	8005f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2220      	movs	r2, #32
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f005 fb1e 	bl	8005f1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008e0:	2002      	movs	r0, #2
 80008e2:	f000 fee1 	bl	80016a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <SystemClock_Config+0xcc>)
 80008ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ee:	4a27      	ldr	r2, [pc, #156]	; (800098c <SystemClock_Config+0xcc>)
 80008f0:	f023 0301 	bic.w	r3, r3, #1
 80008f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008f6:	4b25      	ldr	r3, [pc, #148]	; (800098c <SystemClock_Config+0xcc>)
 80008f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <SystemClock_Config+0xd0>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000908:	4a21      	ldr	r2, [pc, #132]	; (8000990 <SystemClock_Config+0xd0>)
 800090a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <SystemClock_Config+0xd0>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800091c:	bf00      	nop
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <SystemClock_Config+0xd0>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800092a:	d1f8      	bne.n	800091e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000930:	2301      	movs	r3, #1
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4618      	mov	r0, r3
 8000942:	f000 feeb 	bl	800171c <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800094c:	f000 f822 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	233f      	movs	r3, #63	; 0x3f
 8000952:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2101      	movs	r1, #1
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fb2b 	bl	8001fd0 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000980:	f000 f808 	bl	8000994 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3770      	adds	r7, #112	; 0x70
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	58000400 	.word	0x58000400
 8000990:	58024800 	.word	0x58024800

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_MspInit+0x30>)
 80009a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009ac:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x30>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x30>)
 80009b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	58024400 	.word	0x58024400

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 fb22 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM2_IRQHandler+0x10>)
 8000a2e:	f003 fd57 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	24000040 	.word	0x24000040

08000a3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <TIM3_IRQHandler+0x10>)
 8000a42:	f003 fd4d 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2400008c 	.word	0x2400008c

08000a50 <init_system>:
 */

#include "system.h"

extern System my_sys;
void init_system(System *sys, TIM_HandleTypeDef *h_timer1, TIM_HandleTypeDef *h_timer2, GPIO_TypeDef *h_GPIO, uint16_t LEDPin1, uint16_t LEDPin2) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	603b      	str	r3, [r7, #0]

	// fill my_sys with pointers and variables
	sys->h_timer1 = h_timer1;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	601a      	str	r2, [r3, #0]
	sys->h_timer2 = h_timer2;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	605a      	str	r2, [r3, #4]
	sys->h_GPIO_LED = h_GPIO;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	609a      	str	r2, [r3, #8]
	sys->LEDPin1 = LEDPin1;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	8b3a      	ldrh	r2, [r7, #24]
 8000a74:	819a      	strh	r2, [r3, #12]
	sys->LEDPin2 = LEDPin2;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	8bba      	ldrh	r2, [r7, #28]
 8000a7a:	81da      	strh	r2, [r3, #14]

	// initialize toggle variables
	sys->LEDToggle1 = 0;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	741a      	strb	r2, [r3, #16]
	sys->LEDToggle2 = 0;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2200      	movs	r2, #0
 8000a86:	745a      	strb	r2, [r3, #17]

	// begin timers in interrupt mode
	HAL_TIM_Base_Start_IT(sys->h_timer1);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 fcaf 	bl	80043f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(sys->h_timer2);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 fcaa 	bl	80043f0 <HAL_TIM_Base_Start_IT>

}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <system_main>:




void system_main(System *sys) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
		 * or
		 *
		 * if (flag is raised)
		 * 		perform action, which also lowers flag
		 * */
		if (sys->LEDToggle1 == 1) { // check if flag is raised
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7c1b      	ldrb	r3, [r3, #16]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d10a      	bne.n	8000aca <system_main+0x26>
			sys->LEDToggle1 = 0; // lower flag
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	741a      	strb	r2, [r3, #16]
			HAL_GPIO_TogglePin(sys->h_GPIO_LED, sys->LEDPin1); // toggle pin
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	899b      	ldrh	r3, [r3, #12]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4610      	mov	r0, r2
 8000ac6:	f000 fdd4 	bl	8001672 <HAL_GPIO_TogglePin>
		}
		if (sys->LEDToggle2 == 1) { // check if flag is raised
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7c5b      	ldrb	r3, [r3, #17]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d1ec      	bne.n	8000aac <system_main+0x8>
			sys->LEDToggle2 = 0; // lower flag
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	745a      	strb	r2, [r3, #17]
			HAL_GPIO_TogglePin(sys->h_GPIO_LED, sys->LEDPin2); // toggle pin
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	89db      	ldrh	r3, [r3, #14]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	f000 fdc5 	bl	8001672 <HAL_GPIO_TogglePin>
		if (sys->LEDToggle1 == 1) { // check if flag is raised
 8000ae8:	e7e0      	b.n	8000aac <system_main+0x8>
	...

08000aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000af0:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <SystemInit+0xe4>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a36      	ldr	r2, [pc, #216]	; (8000bd0 <SystemInit+0xe4>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b00:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <SystemInit+0xe8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 030f 	and.w	r3, r3, #15
 8000b08:	2b06      	cmp	r3, #6
 8000b0a:	d807      	bhi.n	8000b1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <SystemInit+0xe8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f023 030f 	bic.w	r3, r3, #15
 8000b14:	4a2f      	ldr	r2, [pc, #188]	; (8000bd4 <SystemInit+0xe8>)
 8000b16:	f043 0307 	orr.w	r3, r3, #7
 8000b1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <SystemInit+0xec>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a2d      	ldr	r2, [pc, #180]	; (8000bd8 <SystemInit+0xec>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <SystemInit+0xec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <SystemInit+0xec>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4929      	ldr	r1, [pc, #164]	; (8000bd8 <SystemInit+0xec>)
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <SystemInit+0xf0>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b3a:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <SystemInit+0xe8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d007      	beq.n	8000b56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b46:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <SystemInit+0xe8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f023 030f 	bic.w	r3, r3, #15
 8000b4e:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <SystemInit+0xe8>)
 8000b50:	f043 0307 	orr.w	r3, r3, #7
 8000b54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <SystemInit+0xec>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <SystemInit+0xec>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <SystemInit+0xec>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <SystemInit+0xec>)
 8000b6a:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <SystemInit+0xf4>)
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <SystemInit+0xec>)
 8000b70:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <SystemInit+0xf8>)
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <SystemInit+0xec>)
 8000b76:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <SystemInit+0xfc>)
 8000b78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <SystemInit+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <SystemInit+0xec>)
 8000b82:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <SystemInit+0xfc>)
 8000b84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <SystemInit+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <SystemInit+0xec>)
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <SystemInit+0xfc>)
 8000b90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <SystemInit+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <SystemInit+0xec>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <SystemInit+0xec>)
 8000b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <SystemInit+0xec>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <SystemInit+0x100>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <SystemInit+0x104>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bb6:	d202      	bcs.n	8000bbe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <SystemInit+0x108>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <SystemInit+0x10c>)
 8000bc0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bc4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	52002000 	.word	0x52002000
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000be0:	02020200 	.word	0x02020200
 8000be4:	01ff0000 	.word	0x01ff0000
 8000be8:	01010280 	.word	0x01010280
 8000bec:	5c001000 	.word	0x5c001000
 8000bf0:	ffff0000 	.word	0xffff0000
 8000bf4:	51008108 	.word	0x51008108
 8000bf8:	52004000 	.word	0x52004000

08000bfc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 640-1;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c24:	f240 227f 	movw	r2, #639	; 0x27f
 8000c28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000-1;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c32:	f247 522f 	movw	r2, #29999	; 0x752f
 8000c36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c44:	4813      	ldr	r0, [pc, #76]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c46:	f003 fb7b 	bl	8004340 <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c50:	f7ff fea0 	bl	8000994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c62:	f003 fd5d 	bl	8004720 <HAL_TIM_ConfigClockSource>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c6c:	f7ff fe92 	bl	8000994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c7e:	f003 ffa7 	bl	8004bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c88:	f7ff fe84 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	3720      	adds	r7, #32
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	24000040 	.word	0x24000040

08000c98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_TIM3_Init+0x98>)
 8000cb8:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <MX_TIM3_Init+0x9c>)
 8000cba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640-1;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_TIM3_Init+0x98>)
 8000cbe:	f240 227f 	movw	r2, #639	; 0x27f
 8000cc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_TIM3_Init+0x98>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_TIM3_Init+0x98>)
 8000ccc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000cd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_TIM3_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_TIM3_Init+0x98>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cde:	4814      	ldr	r0, [pc, #80]	; (8000d30 <MX_TIM3_Init+0x98>)
 8000ce0:	f003 fb2e 	bl	8004340 <HAL_TIM_Base_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000cea:	f7ff fe53 	bl	8000994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_TIM3_Init+0x98>)
 8000cfc:	f003 fd10 	bl	8004720 <HAL_TIM_ConfigClockSource>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000d06:	f7ff fe45 	bl	8000994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_TIM3_Init+0x98>)
 8000d18:	f003 ff5a 	bl	8004bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000d22:	f7ff fe37 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2400008c 	.word	0x2400008c
 8000d34:	40000400 	.word	0x40000400

08000d38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d48:	d117      	bne.n	8000d7a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_TIM_Base_MspInit+0x84>)
 8000d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d50:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <HAL_TIM_Base_MspInit+0x84>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_TIM_Base_MspInit+0x84>)
 8000d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	201c      	movs	r0, #28
 8000d6e:	f000 fa82 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d72:	201c      	movs	r0, #28
 8000d74:	f000 fa99 	bl	80012aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d78:	e01b      	b.n	8000db2 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM3)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_TIM_Base_MspInit+0x88>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d116      	bne.n	8000db2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_TIM_Base_MspInit+0x84>)
 8000d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_TIM_Base_MspInit+0x84>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_TIM_Base_MspInit+0x84>)
 8000d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	201d      	movs	r0, #29
 8000da8:	f000 fa65 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dac:	201d      	movs	r0, #29
 8000dae:	f000 fa7c 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	40000400 	.word	0x40000400

08000dc4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_USART3_UART_Init+0x94>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e0e:	f003 ff8b 	bl	8004d28 <HAL_UART_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e18:	f7ff fdbc 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e20:	f004 ff8d 	bl	8005d3e <HAL_UARTEx_SetTxFifoThreshold>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2a:	f7ff fdb3 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e32:	f004 ffc2 	bl	8005dba <HAL_UARTEx_SetRxFifoThreshold>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f7ff fdaa 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e42:	f004 ff43 	bl	8005ccc <HAL_UARTEx_DisableFifoMode>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f7ff fda2 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	240000d8 	.word	0x240000d8
 8000e58:	40004800 	.word	0x40004800

08000e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0ba      	sub	sp, #232	; 0xe8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	22c0      	movs	r2, #192	; 0xc0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f005 f84d 	bl	8005f1c <memset>
  if(uartHandle->Instance==USART3)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <HAL_UART_MspInit+0xc8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d146      	bne.n	8000f1a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e8c:	f04f 0202 	mov.w	r2, #2
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fc20 	bl	80026e8 <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eae:	f7ff fd71 	bl	8000994 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_UART_MspInit+0xcc>)
 8000eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <HAL_UART_MspInit+0xcc>)
 8000eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ebe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_UART_MspInit+0xcc>)
 8000ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_UART_MspInit+0xcc>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <HAL_UART_MspInit+0xcc>)
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0xcc>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000eee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f08:	2307      	movs	r3, #7
 8000f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_UART_MspInit+0xd0>)
 8000f16:	f000 f9e3 	bl	80012e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	37e8      	adds	r7, #232	; 0xe8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40004800 	.word	0x40004800
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	58020c00 	.word	0x58020c00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f34:	f7ff fdda 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	; (8000f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	; (8000f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f004 ffb9 	bl	8005ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fc87 	bl	8000874 <main>
  bx  lr
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f70:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f74:	08005f8c 	.word	0x08005f8c
  ldr r2, =_sbss
 8000f78:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f7c:	24000170 	.word	0x24000170

08000f80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC3_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f000 f968 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f90:	f001 f9d4 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8000f94:	4602      	mov	r2, r0
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_Init+0x68>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	4913      	ldr	r1, [pc, #76]	; (8000ff0 <HAL_Init+0x6c>)
 8000fa2:	5ccb      	ldrb	r3, [r1, r3]
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_Init+0x68>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_Init+0x6c>)
 8000fb8:	5cd3      	ldrb	r3, [r2, r3]
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_Init+0x70>)
 8000fc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_Init+0x74>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f814 	bl	8000ffc <HAL_InitTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e002      	b.n	8000fe4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fde:	f7ff fcdf 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	08005f44 	.word	0x08005f44
 8000ff4:	24000004 	.word	0x24000004
 8000ff8:	24000000 	.word	0x24000000

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_InitTick+0x60>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e021      	b.n	8001054 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_InitTick+0x64>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_InitTick+0x60>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f94d 	bl	80012c6 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f917 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_InitTick+0x68>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2400000c 	.word	0x2400000c
 8001060:	24000000 	.word	0x24000000
 8001064:	24000008 	.word	0x24000008

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2400000c 	.word	0x2400000c
 800108c:	2400016c 	.word	0x2400016c

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2400016c 	.word	0x2400016c

080010a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetREVID+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0c1b      	lsrs	r3, r3, #16
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	5c001000 	.word	0x5c001000

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00
 8001104:	05fa0000 	.word	0x05fa0000

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012ee:	4b89      	ldr	r3, [pc, #548]	; (8001514 <HAL_GPIO_Init+0x234>)
 80012f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012f2:	e194      	b.n	800161e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8186 	beq.w	8001618 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d005      	beq.n	8001324 <HAL_GPIO_Init+0x44>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d130      	bne.n	8001386 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135a:	2201      	movs	r2, #1
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 0201 	and.w	r2, r3, #1
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b03      	cmp	r3, #3
 8001390:	d017      	beq.n	80013c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d123      	bne.n	8001416 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	69b9      	ldr	r1, [r7, #24]
 8001412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0203 	and.w	r2, r3, #3
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80e0 	beq.w	8001618 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_GPIO_Init+0x238>)
 800145a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800145e:	4a2e      	ldr	r2, [pc, #184]	; (8001518 <HAL_GPIO_Init+0x238>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_GPIO_Init+0x238>)
 800146a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001476:	4a29      	ldr	r2, [pc, #164]	; (800151c <HAL_GPIO_Init+0x23c>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a20      	ldr	r2, [pc, #128]	; (8001520 <HAL_GPIO_Init+0x240>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d052      	beq.n	8001548 <HAL_GPIO_Init+0x268>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <HAL_GPIO_Init+0x244>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d031      	beq.n	800150e <HAL_GPIO_Init+0x22e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <HAL_GPIO_Init+0x248>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d02b      	beq.n	800150a <HAL_GPIO_Init+0x22a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a1d      	ldr	r2, [pc, #116]	; (800152c <HAL_GPIO_Init+0x24c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d025      	beq.n	8001506 <HAL_GPIO_Init+0x226>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_GPIO_Init+0x250>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d01f      	beq.n	8001502 <HAL_GPIO_Init+0x222>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <HAL_GPIO_Init+0x254>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d019      	beq.n	80014fe <HAL_GPIO_Init+0x21e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <HAL_GPIO_Init+0x258>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0x21a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a19      	ldr	r2, [pc, #100]	; (800153c <HAL_GPIO_Init+0x25c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d00d      	beq.n	80014f6 <HAL_GPIO_Init+0x216>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a18      	ldr	r2, [pc, #96]	; (8001540 <HAL_GPIO_Init+0x260>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d007      	beq.n	80014f2 <HAL_GPIO_Init+0x212>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_GPIO_Init+0x264>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d101      	bne.n	80014ee <HAL_GPIO_Init+0x20e>
 80014ea:	2309      	movs	r3, #9
 80014ec:	e02d      	b.n	800154a <HAL_GPIO_Init+0x26a>
 80014ee:	230a      	movs	r3, #10
 80014f0:	e02b      	b.n	800154a <HAL_GPIO_Init+0x26a>
 80014f2:	2308      	movs	r3, #8
 80014f4:	e029      	b.n	800154a <HAL_GPIO_Init+0x26a>
 80014f6:	2307      	movs	r3, #7
 80014f8:	e027      	b.n	800154a <HAL_GPIO_Init+0x26a>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e025      	b.n	800154a <HAL_GPIO_Init+0x26a>
 80014fe:	2305      	movs	r3, #5
 8001500:	e023      	b.n	800154a <HAL_GPIO_Init+0x26a>
 8001502:	2304      	movs	r3, #4
 8001504:	e021      	b.n	800154a <HAL_GPIO_Init+0x26a>
 8001506:	2303      	movs	r3, #3
 8001508:	e01f      	b.n	800154a <HAL_GPIO_Init+0x26a>
 800150a:	2302      	movs	r3, #2
 800150c:	e01d      	b.n	800154a <HAL_GPIO_Init+0x26a>
 800150e:	2301      	movs	r3, #1
 8001510:	e01b      	b.n	800154a <HAL_GPIO_Init+0x26a>
 8001512:	bf00      	nop
 8001514:	58000080 	.word	0x58000080
 8001518:	58024400 	.word	0x58024400
 800151c:	58000400 	.word	0x58000400
 8001520:	58020000 	.word	0x58020000
 8001524:	58020400 	.word	0x58020400
 8001528:	58020800 	.word	0x58020800
 800152c:	58020c00 	.word	0x58020c00
 8001530:	58021000 	.word	0x58021000
 8001534:	58021400 	.word	0x58021400
 8001538:	58021800 	.word	0x58021800
 800153c:	58021c00 	.word	0x58021c00
 8001540:	58022000 	.word	0x58022000
 8001544:	58022400 	.word	0x58022400
 8001548:	2300      	movs	r3, #0
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800155a:	4938      	ldr	r1, [pc, #224]	; (800163c <HAL_GPIO_Init+0x35c>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800158e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	3301      	adds	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	f47f ae63 	bne.w	80012f4 <HAL_GPIO_Init+0x14>
  }
}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	3724      	adds	r7, #36	; 0x24
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	58000400 	.word	0x58000400

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800165c:	e003      	b.n	8001666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	041a      	lsls	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	619a      	str	r2, [r3, #24]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001672:	b480      	push	{r7}
 8001674:	b085      	sub	sp, #20
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001684:	887a      	ldrh	r2, [r7, #2]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	041a      	lsls	r2, r3, #16
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	43d9      	mvns	r1, r3
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	400b      	ands	r3, r1
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_PWREx_ConfigSupply+0x70>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d00a      	beq.n	80016d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_PWREx_ConfigSupply+0x70>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d001      	beq.n	80016ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e01f      	b.n	800170e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e01d      	b.n	800170e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_PWREx_ConfigSupply+0x70>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	f023 0207 	bic.w	r2, r3, #7
 80016da:	490f      	ldr	r1, [pc, #60]	; (8001718 <HAL_PWREx_ConfigSupply+0x70>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016e2:	f7ff fcd5 	bl	8001090 <HAL_GetTick>
 80016e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016e8:	e009      	b.n	80016fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016ea:	f7ff fcd1 	bl	8001090 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016f8:	d901      	bls.n	80016fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e007      	b.n	800170e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_PWREx_ConfigSupply+0x70>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800170a:	d1ee      	bne.n	80016ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	58024800 	.word	0x58024800

0800171c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	; 0x30
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	f000 bc48 	b.w	8001fc0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8088 	beq.w	800184e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173e:	4b99      	ldr	r3, [pc, #612]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001748:	4b96      	ldr	r3, [pc, #600]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	2b10      	cmp	r3, #16
 8001752:	d007      	beq.n	8001764 <HAL_RCC_OscConfig+0x48>
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	2b18      	cmp	r3, #24
 8001758:	d111      	bne.n	800177e <HAL_RCC_OscConfig+0x62>
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	4b8f      	ldr	r3, [pc, #572]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d06d      	beq.n	800184c <HAL_RCC_OscConfig+0x130>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d169      	bne.n	800184c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	f000 bc21 	b.w	8001fc0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x7a>
 8001788:	4b86      	ldr	r3, [pc, #536]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a85      	ldr	r2, [pc, #532]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e02e      	b.n	80017f4 <HAL_RCC_OscConfig+0xd8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x9c>
 800179e:	4b81      	ldr	r3, [pc, #516]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a80      	ldr	r2, [pc, #512]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b7e      	ldr	r3, [pc, #504]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a7d      	ldr	r2, [pc, #500]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e01d      	b.n	80017f4 <HAL_RCC_OscConfig+0xd8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0xc0>
 80017c2:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a74      	ldr	r2, [pc, #464]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0xd8>
 80017dc:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a6d      	ldr	r2, [pc, #436]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fc48 	bl	8001090 <HAL_GetTick>
 8001800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fc44 	bl	8001090 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e3d4      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xe8>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fc34 	bl	8001090 <HAL_GetTick>
 8001828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fc30 	bl	8001090 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e3c0      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x110>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80ca 	beq.w	80019f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185c:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001864:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001866:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <HAL_RCC_OscConfig+0x166>
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	2b18      	cmp	r3, #24
 8001876:	d156      	bne.n	8001926 <HAL_RCC_OscConfig+0x20a>
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d151      	bne.n	8001926 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001882:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x17e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e392      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800189a:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0219 	bic.w	r2, r3, #25
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	493f      	ldr	r1, [pc, #252]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fbf0 	bl	8001090 <HAL_GetTick>
 80018b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fbec 	bl	8001090 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e37c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d2:	f7ff fbe9 	bl	80010a8 <HAL_GetREVID>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80018dc:	4293      	cmp	r3, r2
 80018de:	d817      	bhi.n	8001910 <HAL_RCC_OscConfig+0x1f4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2b40      	cmp	r3, #64	; 0x40
 80018e6:	d108      	bne.n	80018fa <HAL_RCC_OscConfig+0x1de>
 80018e8:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018f0:	4a2c      	ldr	r2, [pc, #176]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80018f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f8:	e07a      	b.n	80019f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	031b      	lsls	r3, r3, #12
 8001908:	4926      	ldr	r1, [pc, #152]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190e:	e06f      	b.n	80019f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	4921      	ldr	r1, [pc, #132]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001924:	e064      	b.n	80019f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d047      	beq.n	80019be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 0219 	bic.w	r2, r3, #25
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	491a      	ldr	r1, [pc, #104]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fba6 	bl	8001090 <HAL_GetTick>
 8001944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fba2 	bl	8001090 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e332      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	f7ff fb9f 	bl	80010a8 <HAL_GetREVID>
 800196a:	4603      	mov	r3, r0
 800196c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001970:	4293      	cmp	r3, r2
 8001972:	d819      	bhi.n	80019a8 <HAL_RCC_OscConfig+0x28c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2b40      	cmp	r3, #64	; 0x40
 800197a:	d108      	bne.n	800198e <HAL_RCC_OscConfig+0x272>
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198a:	6053      	str	r3, [r2, #4]
 800198c:	e030      	b.n	80019f0 <HAL_RCC_OscConfig+0x2d4>
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	031b      	lsls	r3, r3, #12
 800199c:	4901      	ldr	r1, [pc, #4]	; (80019a4 <HAL_RCC_OscConfig+0x288>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
 80019a2:	e025      	b.n	80019f0 <HAL_RCC_OscConfig+0x2d4>
 80019a4:	58024400 	.word	0x58024400
 80019a8:	4b9a      	ldr	r3, [pc, #616]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	4997      	ldr	r1, [pc, #604]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
 80019bc:	e018      	b.n	80019f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019be:	4b95      	ldr	r3, [pc, #596]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a94      	ldr	r2, [pc, #592]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb61 	bl	8001090 <HAL_GetTick>
 80019ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fb5d 	bl	8001090 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e2ed      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019e4:	4b8b      	ldr	r3, [pc, #556]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80a9 	beq.w	8001b50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fe:	4b85      	ldr	r3, [pc, #532]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a08:	4b82      	ldr	r3, [pc, #520]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d007      	beq.n	8001a24 <HAL_RCC_OscConfig+0x308>
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b18      	cmp	r3, #24
 8001a18:	d13a      	bne.n	8001a90 <HAL_RCC_OscConfig+0x374>
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d135      	bne.n	8001a90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a24:	4b7b      	ldr	r3, [pc, #492]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_OscConfig+0x320>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	2b80      	cmp	r3, #128	; 0x80
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e2c1      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a3c:	f7ff fb34 	bl	80010a8 <HAL_GetREVID>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d817      	bhi.n	8001a7a <HAL_RCC_OscConfig+0x35e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	2b20      	cmp	r3, #32
 8001a50:	d108      	bne.n	8001a64 <HAL_RCC_OscConfig+0x348>
 8001a52:	4b70      	ldr	r3, [pc, #448]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a5a:	4a6e      	ldr	r2, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a60:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a62:	e075      	b.n	8001b50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	069b      	lsls	r3, r3, #26
 8001a72:	4968      	ldr	r1, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a78:	e06a      	b.n	8001b50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a7a:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	061b      	lsls	r3, r3, #24
 8001a88:	4962      	ldr	r1, [pc, #392]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a8e:	e05f      	b.n	8001b50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d042      	beq.n	8001b1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a98:	4b5e      	ldr	r3, [pc, #376]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a5d      	ldr	r2, [pc, #372]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff faf4 	bl	8001090 <HAL_GetTick>
 8001aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001aac:	f7ff faf0 	bl	8001090 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e280      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001abe:	4b55      	ldr	r3, [pc, #340]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aca:	f7ff faed 	bl	80010a8 <HAL_GetREVID>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d817      	bhi.n	8001b08 <HAL_RCC_OscConfig+0x3ec>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	d108      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3d6>
 8001ae0:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ae8:	4a4a      	ldr	r2, [pc, #296]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001aea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001aee:	6053      	str	r3, [r2, #4]
 8001af0:	e02e      	b.n	8001b50 <HAL_RCC_OscConfig+0x434>
 8001af2:	4b48      	ldr	r3, [pc, #288]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	069b      	lsls	r3, r3, #26
 8001b00:	4944      	ldr	r1, [pc, #272]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
 8001b06:	e023      	b.n	8001b50 <HAL_RCC_OscConfig+0x434>
 8001b08:	4b42      	ldr	r3, [pc, #264]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	061b      	lsls	r3, r3, #24
 8001b16:	493f      	ldr	r1, [pc, #252]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
 8001b1c:	e018      	b.n	8001b50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a3c      	ldr	r2, [pc, #240]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fab1 	bl	8001090 <HAL_GetTick>
 8001b2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b32:	f7ff faad 	bl	8001090 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e23d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b44:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d036      	beq.n	8001bca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d019      	beq.n	8001b98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b68:	4a2a      	ldr	r2, [pc, #168]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff fa8e 	bl	8001090 <HAL_GetTick>
 8001b74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff fa8a 	bl	8001090 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e21a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x45c>
 8001b96:	e018      	b.n	8001bca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fa74 	bl	8001090 <HAL_GetTick>
 8001ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fa70 	bl	8001090 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e200      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d039      	beq.n	8001c4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d01c      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fa51 	bl	8001090 <HAL_GetTick>
 8001bee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bf2:	f7ff fa4d 	bl	8001090 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1dd      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x4d6>
 8001c10:	e01b      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
 8001c12:	bf00      	nop
 8001c14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c18:	4b9b      	ldr	r3, [pc, #620]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a9a      	ldr	r2, [pc, #616]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c24:	f7ff fa34 	bl	8001090 <HAL_GetTick>
 8001c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c2c:	f7ff fa30 	bl	8001090 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1c0      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c3e:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8081 	beq.w	8001d5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c58:	4b8c      	ldr	r3, [pc, #560]	; (8001e8c <HAL_RCC_OscConfig+0x770>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a8b      	ldr	r2, [pc, #556]	; (8001e8c <HAL_RCC_OscConfig+0x770>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c64:	f7ff fa14 	bl	8001090 <HAL_GetTick>
 8001c68:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6c:	f7ff fa10 	bl	8001090 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1a0      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c7e:	4b83      	ldr	r3, [pc, #524]	; (8001e8c <HAL_RCC_OscConfig+0x770>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d106      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x584>
 8001c92:	4b7d      	ldr	r3, [pc, #500]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a7c      	ldr	r2, [pc, #496]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	e02d      	b.n	8001cfc <HAL_RCC_OscConfig+0x5e0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x5a6>
 8001ca8:	4b77      	ldr	r3, [pc, #476]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a76      	ldr	r2, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb4:	4b74      	ldr	r3, [pc, #464]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb8:	4a73      	ldr	r2, [pc, #460]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001cba:	f023 0304 	bic.w	r3, r3, #4
 8001cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc0:	e01c      	b.n	8001cfc <HAL_RCC_OscConfig+0x5e0>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5c8>
 8001cca:	4b6f      	ldr	r3, [pc, #444]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	4a6e      	ldr	r2, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd6:	4b6c      	ldr	r3, [pc, #432]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	4a6b      	ldr	r2, [pc, #428]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0x5e0>
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a67      	ldr	r2, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	4a64      	ldr	r2, [pc, #400]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001cf6:	f023 0304 	bic.w	r3, r3, #4
 8001cfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d015      	beq.n	8001d30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff f9c4 	bl	8001090 <HAL_GetTick>
 8001d08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7ff f9c0 	bl	8001090 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e14e      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d22:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0ee      	beq.n	8001d0c <HAL_RCC_OscConfig+0x5f0>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff f9ae 	bl	8001090 <HAL_GetTick>
 8001d34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7ff f9aa 	bl	8001090 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e138      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d4e:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1ee      	bne.n	8001d38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 812d 	beq.w	8001fbe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d64:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d6c:	2b18      	cmp	r3, #24
 8001d6e:	f000 80bd 	beq.w	8001eec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	f040 809e 	bne.w	8001eb8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a41      	ldr	r2, [pc, #260]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff f982 	bl	8001090 <HAL_GetTick>
 8001d8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff f97e 	bl	8001090 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e10e      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db2:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <HAL_RCC_OscConfig+0x774>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	4931      	ldr	r1, [pc, #196]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	628b      	str	r3, [r1, #40]	; 0x28
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	025b      	lsls	r3, r3, #9
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	3b01      	subs	r3, #1
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	3b01      	subs	r3, #1
 8001df2:	061b      	lsls	r3, r3, #24
 8001df4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001df8:	4923      	ldr	r1, [pc, #140]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x778>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e16:	00d2      	lsls	r2, r2, #3
 8001e18:	491b      	ldr	r1, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f023 020c 	bic.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4917      	ldr	r1, [pc, #92]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	f023 0202 	bic.w	r2, r3, #2
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	4912      	ldr	r1, [pc, #72]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f907 	bl	8001090 <HAL_GetTick>
 8001e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e84:	e011      	b.n	8001eaa <HAL_RCC_OscConfig+0x78e>
 8001e86:	bf00      	nop
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	58024800 	.word	0x58024800
 8001e90:	fffffc0c 	.word	0xfffffc0c
 8001e94:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff f8fa 	bl	8001090 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e08a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x77c>
 8001eb6:	e082      	b.n	8001fbe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a42      	ldr	r2, [pc, #264]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f8e4 	bl	8001090 <HAL_GetTick>
 8001ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f8e0 	bl	8001090 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e070      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ede:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x7b0>
 8001eea:	e068      	b.n	8001fbe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001eec:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ef2:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d031      	beq.n	8001f64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f003 0203 	and.w	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d12a      	bne.n	8001f64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d122      	bne.n	8001f64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d11a      	bne.n	8001f64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	0a5b      	lsrs	r3, r3, #9
 8001f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d111      	bne.n	8001f64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	0c1b      	lsrs	r3, r3, #16
 8001f44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d108      	bne.n	8001f64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	0e1b      	lsrs	r3, r3, #24
 8001f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e02b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d01f      	beq.n	8001fbe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f8a:	f7ff f881 	bl	8001090 <HAL_GetTick>
 8001f8e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f90:	bf00      	nop
 8001f92:	f7ff f87d 	bl	8001090 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d0f9      	beq.n	8001f92 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_OscConfig+0x8b0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001faa:	00d2      	lsls	r2, r2, #3
 8001fac:	4906      	ldr	r1, [pc, #24]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_RCC_OscConfig+0x8ac>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3730      	adds	r7, #48	; 0x30
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	ffff0007 	.word	0xffff0007

08001fd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e19c      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d910      	bls.n	8002014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b87      	ldr	r3, [pc, #540]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 020f 	bic.w	r2, r3, #15
 8001ffa:	4985      	ldr	r1, [pc, #532]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b83      	ldr	r3, [pc, #524]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e184      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	4b7b      	ldr	r3, [pc, #492]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800202c:	429a      	cmp	r2, r3
 800202e:	d908      	bls.n	8002042 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002030:	4b78      	ldr	r3, [pc, #480]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	4975      	ldr	r1, [pc, #468]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800203e:	4313      	orrs	r3, r2
 8002040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	4b70      	ldr	r3, [pc, #448]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800205a:	429a      	cmp	r2, r3
 800205c:	d908      	bls.n	8002070 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800205e:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	496a      	ldr	r1, [pc, #424]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800206c:	4313      	orrs	r3, r2
 800206e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	4b64      	ldr	r3, [pc, #400]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002088:	429a      	cmp	r2, r3
 800208a:	d908      	bls.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800208c:	4b61      	ldr	r3, [pc, #388]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	495e      	ldr	r1, [pc, #376]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800209a:	4313      	orrs	r3, r2
 800209c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	4b59      	ldr	r3, [pc, #356]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d908      	bls.n	80020cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80020ba:	4b56      	ldr	r3, [pc, #344]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4953      	ldr	r1, [pc, #332]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	4b4d      	ldr	r3, [pc, #308]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d908      	bls.n	80020fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f023 020f 	bic.w	r2, r3, #15
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4947      	ldr	r1, [pc, #284]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d055      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002106:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4940      	ldr	r1, [pc, #256]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002114:	4313      	orrs	r3, r2
 8002116:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d107      	bne.n	8002130 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002120:	4b3c      	ldr	r3, [pc, #240]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d121      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0f6      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d115      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0ea      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0de      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002160:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0d6      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f023 0207 	bic.w	r2, r3, #7
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4925      	ldr	r1, [pc, #148]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 800217e:	4313      	orrs	r3, r2
 8002180:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002182:	f7fe ff85 	bl	8001090 <HAL_GetTick>
 8002186:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218a:	f7fe ff81 	bl	8001090 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0be      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d1eb      	bne.n	800218a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d208      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	490e      	ldr	r1, [pc, #56]	; (8002214 <HAL_RCC_ClockConfig+0x244>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d214      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 020f 	bic.w	r2, r3, #15
 80021f6:	4906      	ldr	r1, [pc, #24]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_RCC_ClockConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e086      	b.n	800231e <HAL_RCC_ClockConfig+0x34e>
 8002210:	52002000 	.word	0x52002000
 8002214:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d010      	beq.n	8002246 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002230:	429a      	cmp	r2, r3
 8002232:	d208      	bcs.n	8002246 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002234:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	4939      	ldr	r1, [pc, #228]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002242:	4313      	orrs	r3, r2
 8002244:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d010      	beq.n	8002274 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800225e:	429a      	cmp	r2, r3
 8002260:	d208      	bcs.n	8002274 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	492e      	ldr	r1, [pc, #184]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002270:	4313      	orrs	r3, r2
 8002272:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d010      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	4b28      	ldr	r3, [pc, #160]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800228c:	429a      	cmp	r2, r3
 800228e:	d208      	bcs.n	80022a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4922      	ldr	r1, [pc, #136]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d010      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d208      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4917      	ldr	r1, [pc, #92]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022d0:	f000 f834 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	4912      	ldr	r1, [pc, #72]	; (800232c <HAL_RCC_ClockConfig+0x35c>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_RCC_ClockConfig+0x358>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_RCC_ClockConfig+0x35c>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_RCC_ClockConfig+0x360>)
 8002306:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x364>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x368>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fe72 	bl	8000ffc <HAL_InitTick>
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	58024400 	.word	0x58024400
 800232c:	08005f44 	.word	0x08005f44
 8002330:	24000004 	.word	0x24000004
 8002334:	24000000 	.word	0x24000000
 8002338:	24000008 	.word	0x24000008

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002342:	4bb3      	ldr	r3, [pc, #716]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800234a:	2b18      	cmp	r3, #24
 800234c:	f200 8155 	bhi.w	80025fa <HAL_RCC_GetSysClockFreq+0x2be>
 8002350:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	080023bd 	.word	0x080023bd
 800235c:	080025fb 	.word	0x080025fb
 8002360:	080025fb 	.word	0x080025fb
 8002364:	080025fb 	.word	0x080025fb
 8002368:	080025fb 	.word	0x080025fb
 800236c:	080025fb 	.word	0x080025fb
 8002370:	080025fb 	.word	0x080025fb
 8002374:	080025fb 	.word	0x080025fb
 8002378:	080023e3 	.word	0x080023e3
 800237c:	080025fb 	.word	0x080025fb
 8002380:	080025fb 	.word	0x080025fb
 8002384:	080025fb 	.word	0x080025fb
 8002388:	080025fb 	.word	0x080025fb
 800238c:	080025fb 	.word	0x080025fb
 8002390:	080025fb 	.word	0x080025fb
 8002394:	080025fb 	.word	0x080025fb
 8002398:	080023e9 	.word	0x080023e9
 800239c:	080025fb 	.word	0x080025fb
 80023a0:	080025fb 	.word	0x080025fb
 80023a4:	080025fb 	.word	0x080025fb
 80023a8:	080025fb 	.word	0x080025fb
 80023ac:	080025fb 	.word	0x080025fb
 80023b0:	080025fb 	.word	0x080025fb
 80023b4:	080025fb 	.word	0x080025fb
 80023b8:	080023ef 	.word	0x080023ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023bc:	4b94      	ldr	r3, [pc, #592]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023c8:	4b91      	ldr	r3, [pc, #580]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	4a90      	ldr	r2, [pc, #576]	; (8002614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80023da:	e111      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023dc:	4b8d      	ldr	r3, [pc, #564]	; (8002614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023de:	61bb      	str	r3, [r7, #24]
      break;
 80023e0:	e10e      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80023e2:	4b8d      	ldr	r3, [pc, #564]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023e4:	61bb      	str	r3, [r7, #24]
      break;
 80023e6:	e10b      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80023e8:	4b8c      	ldr	r3, [pc, #560]	; (800261c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023ea:	61bb      	str	r3, [r7, #24]
      break;
 80023ec:	e108      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023ee:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80023f8:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002402:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002404:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800240e:	4b80      	ldr	r3, [pc, #512]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002426:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80e1 	beq.w	80025f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b02      	cmp	r3, #2
 8002436:	f000 8083 	beq.w	8002540 <HAL_RCC_GetSysClockFreq+0x204>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b02      	cmp	r3, #2
 800243e:	f200 80a1 	bhi.w	8002584 <HAL_RCC_GetSysClockFreq+0x248>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x114>
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d056      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800244e:	e099      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002450:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02d      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800245c:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	4a6b      	ldr	r2, [pc, #428]	; (8002614 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002486:	4b62      	ldr	r3, [pc, #392]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002496:	ed97 6a02 	vldr	s12, [r7, #8]
 800249a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 800249e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80024b6:	e087      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002624 <HAL_RCC_GetSysClockFreq+0x2e8>
 80024c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024da:	ed97 6a02 	vldr	s12, [r7, #8]
 80024de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024fa:	e065      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002506:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002628 <HAL_RCC_GetSysClockFreq+0x2ec>
 800250a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250e:	4b40      	ldr	r3, [pc, #256]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002522:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800252a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800252e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800253e:	e043      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800262c <HAL_RCC_GetSysClockFreq+0x2f0>
 800254e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002562:	ed97 6a02 	vldr	s12, [r7, #8]
 8002566:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 800256a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800256e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800257a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002582:	e021      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800258e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002628 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002596:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002620 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	0a5b      	lsrs	r3, r3, #9
 80025ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d2:	3301      	adds	r3, #1
 80025d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80025e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ec:	ee17 3a90 	vmov	r3, s15
 80025f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80025f2:	e005      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
      break;
 80025f8:	e002      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025fc:	61bb      	str	r3, [r7, #24]
      break;
 80025fe:	bf00      	nop
  }

  return sysclockfreq;
 8002600:	69bb      	ldr	r3, [r7, #24]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	58024400 	.word	0x58024400
 8002614:	03d09000 	.word	0x03d09000
 8002618:	003d0900 	.word	0x003d0900
 800261c:	007a1200 	.word	0x007a1200
 8002620:	46000000 	.word	0x46000000
 8002624:	4c742400 	.word	0x4c742400
 8002628:	4a742400 	.word	0x4a742400
 800262c:	4af42400 	.word	0x4af42400

08002630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002636:	f7ff fe81 	bl	800233c <HAL_RCC_GetSysClockFreq>
 800263a:	4602      	mov	r2, r0
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_GetHCLKFreq+0x50>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	490f      	ldr	r1, [pc, #60]	; (8002684 <HAL_RCC_GetHCLKFreq+0x54>)
 8002648:	5ccb      	ldrb	r3, [r1, r3]
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_GetHCLKFreq+0x50>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_RCC_GetHCLKFreq+0x54>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_RCC_GetHCLKFreq+0x58>)
 800266c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_RCC_GetHCLKFreq+0x58>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	58024400 	.word	0x58024400
 8002684:	08005f44 	.word	0x08005f44
 8002688:	24000004 	.word	0x24000004
 800268c:	24000000 	.word	0x24000000

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002694:	f7ff ffcc 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4904      	ldr	r1, [pc, #16]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58024400 	.word	0x58024400
 80026b8:	08005f44 	.word	0x08005f44

080026bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80026c0:	f7ff ffb6 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4904      	ldr	r1, [pc, #16]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	58024400 	.word	0x58024400
 80026e4:	08005f44 	.word	0x08005f44

080026e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ec:	b0ca      	sub	sp, #296	; 0x128
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800270c:	2500      	movs	r5, #0
 800270e:	ea54 0305 	orrs.w	r3, r4, r5
 8002712:	d049      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800271a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800271e:	d02f      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002720:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002724:	d828      	bhi.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800272a:	d01a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800272c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002730:	d822      	bhi.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800273a:	d007      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800273c:	e01c      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800273e:	4bb8      	ldr	r3, [pc, #736]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	4ab7      	ldr	r2, [pc, #732]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800274a:	e01a      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800274c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002750:	3308      	adds	r3, #8
 8002752:	2102      	movs	r1, #2
 8002754:	4618      	mov	r0, r3
 8002756:	f001 fc8f 	bl	8004078 <RCCEx_PLL2_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002760:	e00f      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002766:	3328      	adds	r3, #40	; 0x28
 8002768:	2102      	movs	r1, #2
 800276a:	4618      	mov	r0, r3
 800276c:	f001 fd36 	bl	80041dc <RCCEx_PLL3_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002776:	e004      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800277e:	e000      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800278a:	4ba5      	ldr	r3, [pc, #660]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800278c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002798:	4aa1      	ldr	r2, [pc, #644]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800279a:	430b      	orrs	r3, r1
 800279c:	6513      	str	r3, [r2, #80]	; 0x50
 800279e:	e003      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80027b4:	f04f 0900 	mov.w	r9, #0
 80027b8:	ea58 0309 	orrs.w	r3, r8, r9
 80027bc:	d047      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80027be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d82a      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80027c8:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	080027e5 	.word	0x080027e5
 80027d4:	080027f3 	.word	0x080027f3
 80027d8:	08002809 	.word	0x08002809
 80027dc:	08002827 	.word	0x08002827
 80027e0:	08002827 	.word	0x08002827
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e4:	4b8e      	ldr	r3, [pc, #568]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	4a8d      	ldr	r2, [pc, #564]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027f0:	e01a      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027f6:	3308      	adds	r3, #8
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 fc3c 	bl	8004078 <RCCEx_PLL2_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002806:	e00f      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800280c:	3328      	adds	r3, #40	; 0x28
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f001 fce3 	bl	80041dc <RCCEx_PLL3_Config>
 8002816:	4603      	mov	r3, r0
 8002818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800281c:	e004      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002824:	e000      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002830:	4b7b      	ldr	r3, [pc, #492]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002834:	f023 0107 	bic.w	r1, r3, #7
 8002838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a78      	ldr	r2, [pc, #480]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002840:	430b      	orrs	r3, r1
 8002842:	6513      	str	r3, [r2, #80]	; 0x50
 8002844:	e003      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800284a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800284e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800285a:	f04f 0b00 	mov.w	fp, #0
 800285e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002862:	d04c      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286e:	d030      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002874:	d829      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002876:	2bc0      	cmp	r3, #192	; 0xc0
 8002878:	d02d      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800287a:	2bc0      	cmp	r3, #192	; 0xc0
 800287c:	d825      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	d018      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002882:	2b80      	cmp	r3, #128	; 0x80
 8002884:	d821      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d007      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800288e:	e01c      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002890:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	4a62      	ldr	r2, [pc, #392]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800289c:	e01c      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028a2:	3308      	adds	r3, #8
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 fbe6 	bl	8004078 <RCCEx_PLL2_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028b2:	e011      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028b8:	3328      	adds	r3, #40	; 0x28
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 fc8d 	bl	80041dc <RCCEx_PLL3_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028c8:	e006      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80028d0:	e002      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80028d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80028e0:	4b4f      	ldr	r3, [pc, #316]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80028e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	4a4c      	ldr	r2, [pc, #304]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6513      	str	r3, [r2, #80]	; 0x50
 80028f4:	e003      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800290a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800290e:	2300      	movs	r3, #0
 8002910:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002914:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002918:	460b      	mov	r3, r1
 800291a:	4313      	orrs	r3, r2
 800291c:	d053      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800291e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800292a:	d035      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800292c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002930:	d82e      	bhi.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002932:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002936:	d031      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002938:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800293c:	d828      	bhi.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800293e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002942:	d01a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002948:	d822      	bhi.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800294e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002952:	d007      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002954:	e01c      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002956:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	4a31      	ldr	r2, [pc, #196]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800295c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002960:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002962:	e01c      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002968:	3308      	adds	r3, #8
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f001 fb83 	bl	8004078 <RCCEx_PLL2_Config>
 8002972:	4603      	mov	r3, r0
 8002974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002978:	e011      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800297a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800297e:	3328      	adds	r3, #40	; 0x28
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f001 fc2a 	bl	80041dc <RCCEx_PLL3_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800298e:	e006      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002996:	e002      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002998:	bf00      	nop
 800299a:	e000      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800299c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800299e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10b      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80029ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029b6:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6593      	str	r3, [r2, #88]	; 0x58
 80029bc:	e003      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80029c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80029d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80029e0:	460b      	mov	r3, r1
 80029e2:	4313      	orrs	r3, r2
 80029e4:	d056      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80029e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f2:	d038      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80029f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f8:	d831      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029fe:	d034      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002a00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a04:	d82b      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a0a:	d01d      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a10:	d825      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002a16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002a1c:	e01f      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a1e:	bf00      	nop
 8002a20:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a24:	4ba2      	ldr	r3, [pc, #648]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	4aa1      	ldr	r2, [pc, #644]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a30:	e01c      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a36:	3308      	adds	r3, #8
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 fb1c 	bl	8004078 <RCCEx_PLL2_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a46:	e011      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a4c:	3328      	adds	r3, #40	; 0x28
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 fbc3 	bl	80041dc <RCCEx_PLL3_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a5c:	e006      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a64:	e002      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a74:	4b8e      	ldr	r3, [pc, #568]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a84:	4a8a      	ldr	r2, [pc, #552]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a86:	430b      	orrs	r3, r1
 8002a88:	6593      	str	r3, [r2, #88]	; 0x58
 8002a8a:	e003      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002aaa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	d03a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	2b30      	cmp	r3, #48	; 0x30
 8002abc:	d01f      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002abe:	2b30      	cmp	r3, #48	; 0x30
 8002ac0:	d819      	bhi.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d815      	bhi.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d019      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d111      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad2:	4b77      	ldr	r3, [pc, #476]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	4a76      	ldr	r2, [pc, #472]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ade:	e011      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 fac5 	bl	8004078 <RCCEx_PLL2_Config>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002af4:	e006      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002afc:	e002      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b0c:	4b68      	ldr	r3, [pc, #416]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	4a65      	ldr	r2, [pc, #404]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b20:	e003      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002b36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002b40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4313      	orrs	r3, r2
 8002b48:	d051      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b54:	d035      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b5a:	d82e      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b60:	d031      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b66:	d828      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6c:	d01a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b72:	d822      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7c:	d007      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002b7e:	e01c      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b8c:	e01c      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b92:	3308      	adds	r3, #8
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 fa6e 	bl	8004078 <RCCEx_PLL2_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ba2:	e011      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ba8:	3328      	adds	r3, #40	; 0x28
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 fb15 	bl	80041dc <RCCEx_PLL3_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bb8:	e006      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002bc0:	e002      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002bd0:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6513      	str	r3, [r2, #80]	; 0x50
 8002be4:	e003      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	d056      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d033      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1e:	d82c      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c24:	d02f      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002c26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c2a:	d826      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c30:	d02b      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002c32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c36:	d820      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c3c:	d012      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002c3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c42:	d81a      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d022      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4c:	d115      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c52:	3308      	adds	r3, #8
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 fa0e 	bl	8004078 <RCCEx_PLL2_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c62:	e015      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c68:	3328      	adds	r3, #40	; 0x28
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 fab5 	bl	80041dc <RCCEx_PLL3_Config>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c78:	e00a      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c80:	e006      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c82:	bf00      	nop
 8002c84:	e004      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c86:	bf00      	nop
 8002c88:	e002      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c8a:	bf00      	nop
 8002c8c:	e000      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10d      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca6:	4a02      	ldr	r2, [pc, #8]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	6513      	str	r3, [r2, #80]	; 0x50
 8002cac:	e006      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002cae:	bf00      	nop
 8002cb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cd2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	d055      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce8:	d033      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cee:	d82c      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d02f      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfa:	d826      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d00:	d02b      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d06:	d820      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d0c:	d012      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d12:	d81a      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d022      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d1c:	d115      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d22:	3308      	adds	r3, #8
 8002d24:	2101      	movs	r1, #1
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 f9a6 	bl	8004078 <RCCEx_PLL2_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d32:	e015      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d38:	3328      	adds	r3, #40	; 0x28
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 fa4d 	bl	80041dc <RCCEx_PLL3_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d48:	e00a      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d50:	e006      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d52:	bf00      	nop
 8002d54:	e004      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d56:	bf00      	nop
 8002d58:	e002      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d68:	4ba3      	ldr	r3, [pc, #652]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d78:	4a9f      	ldr	r2, [pc, #636]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7e:	e003      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002d9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002da2:	460b      	mov	r3, r1
 8002da4:	4313      	orrs	r3, r2
 8002da6:	d037      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db2:	d00e      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db8:	d816      	bhi.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d018      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dc2:	d111      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc4:	4b8c      	ldr	r3, [pc, #560]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	4a8b      	ldr	r2, [pc, #556]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002dd0:	e00f      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	2101      	movs	r1, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f001 f94c 	bl	8004078 <RCCEx_PLL2_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002de6:	e004      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002dee:	e000      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a7b      	ldr	r2, [pc, #492]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	6513      	str	r3, [r2, #80]	; 0x50
 8002e0e:	e003      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4313      	orrs	r3, r2
 8002e36:	d039      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d81c      	bhi.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e85 	.word	0x08002e85
 8002e4c:	08002e59 	.word	0x08002e59
 8002e50:	08002e67 	.word	0x08002e67
 8002e54:	08002e85 	.word	0x08002e85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e58:	4b67      	ldr	r3, [pc, #412]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	4a66      	ldr	r2, [pc, #408]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e64:	e00f      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f902 	bl	8004078 <RCCEx_PLL2_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e7a:	e004      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e82:	e000      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e92:	f023 0103 	bic.w	r1, r3, #3
 8002e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	4a56      	ldr	r2, [pc, #344]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ea2:	e003      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ea8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ec2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f000 809f 	beq.w	800300c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ece:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a4a      	ldr	r2, [pc, #296]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eda:	f7fe f8d9 	bl	8001090 <HAL_GetTick>
 8002ede:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ee2:	e00b      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee4:	f7fe f8d4 	bl	8001090 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d903      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002efa:	e005      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002efc:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ed      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002f08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d179      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f10:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f1c:	4053      	eors	r3, r2
 8002f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d015      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f26:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f32:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a30      	ldr	r2, [pc, #192]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f3e:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	4a2d      	ldr	r2, [pc, #180]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f4a:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5e:	d118      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe f896 	bl	8001090 <HAL_GetTick>
 8002f64:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f68:	e00d      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe f891 	bl	8001090 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f74:	1ad2      	subs	r2, r2, r3
 8002f76:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d903      	bls.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002f84:	e005      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f86:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0eb      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d129      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002faa:	d10e      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002fac:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fbc:	091a      	lsrs	r2, r3, #4
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6113      	str	r3, [r2, #16]
 8002fc8:	e005      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fd4:	6113      	str	r3, [r2, #16]
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe6:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6713      	str	r3, [r2, #112]	; 0x70
 8002fec:	e00e      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ff2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002ff6:	e009      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	58024800 	.word	0x58024800
 8003000:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003008:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800300c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f002 0301 	and.w	r3, r2, #1
 8003018:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003022:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003026:	460b      	mov	r3, r1
 8003028:	4313      	orrs	r3, r2
 800302a:	f000 8089 	beq.w	8003140 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800302e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003034:	2b28      	cmp	r3, #40	; 0x28
 8003036:	d86b      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003038:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	08003119 	.word	0x08003119
 8003044:	08003111 	.word	0x08003111
 8003048:	08003111 	.word	0x08003111
 800304c:	08003111 	.word	0x08003111
 8003050:	08003111 	.word	0x08003111
 8003054:	08003111 	.word	0x08003111
 8003058:	08003111 	.word	0x08003111
 800305c:	08003111 	.word	0x08003111
 8003060:	080030e5 	.word	0x080030e5
 8003064:	08003111 	.word	0x08003111
 8003068:	08003111 	.word	0x08003111
 800306c:	08003111 	.word	0x08003111
 8003070:	08003111 	.word	0x08003111
 8003074:	08003111 	.word	0x08003111
 8003078:	08003111 	.word	0x08003111
 800307c:	08003111 	.word	0x08003111
 8003080:	080030fb 	.word	0x080030fb
 8003084:	08003111 	.word	0x08003111
 8003088:	08003111 	.word	0x08003111
 800308c:	08003111 	.word	0x08003111
 8003090:	08003111 	.word	0x08003111
 8003094:	08003111 	.word	0x08003111
 8003098:	08003111 	.word	0x08003111
 800309c:	08003111 	.word	0x08003111
 80030a0:	08003119 	.word	0x08003119
 80030a4:	08003111 	.word	0x08003111
 80030a8:	08003111 	.word	0x08003111
 80030ac:	08003111 	.word	0x08003111
 80030b0:	08003111 	.word	0x08003111
 80030b4:	08003111 	.word	0x08003111
 80030b8:	08003111 	.word	0x08003111
 80030bc:	08003111 	.word	0x08003111
 80030c0:	08003119 	.word	0x08003119
 80030c4:	08003111 	.word	0x08003111
 80030c8:	08003111 	.word	0x08003111
 80030cc:	08003111 	.word	0x08003111
 80030d0:	08003111 	.word	0x08003111
 80030d4:	08003111 	.word	0x08003111
 80030d8:	08003111 	.word	0x08003111
 80030dc:	08003111 	.word	0x08003111
 80030e0:	08003119 	.word	0x08003119
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e8:	3308      	adds	r3, #8
 80030ea:	2101      	movs	r1, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 ffc3 	bl	8004078 <RCCEx_PLL2_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030f8:	e00f      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fe:	3328      	adds	r3, #40	; 0x28
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f001 f86a 	bl	80041dc <RCCEx_PLL3_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800310e:	e004      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003116:	e000      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003122:	4bbf      	ldr	r3, [pc, #764]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800312a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003130:	4abb      	ldr	r2, [pc, #748]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003132:	430b      	orrs	r3, r1
 8003134:	6553      	str	r3, [r2, #84]	; 0x54
 8003136:	e003      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800313c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f002 0302 	and.w	r3, r2, #2
 800314c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003150:	2300      	movs	r3, #0
 8003152:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003156:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800315a:	460b      	mov	r3, r1
 800315c:	4313      	orrs	r3, r2
 800315e:	d041      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003166:	2b05      	cmp	r3, #5
 8003168:	d824      	bhi.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	080031bd 	.word	0x080031bd
 8003174:	08003189 	.word	0x08003189
 8003178:	0800319f 	.word	0x0800319f
 800317c:	080031bd 	.word	0x080031bd
 8003180:	080031bd 	.word	0x080031bd
 8003184:	080031bd 	.word	0x080031bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800318c:	3308      	adds	r3, #8
 800318e:	2101      	movs	r1, #1
 8003190:	4618      	mov	r0, r3
 8003192:	f000 ff71 	bl	8004078 <RCCEx_PLL2_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800319c:	e00f      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a2:	3328      	adds	r3, #40	; 0x28
 80031a4:	2101      	movs	r1, #1
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 f818 	bl	80041dc <RCCEx_PLL3_Config>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031b2:	e004      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031ba:	e000      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80031bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031c6:	4b96      	ldr	r3, [pc, #600]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f023 0107 	bic.w	r1, r3, #7
 80031ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d4:	4a92      	ldr	r2, [pc, #584]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031d6:	430b      	orrs	r3, r1
 80031d8:	6553      	str	r3, [r2, #84]	; 0x54
 80031da:	e003      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f002 0304 	and.w	r3, r2, #4
 80031f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80031fe:	460b      	mov	r3, r1
 8003200:	4313      	orrs	r3, r2
 8003202:	d044      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320c:	2b05      	cmp	r3, #5
 800320e:	d825      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	08003265 	.word	0x08003265
 800321c:	08003231 	.word	0x08003231
 8003220:	08003247 	.word	0x08003247
 8003224:	08003265 	.word	0x08003265
 8003228:	08003265 	.word	0x08003265
 800322c:	08003265 	.word	0x08003265
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003234:	3308      	adds	r3, #8
 8003236:	2101      	movs	r1, #1
 8003238:	4618      	mov	r0, r3
 800323a:	f000 ff1d 	bl	8004078 <RCCEx_PLL2_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003244:	e00f      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800324a:	3328      	adds	r3, #40	; 0x28
 800324c:	2101      	movs	r1, #1
 800324e:	4618      	mov	r0, r3
 8003250:	f000 ffc4 	bl	80041dc <RCCEx_PLL3_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800325a:	e004      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10b      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800326e:	4b6c      	ldr	r3, [pc, #432]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	f023 0107 	bic.w	r1, r3, #7
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800327a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327e:	4a68      	ldr	r2, [pc, #416]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003280:	430b      	orrs	r3, r1
 8003282:	6593      	str	r3, [r2, #88]	; 0x58
 8003284:	e003      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800328a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	f002 0320 	and.w	r3, r2, #32
 800329a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032a8:	460b      	mov	r3, r1
 80032aa:	4313      	orrs	r3, r2
 80032ac:	d055      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80032ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ba:	d033      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80032bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c0:	d82c      	bhi.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c6:	d02f      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d826      	bhi.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032d2:	d02b      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80032d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032d8:	d820      	bhi.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032de:	d012      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80032e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e4:	d81a      	bhi.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d022      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80032ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ee:	d115      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f4:	3308      	adds	r3, #8
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 febd 	bl	8004078 <RCCEx_PLL2_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003304:	e015      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330a:	3328      	adds	r3, #40	; 0x28
 800330c:	2102      	movs	r1, #2
 800330e:	4618      	mov	r0, r3
 8003310:	f000 ff64 	bl	80041dc <RCCEx_PLL3_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800331a:	e00a      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003322:	e006      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003324:	bf00      	nop
 8003326:	e004      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003328:	bf00      	nop
 800332a:	e002      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800332c:	bf00      	nop
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10b      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333a:	4b39      	ldr	r3, [pc, #228]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	4a35      	ldr	r2, [pc, #212]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800334c:	430b      	orrs	r3, r1
 800334e:	6553      	str	r3, [r2, #84]	; 0x54
 8003350:	e003      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003370:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003374:	460b      	mov	r3, r1
 8003376:	4313      	orrs	r3, r2
 8003378:	d058      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003386:	d033      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800338c:	d82c      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800338e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003392:	d02f      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	d826      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800339a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800339e:	d02b      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80033a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033a4:	d820      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033aa:	d012      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80033ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b0:	d81a      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d022      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80033b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ba:	d115      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c0:	3308      	adds	r3, #8
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fe57 	bl	8004078 <RCCEx_PLL2_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033d0:	e015      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d6:	3328      	adds	r3, #40	; 0x28
 80033d8:	2102      	movs	r1, #2
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fefe 	bl	80041dc <RCCEx_PLL3_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033e6:	e00a      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033ee:	e006      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033f0:	bf00      	nop
 80033f2:	e004      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033f4:	bf00      	nop
 80033f6:	e002      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033f8:	bf00      	nop
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003416:	4a02      	ldr	r2, [pc, #8]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003418:	430b      	orrs	r3, r1
 800341a:	6593      	str	r3, [r2, #88]	; 0x58
 800341c:	e006      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800341e:	bf00      	nop
 8003420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003428:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003442:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003446:	460b      	mov	r3, r1
 8003448:	4313      	orrs	r3, r2
 800344a:	d055      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800344c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003450:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003454:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003458:	d033      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800345a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800345e:	d82c      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003464:	d02f      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346a:	d826      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800346c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003470:	d02b      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003472:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003476:	d820      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800347c:	d012      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800347e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003482:	d81a      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d022      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348c:	d115      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003492:	3308      	adds	r3, #8
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fdee 	bl	8004078 <RCCEx_PLL2_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034a2:	e015      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a8:	3328      	adds	r3, #40	; 0x28
 80034aa:	2102      	movs	r1, #2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fe95 	bl	80041dc <RCCEx_PLL3_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034b8:	e00a      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034c0:	e006      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034c2:	bf00      	nop
 80034c4:	e004      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034d8:	4ba1      	ldr	r3, [pc, #644]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034e8:	4a9d      	ldr	r2, [pc, #628]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034ea:	430b      	orrs	r3, r1
 80034ec:	6593      	str	r3, [r2, #88]	; 0x58
 80034ee:	e003      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f002 0308 	and.w	r3, r2, #8
 8003504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800350e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003512:	460b      	mov	r3, r1
 8003514:	4313      	orrs	r3, r2
 8003516:	d01e      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352a:	3328      	adds	r3, #40	; 0x28
 800352c:	2102      	movs	r1, #2
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fe54 	bl	80041dc <RCCEx_PLL3_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003540:	4b87      	ldr	r3, [pc, #540]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003544:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003550:	4a83      	ldr	r2, [pc, #524]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003552:	430b      	orrs	r3, r1
 8003554:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f002 0310 	and.w	r3, r2, #16
 8003562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800356c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003570:	460b      	mov	r3, r1
 8003572:	4313      	orrs	r3, r2
 8003574:	d01e      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800357e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003582:	d10c      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003588:	3328      	adds	r3, #40	; 0x28
 800358a:	2102      	movs	r1, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fe25 	bl	80041dc <RCCEx_PLL3_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800359e:	4b70      	ldr	r3, [pc, #448]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ae:	4a6c      	ldr	r2, [pc, #432]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80035c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80035ce:	460b      	mov	r3, r1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	d03e      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035e0:	d022      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80035e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035e6:	d81b      	bhi.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d00b      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80035f2:	e015      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f8:	3308      	adds	r3, #8
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fd3b 	bl	8004078 <RCCEx_PLL2_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003608:	e00f      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360e:	3328      	adds	r3, #40	; 0x28
 8003610:	2102      	movs	r1, #2
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fde2 	bl	80041dc <RCCEx_PLL3_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800361e:	e004      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003626:	e000      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003632:	4b4b      	ldr	r3, [pc, #300]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800363a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003642:	4a47      	ldr	r2, [pc, #284]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003644:	430b      	orrs	r3, r1
 8003646:	6593      	str	r3, [r2, #88]	; 0x58
 8003648:	e003      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800364e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800365e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003660:	2300      	movs	r3, #0
 8003662:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003664:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003668:	460b      	mov	r3, r1
 800366a:	4313      	orrs	r3, r2
 800366c:	d03b      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800367a:	d01f      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800367c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003680:	d818      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003686:	d003      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800368c:	d007      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800368e:	e011      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003690:	4b33      	ldr	r3, [pc, #204]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	4a32      	ldr	r2, [pc, #200]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800369c:	e00f      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800369e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a2:	3328      	adds	r3, #40	; 0x28
 80036a4:	2101      	movs	r1, #1
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fd98 	bl	80041dc <RCCEx_PLL3_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80036b2:	e004      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80036bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10b      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036c6:	4b26      	ldr	r3, [pc, #152]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80036ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d6:	4a22      	ldr	r2, [pc, #136]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6553      	str	r3, [r2, #84]	; 0x54
 80036dc:	e003      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80036f2:	673b      	str	r3, [r7, #112]	; 0x70
 80036f4:	2300      	movs	r3, #0
 80036f6:	677b      	str	r3, [r7, #116]	; 0x74
 80036f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80036fc:	460b      	mov	r3, r1
 80036fe:	4313      	orrs	r3, r2
 8003700:	d034      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d007      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003712:	e011      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	4a11      	ldr	r2, [pc, #68]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800371a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003720:	e00e      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	3308      	adds	r3, #8
 8003728:	2102      	movs	r1, #2
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fca4 	bl	8004078 <RCCEx_PLL2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003736:	e003      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800373e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10d      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	4a02      	ldr	r2, [pc, #8]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003758:	430b      	orrs	r3, r1
 800375a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800375c:	e006      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800375e:	bf00      	nop
 8003760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800376c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003774:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003778:	66bb      	str	r3, [r7, #104]	; 0x68
 800377a:	2300      	movs	r3, #0
 800377c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800377e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003782:	460b      	mov	r3, r1
 8003784:	4313      	orrs	r3, r2
 8003786:	d00c      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378c:	3328      	adds	r3, #40	; 0x28
 800378e:	2102      	movs	r1, #2
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fd23 	bl	80041dc <RCCEx_PLL3_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80037ae:	663b      	str	r3, [r7, #96]	; 0x60
 80037b0:	2300      	movs	r3, #0
 80037b2:	667b      	str	r3, [r7, #100]	; 0x64
 80037b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80037b8:	460b      	mov	r3, r1
 80037ba:	4313      	orrs	r3, r2
 80037bc:	d038      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ca:	d018      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80037cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d0:	d811      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80037d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d6:	d014      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80037d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037dc:	d80b      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d011      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80037e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e6:	d106      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e8:	4bc3      	ldr	r3, [pc, #780]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	4ac2      	ldr	r2, [pc, #776]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80037f4:	e008      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037fc:	e004      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10b      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003810:	4bb9      	ldr	r3, [pc, #740]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003820:	4ab5      	ldr	r2, [pc, #724]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003822:	430b      	orrs	r3, r1
 8003824:	6553      	str	r3, [r2, #84]	; 0x54
 8003826:	e003      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800382c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800383c:	65bb      	str	r3, [r7, #88]	; 0x58
 800383e:	2300      	movs	r3, #0
 8003840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003842:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003846:	460b      	mov	r3, r1
 8003848:	4313      	orrs	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800384c:	4baa      	ldr	r3, [pc, #680]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800384e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003850:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385a:	4aa7      	ldr	r2, [pc, #668]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800385c:	430b      	orrs	r3, r1
 800385e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800386c:	653b      	str	r3, [r7, #80]	; 0x50
 800386e:	2300      	movs	r3, #0
 8003870:	657b      	str	r3, [r7, #84]	; 0x54
 8003872:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003876:	460b      	mov	r3, r1
 8003878:	4313      	orrs	r3, r2
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800387c:	4b9e      	ldr	r3, [pc, #632]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003888:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800388c:	4a9a      	ldr	r2, [pc, #616]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800388e:	430b      	orrs	r3, r1
 8003890:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a0:	2300      	movs	r3, #0
 80038a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038ae:	4b92      	ldr	r3, [pc, #584]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038bc:	4a8e      	ldr	r2, [pc, #568]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80038ce:	643b      	str	r3, [r7, #64]	; 0x40
 80038d0:	2300      	movs	r3, #0
 80038d2:	647b      	str	r3, [r7, #68]	; 0x44
 80038d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80038d8:	460b      	mov	r3, r1
 80038da:	4313      	orrs	r3, r2
 80038dc:	d00e      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038de:	4b86      	ldr	r3, [pc, #536]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	4a85      	ldr	r2, [pc, #532]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038e8:	6113      	str	r3, [r2, #16]
 80038ea:	4b83      	ldr	r3, [pc, #524]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ec:	6919      	ldr	r1, [r3, #16]
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80038f6:	4a80      	ldr	r2, [pc, #512]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003908:	63bb      	str	r3, [r7, #56]	; 0x38
 800390a:	2300      	movs	r3, #0
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800390e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003912:	460b      	mov	r3, r1
 8003914:	4313      	orrs	r3, r2
 8003916:	d009      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003918:	4b77      	ldr	r3, [pc, #476]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	4a74      	ldr	r2, [pc, #464]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003928:	430b      	orrs	r3, r1
 800392a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800392c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
 800393a:	2300      	movs	r3, #0
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
 800393e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003942:	460b      	mov	r3, r1
 8003944:	4313      	orrs	r3, r2
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003948:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003958:	4a67      	ldr	r2, [pc, #412]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800395a:	430b      	orrs	r3, r1
 800395c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	2100      	movs	r1, #0
 8003968:	62b9      	str	r1, [r7, #40]	; 0x28
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003970:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003974:	460b      	mov	r3, r1
 8003976:	4313      	orrs	r3, r2
 8003978:	d011      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397e:	3308      	adds	r3, #8
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fb78 	bl	8004078 <RCCEx_PLL2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800398e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800399a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	2100      	movs	r1, #0
 80039a8:	6239      	str	r1, [r7, #32]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80039b4:	460b      	mov	r3, r1
 80039b6:	4313      	orrs	r3, r2
 80039b8:	d011      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039be:	3308      	adds	r3, #8
 80039c0:	2101      	movs	r1, #1
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fb58 	bl	8004078 <RCCEx_PLL2_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80039ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	2100      	movs	r1, #0
 80039e8:	61b9      	str	r1, [r7, #24]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039f4:	460b      	mov	r3, r1
 80039f6:	4313      	orrs	r3, r2
 80039f8:	d011      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fe:	3308      	adds	r3, #8
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fb38 	bl	8004078 <RCCEx_PLL2_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	2100      	movs	r1, #0
 8003a28:	6139      	str	r1, [r7, #16]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a34:	460b      	mov	r3, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	d011      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3e:	3328      	adds	r3, #40	; 0x28
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fbca 	bl	80041dc <RCCEx_PLL3_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	2100      	movs	r1, #0
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a74:	460b      	mov	r3, r1
 8003a76:	4313      	orrs	r3, r2
 8003a78:	d011      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7e:	3328      	adds	r3, #40	; 0x28
 8003a80:	2101      	movs	r1, #1
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fbaa 	bl	80041dc <RCCEx_PLL3_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	6039      	str	r1, [r7, #0]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	d011      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003abe:	3328      	adds	r3, #40	; 0x28
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fb8a 	bl	80041dc <RCCEx_PLL3_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003ade:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003af2:	46bd      	mov	sp, r7
 8003af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af8:	58024400 	.word	0x58024400

08003afc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b00:	f7fe fd96 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4904      	ldr	r1, [pc, #16]	; (8003b24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	58024400 	.word	0x58024400
 8003b24:	08005f44 	.word	0x08005f44

08003b28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b089      	sub	sp, #36	; 0x24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b30:	4ba1      	ldr	r3, [pc, #644]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b3a:	4b9f      	ldr	r3, [pc, #636]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	0b1b      	lsrs	r3, r3, #12
 8003b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b46:	4b9c      	ldr	r3, [pc, #624]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b52:	4b99      	ldr	r3, [pc, #612]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	08db      	lsrs	r3, r3, #3
 8003b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8111 	beq.w	8003d98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	f000 8083 	beq.w	8003c84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	f200 80a1 	bhi.w	8003cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d056      	beq.n	8003c40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b92:	e099      	b.n	8003cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b94:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d02d      	beq.n	8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ba0:	4b85      	ldr	r3, [pc, #532]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	08db      	lsrs	r3, r3, #3
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	4a84      	ldr	r2, [pc, #528]	; (8003dbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b7b      	ldr	r3, [pc, #492]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bde:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003bfa:	e087      	b.n	8003d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0e:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c3e:	e065      	b.n	8003d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c52:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c82:	e043      	b.n	8003d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003dcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c96:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003caa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cc6:	e021      	b.n	8003d0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cda:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d0c:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	0a5b      	lsrs	r3, r3, #9
 8003d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d32:	ee17 2a90 	vmov	r2, s15
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	0c1b      	lsrs	r3, r3, #16
 8003d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d54:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d60:	ee17 2a90 	vmov	r2, s15
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d68:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	0e1b      	lsrs	r3, r3, #24
 8003d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d8e:	ee17 2a90 	vmov	r2, s15
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d96:	e008      	b.n	8003daa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	609a      	str	r2, [r3, #8]
}
 8003daa:	bf00      	nop
 8003dac:	3724      	adds	r7, #36	; 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	03d09000 	.word	0x03d09000
 8003dc0:	46000000 	.word	0x46000000
 8003dc4:	4c742400 	.word	0x4c742400
 8003dc8:	4a742400 	.word	0x4a742400
 8003dcc:	4af42400 	.word	0x4af42400

08003dd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b089      	sub	sp, #36	; 0x24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dd8:	4ba1      	ldr	r3, [pc, #644]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003de2:	4b9f      	ldr	r3, [pc, #636]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	0d1b      	lsrs	r3, r3, #20
 8003de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003dee:	4b9c      	ldr	r3, [pc, #624]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003dfa:	4b99      	ldr	r3, [pc, #612]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	08db      	lsrs	r3, r3, #3
 8003e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8111 	beq.w	8004040 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	f000 8083 	beq.w	8003f2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	f200 80a1 	bhi.w	8003f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d056      	beq.n	8003ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003e3a:	e099      	b.n	8003f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e3c:	4b88      	ldr	r3, [pc, #544]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d02d      	beq.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e48:	4b85      	ldr	r3, [pc, #532]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	4a84      	ldr	r2, [pc, #528]	; (8004064 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
 8003e58:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	ee07 3a90 	vmov	s15, r3
 8003e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e72:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ea2:	e087      	b.n	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800406c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb6:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ee6:	e065      	b.n	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efa:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f2a:	e043      	b.n	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004074 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3e:	4b48      	ldr	r3, [pc, #288]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f6e:	e021      	b.n	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f82:	4b37      	ldr	r3, [pc, #220]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004068 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	0a5b      	lsrs	r3, r3, #9
 8003fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fce:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fda:	ee17 2a90 	vmov	r2, s15
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003fe2:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ff8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004008:	ee17 2a90 	vmov	r2, s15
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	0e1b      	lsrs	r3, r3, #24
 8004016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800402a:	edd7 6a07 	vldr	s13, [r7, #28]
 800402e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004036:	ee17 2a90 	vmov	r2, s15
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800403e:	e008      	b.n	8004052 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
}
 8004052:	bf00      	nop
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	58024400 	.word	0x58024400
 8004064:	03d09000 	.word	0x03d09000
 8004068:	46000000 	.word	0x46000000
 800406c:	4c742400 	.word	0x4c742400
 8004070:	4a742400 	.word	0x4a742400
 8004074:	4af42400 	.word	0x4af42400

08004078 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004086:	4b53      	ldr	r3, [pc, #332]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b03      	cmp	r3, #3
 8004090:	d101      	bne.n	8004096 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e099      	b.n	80041ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004096:	4b4f      	ldr	r3, [pc, #316]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a4e      	ldr	r2, [pc, #312]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 800409c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a2:	f7fc fff5 	bl	8001090 <HAL_GetTick>
 80040a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040a8:	e008      	b.n	80040bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040aa:	f7fc fff1 	bl	8001090 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e086      	b.n	80041ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040bc:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80040c8:	4b42      	ldr	r3, [pc, #264]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	031b      	lsls	r3, r3, #12
 80040d6:	493f      	ldr	r1, [pc, #252]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	628b      	str	r3, [r1, #40]	; 0x28
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	025b      	lsls	r3, r3, #9
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	3b01      	subs	r3, #1
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800410c:	4931      	ldr	r1, [pc, #196]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 800410e:	4313      	orrs	r3, r2
 8004110:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004112:	4b30      	ldr	r3, [pc, #192]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	492d      	ldr	r1, [pc, #180]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004120:	4313      	orrs	r3, r2
 8004122:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004124:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	f023 0220 	bic.w	r2, r3, #32
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	4928      	ldr	r1, [pc, #160]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004136:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 800413c:	f023 0310 	bic.w	r3, r3, #16
 8004140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004146:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <RCCEx_PLL2_Config+0x160>)
 8004148:	4013      	ands	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	69d2      	ldr	r2, [r2, #28]
 800414e:	00d2      	lsls	r2, r2, #3
 8004150:	4920      	ldr	r1, [pc, #128]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004152:	4313      	orrs	r3, r2
 8004154:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004156:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	4a1e      	ldr	r2, [pc, #120]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 800415c:	f043 0310 	orr.w	r3, r3, #16
 8004160:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 800416e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004172:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004174:	e00f      	b.n	8004196 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d106      	bne.n	800418a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800417c:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004186:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004188:	e005      	b.n	8004196 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	4a11      	ldr	r2, [pc, #68]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004194:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 800419c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a2:	f7fc ff75 	bl	8001090 <HAL_GetTick>
 80041a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041a8:	e008      	b.n	80041bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041aa:	f7fc ff71 	bl	8001090 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e006      	b.n	80041ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <RCCEx_PLL2_Config+0x15c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	58024400 	.word	0x58024400
 80041d8:	ffff0007 	.word	0xffff0007

080041dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041ea:	4b53      	ldr	r3, [pc, #332]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d101      	bne.n	80041fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e099      	b.n	800432e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041fa:	4b4f      	ldr	r3, [pc, #316]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a4e      	ldr	r2, [pc, #312]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 8004200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004206:	f7fc ff43 	bl	8001090 <HAL_GetTick>
 800420a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800420c:	e008      	b.n	8004220 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800420e:	f7fc ff3f 	bl	8001090 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e086      	b.n	800432e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004220:	4b45      	ldr	r3, [pc, #276]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f0      	bne.n	800420e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800422c:	4b42      	ldr	r3, [pc, #264]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	051b      	lsls	r3, r3, #20
 800423a:	493f      	ldr	r1, [pc, #252]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	628b      	str	r3, [r1, #40]	; 0x28
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	3b01      	subs	r3, #1
 8004246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	3b01      	subs	r3, #1
 8004250:	025b      	lsls	r3, r3, #9
 8004252:	b29b      	uxth	r3, r3
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	3b01      	subs	r3, #1
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	3b01      	subs	r3, #1
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004270:	4931      	ldr	r1, [pc, #196]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 8004272:	4313      	orrs	r3, r2
 8004274:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004276:	4b30      	ldr	r3, [pc, #192]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	492d      	ldr	r1, [pc, #180]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 8004284:	4313      	orrs	r3, r2
 8004286:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004288:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	4928      	ldr	r1, [pc, #160]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800429a:	4b27      	ldr	r3, [pc, #156]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	4a26      	ldr	r2, [pc, #152]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042aa:	4b24      	ldr	r3, [pc, #144]	; (800433c <RCCEx_PLL3_Config+0x160>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	69d2      	ldr	r2, [r2, #28]
 80042b2:	00d2      	lsls	r2, r2, #3
 80042b4:	4920      	ldr	r1, [pc, #128]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80042ba:	4b1f      	ldr	r3, [pc, #124]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042d8:	e00f      	b.n	80042fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d106      	bne.n	80042ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042e0:	4b15      	ldr	r3, [pc, #84]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	4a14      	ldr	r2, [pc, #80]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042ec:	e005      	b.n	80042fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042ee:	4b12      	ldr	r3, [pc, #72]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	4a11      	ldr	r2, [pc, #68]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042fa:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004306:	f7fc fec3 	bl	8001090 <HAL_GetTick>
 800430a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800430c:	e008      	b.n	8004320 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800430e:	f7fc febf 	bl	8001090 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e006      	b.n	800432e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <RCCEx_PLL3_Config+0x15c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	58024400 	.word	0x58024400
 800433c:	ffff0007 	.word	0xffff0007

08004340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e049      	b.n	80043e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc fce6 	bl	8000d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f000 faee 	bl	8004960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d001      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e054      	b.n	80044b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a26      	ldr	r2, [pc, #152]	; (80044c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d022      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004432:	d01d      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d018      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d013      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <HAL_TIM_Base_Start_IT+0xdc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x80>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d115      	bne.n	800449c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	4b19      	ldr	r3, [pc, #100]	; (80044dc <HAL_TIM_Base_Start_IT+0xec>)
 8004478:	4013      	ands	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b06      	cmp	r3, #6
 8004480:	d015      	beq.n	80044ae <HAL_TIM_Base_Start_IT+0xbe>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004488:	d011      	beq.n	80044ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449a:	e008      	b.n	80044ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e000      	b.n	80044b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	40000c00 	.word	0x40000c00
 80044d0:	40010400 	.word	0x40010400
 80044d4:	40001800 	.word	0x40001800
 80044d8:	40014000 	.word	0x40014000
 80044dc:	00010007 	.word	0x00010007

080044e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0202 	mvn.w	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f9fe 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9f0 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fa01 	bl	8004938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0204 	mvn.w	r2, #4
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f9d4 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9c6 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9d7 	bl	8004938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0208 	mvn.w	r2, #8
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2204      	movs	r2, #4
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f9aa 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f99c 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f9ad 	bl	8004938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0210 	mvn.w	r2, #16
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2208      	movs	r2, #8
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f980 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f972 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f983 	bl	8004938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0201 	mvn.w	r2, #1
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fc f8ec 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b80      	cmp	r3, #128	; 0x80
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fb38 	bl	8004d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469e:	d10e      	bne.n	80046be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b80      	cmp	r3, #128	; 0x80
 80046ac:	d107      	bne.n	80046be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fb2b 	bl	8004d14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b40      	cmp	r3, #64	; 0x40
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f931 	bl	800494c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d10e      	bne.n	8004716 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b20      	cmp	r3, #32
 8004704:	d107      	bne.n	8004716 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0220 	mvn.w	r2, #32
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 faeb 	bl	8004cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIM_ConfigClockSource+0x1c>
 8004738:	2302      	movs	r3, #2
 800473a:	e0dc      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	4b6a      	ldr	r3, [pc, #424]	; (8004900 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a64      	ldr	r2, [pc, #400]	; (8004904 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	f000 80a9 	beq.w	80048ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004778:	4a62      	ldr	r2, [pc, #392]	; (8004904 <HAL_TIM_ConfigClockSource+0x1e4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	f200 80ae 	bhi.w	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 8004780:	4a61      	ldr	r2, [pc, #388]	; (8004908 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	f000 80a1 	beq.w	80048ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004788:	4a5f      	ldr	r2, [pc, #380]	; (8004908 <HAL_TIM_ConfigClockSource+0x1e8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	f200 80a6 	bhi.w	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 8004790:	4a5e      	ldr	r2, [pc, #376]	; (800490c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004792:	4293      	cmp	r3, r2
 8004794:	f000 8099 	beq.w	80048ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004798:	4a5c      	ldr	r2, [pc, #368]	; (800490c <HAL_TIM_ConfigClockSource+0x1ec>)
 800479a:	4293      	cmp	r3, r2
 800479c:	f200 809e 	bhi.w	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 80047a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80047a4:	f000 8091 	beq.w	80048ca <HAL_TIM_ConfigClockSource+0x1aa>
 80047a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80047ac:	f200 8096 	bhi.w	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 80047b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b4:	f000 8089 	beq.w	80048ca <HAL_TIM_ConfigClockSource+0x1aa>
 80047b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047bc:	f200 808e 	bhi.w	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c4:	d03e      	beq.n	8004844 <HAL_TIM_ConfigClockSource+0x124>
 80047c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ca:	f200 8087 	bhi.w	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d2:	f000 8086 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x1c2>
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047da:	d87f      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 80047dc:	2b70      	cmp	r3, #112	; 0x70
 80047de:	d01a      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0xf6>
 80047e0:	2b70      	cmp	r3, #112	; 0x70
 80047e2:	d87b      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 80047e4:	2b60      	cmp	r3, #96	; 0x60
 80047e6:	d050      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x16a>
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d877      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 80047ec:	2b50      	cmp	r3, #80	; 0x50
 80047ee:	d03c      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x14a>
 80047f0:	2b50      	cmp	r3, #80	; 0x50
 80047f2:	d873      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d058      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x18a>
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d86f      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 80047fc:	2b30      	cmp	r3, #48	; 0x30
 80047fe:	d064      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d86b      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 8004804:	2b20      	cmp	r3, #32
 8004806:	d060      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d867      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d05c      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004810:	2b10      	cmp	r3, #16
 8004812:	d05a      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x1aa>
 8004814:	e062      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f000 f9b3 	bl	8004b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	609a      	str	r2, [r3, #8]
      break;
 8004842:	e04f      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6899      	ldr	r1, [r3, #8]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f000 f99c 	bl	8004b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004866:	609a      	str	r2, [r3, #8]
      break;
 8004868:	e03c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	461a      	mov	r2, r3
 8004878:	f000 f90c 	bl	8004a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2150      	movs	r1, #80	; 0x50
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f966 	bl	8004b54 <TIM_ITRx_SetConfig>
      break;
 8004888:	e02c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	461a      	mov	r2, r3
 8004898:	f000 f92b 	bl	8004af2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2160      	movs	r1, #96	; 0x60
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f956 	bl	8004b54 <TIM_ITRx_SetConfig>
      break;
 80048a8:	e01c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6859      	ldr	r1, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f000 f8ec 	bl	8004a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f946 	bl	8004b54 <TIM_ITRx_SetConfig>
      break;
 80048c8:	e00c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f000 f93d 	bl	8004b54 <TIM_ITRx_SetConfig>
      break;
 80048da:	e003      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      break;
 80048e0:	e000      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80048e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	ffceff88 	.word	0xffceff88
 8004904:	00100040 	.word	0x00100040
 8004908:	00100030 	.word	0x00100030
 800490c:	00100020 	.word	0x00100020

08004910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a40      	ldr	r2, [pc, #256]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497e:	d00f      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3d      	ldr	r2, [pc, #244]	; (8004a78 <TIM_Base_SetConfig+0x118>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00b      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a3c      	ldr	r2, [pc, #240]	; (8004a7c <TIM_Base_SetConfig+0x11c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a3b      	ldr	r2, [pc, #236]	; (8004a80 <TIM_Base_SetConfig+0x120>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a3a      	ldr	r2, [pc, #232]	; (8004a84 <TIM_Base_SetConfig+0x124>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2f      	ldr	r2, [pc, #188]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01f      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d01b      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2c      	ldr	r2, [pc, #176]	; (8004a78 <TIM_Base_SetConfig+0x118>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d017      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <TIM_Base_SetConfig+0x11c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2a      	ldr	r2, [pc, #168]	; (8004a80 <TIM_Base_SetConfig+0x120>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <TIM_Base_SetConfig+0x124>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a28      	ldr	r2, [pc, #160]	; (8004a88 <TIM_Base_SetConfig+0x128>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a27      	ldr	r2, [pc, #156]	; (8004a8c <TIM_Base_SetConfig+0x12c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_Base_SetConfig+0x9a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a26      	ldr	r2, [pc, #152]	; (8004a90 <TIM_Base_SetConfig+0x130>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d108      	bne.n	8004a0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00f      	beq.n	8004a58 <TIM_Base_SetConfig+0xf8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <TIM_Base_SetConfig+0x124>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_Base_SetConfig+0xf8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a11      	ldr	r2, [pc, #68]	; (8004a88 <TIM_Base_SetConfig+0x128>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0xf8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <TIM_Base_SetConfig+0x12c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0xf8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a0f      	ldr	r2, [pc, #60]	; (8004a90 <TIM_Base_SetConfig+0x130>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d103      	bne.n	8004a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	615a      	str	r2, [r3, #20]
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40010000 	.word	0x40010000
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800
 8004a80:	40000c00 	.word	0x40000c00
 8004a84:	40010400 	.word	0x40010400
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800

08004a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0201 	bic.w	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 030a 	bic.w	r3, r3, #10
 8004ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b087      	sub	sp, #28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0210 	bic.w	r2, r3, #16
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <TIM_ITRx_SetConfig+0x38>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f043 0307 	orr.w	r3, r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	609a      	str	r2, [r3, #8]
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	ffcfff8f 	.word	0xffcfff8f

08004b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	609a      	str	r2, [r3, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e06d      	b.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a30      	ldr	r2, [pc, #192]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2f      	ldr	r2, [pc, #188]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d108      	bne.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a20      	ldr	r2, [pc, #128]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d022      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5a:	d01d      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1a      	ldr	r2, [pc, #104]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10c      	bne.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40010400 	.word	0x40010400
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40000c00 	.word	0x40000c00
 8004ce4:	40001800 	.word	0x40001800
 8004ce8:	40014000 	.word	0x40014000

08004cec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e042      	b.n	8004dc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7fc f885 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2224      	movs	r2, #36	; 0x24
 8004d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f82c 	bl	8004dc8 <UART_SetConfig>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e022      	b.n	8004dc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fd88 	bl	8005898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fe0f 	bl	80059dc <UART_CheckIdleState>
 8004dbe:	4603      	mov	r3, r0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dcc:	b092      	sub	sp, #72	; 0x48
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	431a      	orrs	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4bbe      	ldr	r3, [pc, #760]	; (80050f0 <UART_SetConfig+0x328>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e00:	430b      	orrs	r3, r1
 8004e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4ab3      	ldr	r2, [pc, #716]	; (80050f4 <UART_SetConfig+0x32c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e30:	4313      	orrs	r3, r2
 8004e32:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	4baf      	ldr	r3, [pc, #700]	; (80050f8 <UART_SetConfig+0x330>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	f023 010f 	bic.w	r1, r3, #15
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4aa6      	ldr	r2, [pc, #664]	; (80050fc <UART_SetConfig+0x334>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d177      	bne.n	8004f58 <UART_SetConfig+0x190>
 8004e68:	4ba5      	ldr	r3, [pc, #660]	; (8005100 <UART_SetConfig+0x338>)
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e70:	2b28      	cmp	r3, #40	; 0x28
 8004e72:	d86d      	bhi.n	8004f50 <UART_SetConfig+0x188>
 8004e74:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <UART_SetConfig+0xb4>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004f21 	.word	0x08004f21
 8004e80:	08004f51 	.word	0x08004f51
 8004e84:	08004f51 	.word	0x08004f51
 8004e88:	08004f51 	.word	0x08004f51
 8004e8c:	08004f51 	.word	0x08004f51
 8004e90:	08004f51 	.word	0x08004f51
 8004e94:	08004f51 	.word	0x08004f51
 8004e98:	08004f51 	.word	0x08004f51
 8004e9c:	08004f29 	.word	0x08004f29
 8004ea0:	08004f51 	.word	0x08004f51
 8004ea4:	08004f51 	.word	0x08004f51
 8004ea8:	08004f51 	.word	0x08004f51
 8004eac:	08004f51 	.word	0x08004f51
 8004eb0:	08004f51 	.word	0x08004f51
 8004eb4:	08004f51 	.word	0x08004f51
 8004eb8:	08004f51 	.word	0x08004f51
 8004ebc:	08004f31 	.word	0x08004f31
 8004ec0:	08004f51 	.word	0x08004f51
 8004ec4:	08004f51 	.word	0x08004f51
 8004ec8:	08004f51 	.word	0x08004f51
 8004ecc:	08004f51 	.word	0x08004f51
 8004ed0:	08004f51 	.word	0x08004f51
 8004ed4:	08004f51 	.word	0x08004f51
 8004ed8:	08004f51 	.word	0x08004f51
 8004edc:	08004f39 	.word	0x08004f39
 8004ee0:	08004f51 	.word	0x08004f51
 8004ee4:	08004f51 	.word	0x08004f51
 8004ee8:	08004f51 	.word	0x08004f51
 8004eec:	08004f51 	.word	0x08004f51
 8004ef0:	08004f51 	.word	0x08004f51
 8004ef4:	08004f51 	.word	0x08004f51
 8004ef8:	08004f51 	.word	0x08004f51
 8004efc:	08004f41 	.word	0x08004f41
 8004f00:	08004f51 	.word	0x08004f51
 8004f04:	08004f51 	.word	0x08004f51
 8004f08:	08004f51 	.word	0x08004f51
 8004f0c:	08004f51 	.word	0x08004f51
 8004f10:	08004f51 	.word	0x08004f51
 8004f14:	08004f51 	.word	0x08004f51
 8004f18:	08004f51 	.word	0x08004f51
 8004f1c:	08004f49 	.word	0x08004f49
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f26:	e222      	b.n	800536e <UART_SetConfig+0x5a6>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2e:	e21e      	b.n	800536e <UART_SetConfig+0x5a6>
 8004f30:	2308      	movs	r3, #8
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e21a      	b.n	800536e <UART_SetConfig+0x5a6>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e216      	b.n	800536e <UART_SetConfig+0x5a6>
 8004f40:	2320      	movs	r3, #32
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e212      	b.n	800536e <UART_SetConfig+0x5a6>
 8004f48:	2340      	movs	r3, #64	; 0x40
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e20e      	b.n	800536e <UART_SetConfig+0x5a6>
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e20a      	b.n	800536e <UART_SetConfig+0x5a6>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a69      	ldr	r2, [pc, #420]	; (8005104 <UART_SetConfig+0x33c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d130      	bne.n	8004fc4 <UART_SetConfig+0x1fc>
 8004f62:	4b67      	ldr	r3, [pc, #412]	; (8005100 <UART_SetConfig+0x338>)
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	d826      	bhi.n	8004fbc <UART_SetConfig+0x1f4>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <UART_SetConfig+0x1ac>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	08004f8d 	.word	0x08004f8d
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	08004f9d 	.word	0x08004f9d
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e1ec      	b.n	800536e <UART_SetConfig+0x5a6>
 8004f94:	2304      	movs	r3, #4
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e1e8      	b.n	800536e <UART_SetConfig+0x5a6>
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e1e4      	b.n	800536e <UART_SetConfig+0x5a6>
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e1e0      	b.n	800536e <UART_SetConfig+0x5a6>
 8004fac:	2320      	movs	r3, #32
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e1dc      	b.n	800536e <UART_SetConfig+0x5a6>
 8004fb4:	2340      	movs	r3, #64	; 0x40
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e1d8      	b.n	800536e <UART_SetConfig+0x5a6>
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e1d4      	b.n	800536e <UART_SetConfig+0x5a6>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a4f      	ldr	r2, [pc, #316]	; (8005108 <UART_SetConfig+0x340>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d130      	bne.n	8005030 <UART_SetConfig+0x268>
 8004fce:	4b4c      	ldr	r3, [pc, #304]	; (8005100 <UART_SetConfig+0x338>)
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b05      	cmp	r3, #5
 8004fd8:	d826      	bhi.n	8005028 <UART_SetConfig+0x260>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x218>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08004ff9 	.word	0x08004ff9
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	08005009 	.word	0x08005009
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffe:	e1b6      	b.n	800536e <UART_SetConfig+0x5a6>
 8005000:	2304      	movs	r3, #4
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e1b2      	b.n	800536e <UART_SetConfig+0x5a6>
 8005008:	2308      	movs	r3, #8
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e1ae      	b.n	800536e <UART_SetConfig+0x5a6>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e1aa      	b.n	800536e <UART_SetConfig+0x5a6>
 8005018:	2320      	movs	r3, #32
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e1a6      	b.n	800536e <UART_SetConfig+0x5a6>
 8005020:	2340      	movs	r3, #64	; 0x40
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e1a2      	b.n	800536e <UART_SetConfig+0x5a6>
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e19e      	b.n	800536e <UART_SetConfig+0x5a6>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a35      	ldr	r2, [pc, #212]	; (800510c <UART_SetConfig+0x344>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d130      	bne.n	800509c <UART_SetConfig+0x2d4>
 800503a:	4b31      	ldr	r3, [pc, #196]	; (8005100 <UART_SetConfig+0x338>)
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	2b05      	cmp	r3, #5
 8005044:	d826      	bhi.n	8005094 <UART_SetConfig+0x2cc>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <UART_SetConfig+0x284>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005065 	.word	0x08005065
 8005050:	0800506d 	.word	0x0800506d
 8005054:	08005075 	.word	0x08005075
 8005058:	0800507d 	.word	0x0800507d
 800505c:	08005085 	.word	0x08005085
 8005060:	0800508d 	.word	0x0800508d
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506a:	e180      	b.n	800536e <UART_SetConfig+0x5a6>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e17c      	b.n	800536e <UART_SetConfig+0x5a6>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e178      	b.n	800536e <UART_SetConfig+0x5a6>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e174      	b.n	800536e <UART_SetConfig+0x5a6>
 8005084:	2320      	movs	r3, #32
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e170      	b.n	800536e <UART_SetConfig+0x5a6>
 800508c:	2340      	movs	r3, #64	; 0x40
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e16c      	b.n	800536e <UART_SetConfig+0x5a6>
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e168      	b.n	800536e <UART_SetConfig+0x5a6>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <UART_SetConfig+0x348>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d142      	bne.n	800512c <UART_SetConfig+0x364>
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <UART_SetConfig+0x338>)
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d838      	bhi.n	8005124 <UART_SetConfig+0x35c>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x2f0>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050e1 	.word	0x080050e1
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	08005115 	.word	0x08005115
 80050cc:	0800511d 	.word	0x0800511d
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d6:	e14a      	b.n	800536e <UART_SetConfig+0x5a6>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050de:	e146      	b.n	800536e <UART_SetConfig+0x5a6>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e6:	e142      	b.n	800536e <UART_SetConfig+0x5a6>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e13e      	b.n	800536e <UART_SetConfig+0x5a6>
 80050f0:	cfff69f3 	.word	0xcfff69f3
 80050f4:	58000c00 	.word	0x58000c00
 80050f8:	11fff4ff 	.word	0x11fff4ff
 80050fc:	40011000 	.word	0x40011000
 8005100:	58024400 	.word	0x58024400
 8005104:	40004400 	.word	0x40004400
 8005108:	40004800 	.word	0x40004800
 800510c:	40004c00 	.word	0x40004c00
 8005110:	40005000 	.word	0x40005000
 8005114:	2320      	movs	r3, #32
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511a:	e128      	b.n	800536e <UART_SetConfig+0x5a6>
 800511c:	2340      	movs	r3, #64	; 0x40
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005122:	e124      	b.n	800536e <UART_SetConfig+0x5a6>
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512a:	e120      	b.n	800536e <UART_SetConfig+0x5a6>
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4acb      	ldr	r2, [pc, #812]	; (8005460 <UART_SetConfig+0x698>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d176      	bne.n	8005224 <UART_SetConfig+0x45c>
 8005136:	4bcb      	ldr	r3, [pc, #812]	; (8005464 <UART_SetConfig+0x69c>)
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800513e:	2b28      	cmp	r3, #40	; 0x28
 8005140:	d86c      	bhi.n	800521c <UART_SetConfig+0x454>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0x380>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	080051ed 	.word	0x080051ed
 800514c:	0800521d 	.word	0x0800521d
 8005150:	0800521d 	.word	0x0800521d
 8005154:	0800521d 	.word	0x0800521d
 8005158:	0800521d 	.word	0x0800521d
 800515c:	0800521d 	.word	0x0800521d
 8005160:	0800521d 	.word	0x0800521d
 8005164:	0800521d 	.word	0x0800521d
 8005168:	080051f5 	.word	0x080051f5
 800516c:	0800521d 	.word	0x0800521d
 8005170:	0800521d 	.word	0x0800521d
 8005174:	0800521d 	.word	0x0800521d
 8005178:	0800521d 	.word	0x0800521d
 800517c:	0800521d 	.word	0x0800521d
 8005180:	0800521d 	.word	0x0800521d
 8005184:	0800521d 	.word	0x0800521d
 8005188:	080051fd 	.word	0x080051fd
 800518c:	0800521d 	.word	0x0800521d
 8005190:	0800521d 	.word	0x0800521d
 8005194:	0800521d 	.word	0x0800521d
 8005198:	0800521d 	.word	0x0800521d
 800519c:	0800521d 	.word	0x0800521d
 80051a0:	0800521d 	.word	0x0800521d
 80051a4:	0800521d 	.word	0x0800521d
 80051a8:	08005205 	.word	0x08005205
 80051ac:	0800521d 	.word	0x0800521d
 80051b0:	0800521d 	.word	0x0800521d
 80051b4:	0800521d 	.word	0x0800521d
 80051b8:	0800521d 	.word	0x0800521d
 80051bc:	0800521d 	.word	0x0800521d
 80051c0:	0800521d 	.word	0x0800521d
 80051c4:	0800521d 	.word	0x0800521d
 80051c8:	0800520d 	.word	0x0800520d
 80051cc:	0800521d 	.word	0x0800521d
 80051d0:	0800521d 	.word	0x0800521d
 80051d4:	0800521d 	.word	0x0800521d
 80051d8:	0800521d 	.word	0x0800521d
 80051dc:	0800521d 	.word	0x0800521d
 80051e0:	0800521d 	.word	0x0800521d
 80051e4:	0800521d 	.word	0x0800521d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e0bc      	b.n	800536e <UART_SetConfig+0x5a6>
 80051f4:	2304      	movs	r3, #4
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e0b8      	b.n	800536e <UART_SetConfig+0x5a6>
 80051fc:	2308      	movs	r3, #8
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e0b4      	b.n	800536e <UART_SetConfig+0x5a6>
 8005204:	2310      	movs	r3, #16
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520a:	e0b0      	b.n	800536e <UART_SetConfig+0x5a6>
 800520c:	2320      	movs	r3, #32
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005212:	e0ac      	b.n	800536e <UART_SetConfig+0x5a6>
 8005214:	2340      	movs	r3, #64	; 0x40
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e0a8      	b.n	800536e <UART_SetConfig+0x5a6>
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e0a4      	b.n	800536e <UART_SetConfig+0x5a6>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a8f      	ldr	r2, [pc, #572]	; (8005468 <UART_SetConfig+0x6a0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d130      	bne.n	8005290 <UART_SetConfig+0x4c8>
 800522e:	4b8d      	ldr	r3, [pc, #564]	; (8005464 <UART_SetConfig+0x69c>)
 8005230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	2b05      	cmp	r3, #5
 8005238:	d826      	bhi.n	8005288 <UART_SetConfig+0x4c0>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <UART_SetConfig+0x478>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005259 	.word	0x08005259
 8005244:	08005261 	.word	0x08005261
 8005248:	08005269 	.word	0x08005269
 800524c:	08005271 	.word	0x08005271
 8005250:	08005279 	.word	0x08005279
 8005254:	08005281 	.word	0x08005281
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e086      	b.n	800536e <UART_SetConfig+0x5a6>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e082      	b.n	800536e <UART_SetConfig+0x5a6>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e07e      	b.n	800536e <UART_SetConfig+0x5a6>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e07a      	b.n	800536e <UART_SetConfig+0x5a6>
 8005278:	2320      	movs	r3, #32
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527e:	e076      	b.n	800536e <UART_SetConfig+0x5a6>
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005286:	e072      	b.n	800536e <UART_SetConfig+0x5a6>
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528e:	e06e      	b.n	800536e <UART_SetConfig+0x5a6>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a75      	ldr	r2, [pc, #468]	; (800546c <UART_SetConfig+0x6a4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d130      	bne.n	80052fc <UART_SetConfig+0x534>
 800529a:	4b72      	ldr	r3, [pc, #456]	; (8005464 <UART_SetConfig+0x69c>)
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d826      	bhi.n	80052f4 <UART_SetConfig+0x52c>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x4e4>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052c5 	.word	0x080052c5
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	080052d5 	.word	0x080052d5
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052ed 	.word	0x080052ed
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e050      	b.n	800536e <UART_SetConfig+0x5a6>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e04c      	b.n	800536e <UART_SetConfig+0x5a6>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052da:	e048      	b.n	800536e <UART_SetConfig+0x5a6>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e2:	e044      	b.n	800536e <UART_SetConfig+0x5a6>
 80052e4:	2320      	movs	r3, #32
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ea:	e040      	b.n	800536e <UART_SetConfig+0x5a6>
 80052ec:	2340      	movs	r3, #64	; 0x40
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e03c      	b.n	800536e <UART_SetConfig+0x5a6>
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e038      	b.n	800536e <UART_SetConfig+0x5a6>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a5b      	ldr	r2, [pc, #364]	; (8005470 <UART_SetConfig+0x6a8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d130      	bne.n	8005368 <UART_SetConfig+0x5a0>
 8005306:	4b57      	ldr	r3, [pc, #348]	; (8005464 <UART_SetConfig+0x69c>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b05      	cmp	r3, #5
 8005310:	d826      	bhi.n	8005360 <UART_SetConfig+0x598>
 8005312:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <UART_SetConfig+0x550>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	08005331 	.word	0x08005331
 800531c:	08005339 	.word	0x08005339
 8005320:	08005341 	.word	0x08005341
 8005324:	08005349 	.word	0x08005349
 8005328:	08005351 	.word	0x08005351
 800532c:	08005359 	.word	0x08005359
 8005330:	2302      	movs	r3, #2
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005336:	e01a      	b.n	800536e <UART_SetConfig+0x5a6>
 8005338:	2304      	movs	r3, #4
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533e:	e016      	b.n	800536e <UART_SetConfig+0x5a6>
 8005340:	2308      	movs	r3, #8
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005346:	e012      	b.n	800536e <UART_SetConfig+0x5a6>
 8005348:	2310      	movs	r3, #16
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534e:	e00e      	b.n	800536e <UART_SetConfig+0x5a6>
 8005350:	2320      	movs	r3, #32
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005356:	e00a      	b.n	800536e <UART_SetConfig+0x5a6>
 8005358:	2340      	movs	r3, #64	; 0x40
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e006      	b.n	800536e <UART_SetConfig+0x5a6>
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005366:	e002      	b.n	800536e <UART_SetConfig+0x5a6>
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a3f      	ldr	r2, [pc, #252]	; (8005470 <UART_SetConfig+0x6a8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	f040 80f8 	bne.w	800556a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800537a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800537e:	2b20      	cmp	r3, #32
 8005380:	dc46      	bgt.n	8005410 <UART_SetConfig+0x648>
 8005382:	2b02      	cmp	r3, #2
 8005384:	f2c0 8082 	blt.w	800548c <UART_SetConfig+0x6c4>
 8005388:	3b02      	subs	r3, #2
 800538a:	2b1e      	cmp	r3, #30
 800538c:	d87e      	bhi.n	800548c <UART_SetConfig+0x6c4>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x5cc>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	08005417 	.word	0x08005417
 8005398:	0800548d 	.word	0x0800548d
 800539c:	0800541f 	.word	0x0800541f
 80053a0:	0800548d 	.word	0x0800548d
 80053a4:	0800548d 	.word	0x0800548d
 80053a8:	0800548d 	.word	0x0800548d
 80053ac:	0800542f 	.word	0x0800542f
 80053b0:	0800548d 	.word	0x0800548d
 80053b4:	0800548d 	.word	0x0800548d
 80053b8:	0800548d 	.word	0x0800548d
 80053bc:	0800548d 	.word	0x0800548d
 80053c0:	0800548d 	.word	0x0800548d
 80053c4:	0800548d 	.word	0x0800548d
 80053c8:	0800548d 	.word	0x0800548d
 80053cc:	0800543f 	.word	0x0800543f
 80053d0:	0800548d 	.word	0x0800548d
 80053d4:	0800548d 	.word	0x0800548d
 80053d8:	0800548d 	.word	0x0800548d
 80053dc:	0800548d 	.word	0x0800548d
 80053e0:	0800548d 	.word	0x0800548d
 80053e4:	0800548d 	.word	0x0800548d
 80053e8:	0800548d 	.word	0x0800548d
 80053ec:	0800548d 	.word	0x0800548d
 80053f0:	0800548d 	.word	0x0800548d
 80053f4:	0800548d 	.word	0x0800548d
 80053f8:	0800548d 	.word	0x0800548d
 80053fc:	0800548d 	.word	0x0800548d
 8005400:	0800548d 	.word	0x0800548d
 8005404:	0800548d 	.word	0x0800548d
 8005408:	0800548d 	.word	0x0800548d
 800540c:	0800547f 	.word	0x0800547f
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	d037      	beq.n	8005484 <UART_SetConfig+0x6bc>
 8005414:	e03a      	b.n	800548c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005416:	f7fe fb71 	bl	8003afc <HAL_RCCEx_GetD3PCLK1Freq>
 800541a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800541c:	e03c      	b.n	8005498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800541e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fb80 	bl	8003b28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800542c:	e034      	b.n	8005498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800542e:	f107 0318 	add.w	r3, r7, #24
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fccc 	bl	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800543c:	e02c      	b.n	8005498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <UART_SetConfig+0x69c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d016      	beq.n	8005478 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <UART_SetConfig+0x69c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	08db      	lsrs	r3, r3, #3
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	4a07      	ldr	r2, [pc, #28]	; (8005474 <UART_SetConfig+0x6ac>)
 8005456:	fa22 f303 	lsr.w	r3, r2, r3
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800545c:	e01c      	b.n	8005498 <UART_SetConfig+0x6d0>
 800545e:	bf00      	nop
 8005460:	40011400 	.word	0x40011400
 8005464:	58024400 	.word	0x58024400
 8005468:	40007800 	.word	0x40007800
 800546c:	40007c00 	.word	0x40007c00
 8005470:	58000c00 	.word	0x58000c00
 8005474:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005478:	4b9d      	ldr	r3, [pc, #628]	; (80056f0 <UART_SetConfig+0x928>)
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800547c:	e00c      	b.n	8005498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800547e:	4b9d      	ldr	r3, [pc, #628]	; (80056f4 <UART_SetConfig+0x92c>)
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005482:	e009      	b.n	8005498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800548a:	e005      	b.n	8005498 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005496:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 81de 	beq.w	800585c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	4a94      	ldr	r2, [pc, #592]	; (80056f8 <UART_SetConfig+0x930>)
 80054a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054aa:	461a      	mov	r2, r3
 80054ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	4413      	add	r3, r2
 80054be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d305      	bcc.n	80054d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d903      	bls.n	80054d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80054d6:	e1c1      	b.n	800585c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054da:	2200      	movs	r2, #0
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	60fa      	str	r2, [r7, #12]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	4a84      	ldr	r2, [pc, #528]	; (80056f8 <UART_SetConfig+0x930>)
 80054e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2200      	movs	r2, #0
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054fa:	f7fa feed 	bl	80002d8 <__aeabi_uldivmod>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4610      	mov	r0, r2
 8005504:	4619      	mov	r1, r3
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	020b      	lsls	r3, r1, #8
 8005510:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005514:	0202      	lsls	r2, r0, #8
 8005516:	6979      	ldr	r1, [r7, #20]
 8005518:	6849      	ldr	r1, [r1, #4]
 800551a:	0849      	lsrs	r1, r1, #1
 800551c:	2000      	movs	r0, #0
 800551e:	460c      	mov	r4, r1
 8005520:	4605      	mov	r5, r0
 8005522:	eb12 0804 	adds.w	r8, r2, r4
 8005526:	eb43 0905 	adc.w	r9, r3, r5
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	469a      	mov	sl, r3
 8005532:	4693      	mov	fp, r2
 8005534:	4652      	mov	r2, sl
 8005536:	465b      	mov	r3, fp
 8005538:	4640      	mov	r0, r8
 800553a:	4649      	mov	r1, r9
 800553c:	f7fa fecc 	bl	80002d8 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4613      	mov	r3, r2
 8005546:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800554e:	d308      	bcc.n	8005562 <UART_SetConfig+0x79a>
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005556:	d204      	bcs.n	8005562 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800555e:	60da      	str	r2, [r3, #12]
 8005560:	e17c      	b.n	800585c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005568:	e178      	b.n	800585c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005572:	f040 80c5 	bne.w	8005700 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005576:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800557a:	2b20      	cmp	r3, #32
 800557c:	dc48      	bgt.n	8005610 <UART_SetConfig+0x848>
 800557e:	2b00      	cmp	r3, #0
 8005580:	db7b      	blt.n	800567a <UART_SetConfig+0x8b2>
 8005582:	2b20      	cmp	r3, #32
 8005584:	d879      	bhi.n	800567a <UART_SetConfig+0x8b2>
 8005586:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0x7c4>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	08005617 	.word	0x08005617
 8005590:	0800561f 	.word	0x0800561f
 8005594:	0800567b 	.word	0x0800567b
 8005598:	0800567b 	.word	0x0800567b
 800559c:	08005627 	.word	0x08005627
 80055a0:	0800567b 	.word	0x0800567b
 80055a4:	0800567b 	.word	0x0800567b
 80055a8:	0800567b 	.word	0x0800567b
 80055ac:	08005637 	.word	0x08005637
 80055b0:	0800567b 	.word	0x0800567b
 80055b4:	0800567b 	.word	0x0800567b
 80055b8:	0800567b 	.word	0x0800567b
 80055bc:	0800567b 	.word	0x0800567b
 80055c0:	0800567b 	.word	0x0800567b
 80055c4:	0800567b 	.word	0x0800567b
 80055c8:	0800567b 	.word	0x0800567b
 80055cc:	08005647 	.word	0x08005647
 80055d0:	0800567b 	.word	0x0800567b
 80055d4:	0800567b 	.word	0x0800567b
 80055d8:	0800567b 	.word	0x0800567b
 80055dc:	0800567b 	.word	0x0800567b
 80055e0:	0800567b 	.word	0x0800567b
 80055e4:	0800567b 	.word	0x0800567b
 80055e8:	0800567b 	.word	0x0800567b
 80055ec:	0800567b 	.word	0x0800567b
 80055f0:	0800567b 	.word	0x0800567b
 80055f4:	0800567b 	.word	0x0800567b
 80055f8:	0800567b 	.word	0x0800567b
 80055fc:	0800567b 	.word	0x0800567b
 8005600:	0800567b 	.word	0x0800567b
 8005604:	0800567b 	.word	0x0800567b
 8005608:	0800567b 	.word	0x0800567b
 800560c:	0800566d 	.word	0x0800566d
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d02e      	beq.n	8005672 <UART_SetConfig+0x8aa>
 8005614:	e031      	b.n	800567a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005616:	f7fd f83b 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 800561a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800561c:	e033      	b.n	8005686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800561e:	f7fd f84d 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 8005622:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005624:	e02f      	b.n	8005686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fa7c 	bl	8003b28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005634:	e027      	b.n	8005686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005636:	f107 0318 	add.w	r3, r7, #24
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe fbc8 	bl	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005644:	e01f      	b.n	8005686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005646:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <UART_SetConfig+0x934>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005652:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <UART_SetConfig+0x934>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	08db      	lsrs	r3, r3, #3
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	4a24      	ldr	r2, [pc, #144]	; (80056f0 <UART_SetConfig+0x928>)
 800565e:	fa22 f303 	lsr.w	r3, r2, r3
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005664:	e00f      	b.n	8005686 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005666:	4b22      	ldr	r3, [pc, #136]	; (80056f0 <UART_SetConfig+0x928>)
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800566a:	e00c      	b.n	8005686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800566c:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <UART_SetConfig+0x92c>)
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005670:	e009      	b.n	8005686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005678:	e005      	b.n	8005686 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005684:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80e7 	beq.w	800585c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <UART_SetConfig+0x930>)
 8005694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005698:	461a      	mov	r2, r3
 800569a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569c:	fbb3 f3f2 	udiv	r3, r3, r2
 80056a0:	005a      	lsls	r2, r3, #1
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	441a      	add	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	2b0f      	cmp	r3, #15
 80056b8:	d916      	bls.n	80056e8 <UART_SetConfig+0x920>
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c0:	d212      	bcs.n	80056e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f023 030f 	bic.w	r3, r3, #15
 80056ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056da:	4313      	orrs	r3, r2
 80056dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80056e4:	60da      	str	r2, [r3, #12]
 80056e6:	e0b9      	b.n	800585c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056ee:	e0b5      	b.n	800585c <UART_SetConfig+0xa94>
 80056f0:	03d09000 	.word	0x03d09000
 80056f4:	003d0900 	.word	0x003d0900
 80056f8:	08005f54 	.word	0x08005f54
 80056fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005700:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005704:	2b20      	cmp	r3, #32
 8005706:	dc49      	bgt.n	800579c <UART_SetConfig+0x9d4>
 8005708:	2b00      	cmp	r3, #0
 800570a:	db7c      	blt.n	8005806 <UART_SetConfig+0xa3e>
 800570c:	2b20      	cmp	r3, #32
 800570e:	d87a      	bhi.n	8005806 <UART_SetConfig+0xa3e>
 8005710:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <UART_SetConfig+0x950>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	080057a3 	.word	0x080057a3
 800571c:	080057ab 	.word	0x080057ab
 8005720:	08005807 	.word	0x08005807
 8005724:	08005807 	.word	0x08005807
 8005728:	080057b3 	.word	0x080057b3
 800572c:	08005807 	.word	0x08005807
 8005730:	08005807 	.word	0x08005807
 8005734:	08005807 	.word	0x08005807
 8005738:	080057c3 	.word	0x080057c3
 800573c:	08005807 	.word	0x08005807
 8005740:	08005807 	.word	0x08005807
 8005744:	08005807 	.word	0x08005807
 8005748:	08005807 	.word	0x08005807
 800574c:	08005807 	.word	0x08005807
 8005750:	08005807 	.word	0x08005807
 8005754:	08005807 	.word	0x08005807
 8005758:	080057d3 	.word	0x080057d3
 800575c:	08005807 	.word	0x08005807
 8005760:	08005807 	.word	0x08005807
 8005764:	08005807 	.word	0x08005807
 8005768:	08005807 	.word	0x08005807
 800576c:	08005807 	.word	0x08005807
 8005770:	08005807 	.word	0x08005807
 8005774:	08005807 	.word	0x08005807
 8005778:	08005807 	.word	0x08005807
 800577c:	08005807 	.word	0x08005807
 8005780:	08005807 	.word	0x08005807
 8005784:	08005807 	.word	0x08005807
 8005788:	08005807 	.word	0x08005807
 800578c:	08005807 	.word	0x08005807
 8005790:	08005807 	.word	0x08005807
 8005794:	08005807 	.word	0x08005807
 8005798:	080057f9 	.word	0x080057f9
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d02e      	beq.n	80057fe <UART_SetConfig+0xa36>
 80057a0:	e031      	b.n	8005806 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a2:	f7fc ff75 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 80057a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057a8:	e033      	b.n	8005812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057aa:	f7fc ff87 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 80057ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057b0:	e02f      	b.n	8005812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe f9b6 	bl	8003b28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057c0:	e027      	b.n	8005812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057c2:	f107 0318 	add.w	r3, r7, #24
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fb02 	bl	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d0:	e01f      	b.n	8005812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d2:	4b2d      	ldr	r3, [pc, #180]	; (8005888 <UART_SetConfig+0xac0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057de:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <UART_SetConfig+0xac0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	08db      	lsrs	r3, r3, #3
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	4a28      	ldr	r2, [pc, #160]	; (800588c <UART_SetConfig+0xac4>)
 80057ea:	fa22 f303 	lsr.w	r3, r2, r3
 80057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057f0:	e00f      	b.n	8005812 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80057f2:	4b26      	ldr	r3, [pc, #152]	; (800588c <UART_SetConfig+0xac4>)
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057f6:	e00c      	b.n	8005812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <UART_SetConfig+0xac8>)
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057fc:	e009      	b.n	8005812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005804:	e005      	b.n	8005812 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005810:	bf00      	nop
    }

    if (pclk != 0U)
 8005812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d021      	beq.n	800585c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <UART_SetConfig+0xacc>)
 800581e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005822:	461a      	mov	r2, r3
 8005824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005826:	fbb3 f2f2 	udiv	r2, r3, r2
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	441a      	add	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	fbb2 f3f3 	udiv	r3, r2, r3
 800583a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	2b0f      	cmp	r3, #15
 8005840:	d909      	bls.n	8005856 <UART_SetConfig+0xa8e>
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005848:	d205      	bcs.n	8005856 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	b29a      	uxth	r2, r3
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60da      	str	r2, [r3, #12]
 8005854:	e002      	b.n	800585c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2201      	movs	r2, #1
 8005860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2201      	movs	r2, #1
 8005868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2200      	movs	r2, #0
 8005870:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005878:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800587c:	4618      	mov	r0, r3
 800587e:	3748      	adds	r7, #72	; 0x48
 8005880:	46bd      	mov	sp, r7
 8005882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005886:	bf00      	nop
 8005888:	58024400 	.word	0x58024400
 800588c:	03d09000 	.word	0x03d09000
 8005890:	003d0900 	.word	0x003d0900
 8005894:	08005f54 	.word	0x08005f54

08005898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01a      	beq.n	80059ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005996:	d10a      	bne.n	80059ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
  }
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b098      	sub	sp, #96	; 0x60
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059ec:	f7fb fb50 	bl	8001090 <HAL_GetTick>
 80059f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d12f      	bne.n	8005a60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f88e 	bl	8005b30 <UART_WaitOnFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d022      	beq.n	8005a60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a38:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e6      	bne.n	8005a1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e063      	b.n	8005b28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d149      	bne.n	8005b02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a76:	2200      	movs	r2, #0
 8005a78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f857 	bl	8005b30 <UART_WaitOnFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d03c      	beq.n	8005b02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	623b      	str	r3, [r7, #32]
   return(result);
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e6      	bne.n	8005a88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ada:	61fa      	str	r2, [r7, #28]
 8005adc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	69b9      	ldr	r1, [r7, #24]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e5      	bne.n	8005aba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e012      	b.n	8005b28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3758      	adds	r7, #88	; 0x58
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b40:	e049      	b.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d045      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4a:	f7fb faa1 	bl	8001090 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d302      	bcc.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e048      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d031      	beq.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d110      	bne.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2208      	movs	r2, #8
 8005b86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f839 	bl	8005c00 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2208      	movs	r2, #8
 8005b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e029      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb0:	d111      	bne.n	8005bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f81f 	bl	8005c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e00f      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4013      	ands	r3, r2
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	bf0c      	ite	eq
 8005be6:	2301      	moveq	r3, #1
 8005be8:	2300      	movne	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d0a6      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b095      	sub	sp, #84	; 0x54
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c26:	643b      	str	r3, [r7, #64]	; 0x40
 8005c28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e6      	bne.n	8005c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	4b1e      	ldr	r3, [pc, #120]	; (8005cc8 <UART_EndRxTransfer+0xc8>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e5      	bne.n	8005c3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d118      	bne.n	8005ca8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f023 0310 	bic.w	r3, r3, #16
 8005c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6979      	ldr	r1, [r7, #20]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e6      	bne.n	8005c76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005cbc:	bf00      	nop
 8005cbe:	3754      	adds	r7, #84	; 0x54
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	effffffe 	.word	0xeffffffe

08005ccc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e027      	b.n	8005d32 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2224      	movs	r2, #36	; 0x24
 8005cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0201 	bic.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e02d      	b.n	8005db2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2224      	movs	r2, #36	; 0x24
 8005d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f850 	bl	8005e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e02d      	b.n	8005e2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2224      	movs	r2, #36	; 0x24
 8005dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f812 	bl	8005e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d108      	bne.n	8005e5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e58:	e031      	b.n	8005ebe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e5a:	2310      	movs	r3, #16
 8005e5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e5e:	2310      	movs	r3, #16
 8005e60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	0e5b      	lsrs	r3, r3, #25
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	0f5b      	lsrs	r3, r3, #29
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	7b3a      	ldrb	r2, [r7, #12]
 8005e86:	4911      	ldr	r1, [pc, #68]	; (8005ecc <UARTEx_SetNbDataToProcess+0x94>)
 8005e88:	5c8a      	ldrb	r2, [r1, r2]
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e8e:	7b3a      	ldrb	r2, [r7, #12]
 8005e90:	490f      	ldr	r1, [pc, #60]	; (8005ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8005e92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	7b7a      	ldrb	r2, [r7, #13]
 8005ea4:	4909      	ldr	r1, [pc, #36]	; (8005ecc <UARTEx_SetNbDataToProcess+0x94>)
 8005ea6:	5c8a      	ldrb	r2, [r1, r2]
 8005ea8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005eac:	7b7a      	ldrb	r2, [r7, #13]
 8005eae:	4908      	ldr	r1, [pc, #32]	; (8005ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8005eb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005eb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	08005f6c 	.word	0x08005f6c
 8005ed0:	08005f74 	.word	0x08005f74

08005ed4 <__libc_init_array>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	4d0d      	ldr	r5, [pc, #52]	; (8005f0c <__libc_init_array+0x38>)
 8005ed8:	4c0d      	ldr	r4, [pc, #52]	; (8005f10 <__libc_init_array+0x3c>)
 8005eda:	1b64      	subs	r4, r4, r5
 8005edc:	10a4      	asrs	r4, r4, #2
 8005ede:	2600      	movs	r6, #0
 8005ee0:	42a6      	cmp	r6, r4
 8005ee2:	d109      	bne.n	8005ef8 <__libc_init_array+0x24>
 8005ee4:	4d0b      	ldr	r5, [pc, #44]	; (8005f14 <__libc_init_array+0x40>)
 8005ee6:	4c0c      	ldr	r4, [pc, #48]	; (8005f18 <__libc_init_array+0x44>)
 8005ee8:	f000 f820 	bl	8005f2c <_init>
 8005eec:	1b64      	subs	r4, r4, r5
 8005eee:	10a4      	asrs	r4, r4, #2
 8005ef0:	2600      	movs	r6, #0
 8005ef2:	42a6      	cmp	r6, r4
 8005ef4:	d105      	bne.n	8005f02 <__libc_init_array+0x2e>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efc:	4798      	blx	r3
 8005efe:	3601      	adds	r6, #1
 8005f00:	e7ee      	b.n	8005ee0 <__libc_init_array+0xc>
 8005f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f06:	4798      	blx	r3
 8005f08:	3601      	adds	r6, #1
 8005f0a:	e7f2      	b.n	8005ef2 <__libc_init_array+0x1e>
 8005f0c:	08005f84 	.word	0x08005f84
 8005f10:	08005f84 	.word	0x08005f84
 8005f14:	08005f84 	.word	0x08005f84
 8005f18:	08005f88 	.word	0x08005f88

08005f1c <memset>:
 8005f1c:	4402      	add	r2, r0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d100      	bne.n	8005f26 <memset+0xa>
 8005f24:	4770      	bx	lr
 8005f26:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2a:	e7f9      	b.n	8005f20 <memset+0x4>

08005f2c <_init>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	bf00      	nop
 8005f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f32:	bc08      	pop	{r3}
 8005f34:	469e      	mov	lr, r3
 8005f36:	4770      	bx	lr

08005f38 <_fini>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	bf00      	nop
 8005f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3e:	bc08      	pop	{r3}
 8005f40:	469e      	mov	lr, r3
 8005f42:	4770      	bx	lr
